{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-052665fe92eea034ab9cb4776823cdd45840f4a97c7617777bd1ad4ca3f09ea65aa2e2e499d8f2a3dd989b90e55f98b93cb25d9e99ad5a393b99d17585a48946",
            "file": "projects/angular-component-library/src/lib/components/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "alert-component",
            "styleUrls": ["./alert.component.scss"],
            "styles": [],
            "templateUrl": ["./alert.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "navigationLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "navigationLinkLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "AlertType.SUCCESS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "AlertType",
                    "decorators": []
                },
                {
                    "name": "visibleState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "visibleStateChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "AlertType",
                    "defaultValue": "AlertType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "faClose",
                    "defaultValue": "Icons.faXmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "faErrorIcon",
                    "defaultValue": "Icons.faError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "faInfoIcon",
                    "defaultValue": "Icons.faInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "faSuccessIcon",
                    "defaultValue": "Icons.faSuccess",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "faWarningIcon",
                    "defaultValue": "Icons.faWarning",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "removeAlert",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create and show alert.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;alert-component\n  [(visibleState)]=&quot;showAlert&quot;\n  [message]=&quot;errorMsg&quot;\n  [type]=&quot;alertTypeError&quot;\n&gt;&lt;/alert-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create and show alert.\n\n```\n<alert-component\n  [(visibleState)]=\"showAlert\"\n  [message]=\"errorMsg\"\n  [type]=\"alertTypeError\"\n></alert-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/free-solid-svg-icons';\nimport { RouterModule } from '@angular/router';\nimport { Icons } from '../../model/icons';\nimport { AlertType } from '../../model/alert-type.enum';\n\n/**\n * Component to create and show alert.\n *\n * @howToUse\n * ```\n * <alert-component\n *   [(visibleState)]=\"showAlert\"\n *   [message]=\"errorMsg\"\n *   [type]=\"alertTypeError\"\n * ></alert-component>\n * ```\n */\n@Component({\n  selector: 'alert-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule, RouterModule],\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.scss'],\n})\nexport class AlertComponent {\n  @Input() title = '';\n  // message to display, realized as htmlInput\n  @Input() message = '';\n  // info, success, error, waring\n  @Input() type: AlertType = AlertType.SUCCESS;\n  // if state is true, alert is shown\n  @Input() visibleState = false;\n\n  @Input() navigationLink?: string;\n  @Input() navigationLinkLabel?: string;\n\n  //with 'Change' add the end you can realize two-way-binding\n  @Output() visibleStateChange = new EventEmitter<boolean>();\n\n  faErrorIcon: IconDefinition = Icons.faError;\n  faWarningIcon: IconDefinition = Icons.faWarning;\n  faSuccessIcon: IconDefinition = Icons.faSuccess;\n  faInfoIcon: IconDefinition = Icons.faInfo;\n  faClose: IconDefinition = Icons.faXmark;\n\n  AlertType = AlertType;\n\n  removeAlert(): void {\n    this.visibleState = false;\n    this.visibleStateChange.emit(this.visibleState);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../assets/styles' as *;\n@use 'sass:color';\n\n:host {\n  display: inline-block;\n}\n\n.alert {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  height: auto;\n  color: var(--text-color);\n  border-radius: var(--alert-radius);\n  box-sizing: border-box;\n  padding: 10px 15px;\n\n  .flex-row {\n    align-items: center;\n    margin-right: 0.5em;\n  }\n\n  .close {\n    cursor: pointer;\n  }\n\n  fa-icon {\n    font-size: 1.4em;\n  }\n\n  a {\n    text-decoration: underline;\n    margin: 0em 0.5em;\n  }\n\n  p {\n    margin: 0px;\n    margin-left: 15px;\n    font-weight: var(--font-weight-light);\n    line-height: 1.4em;\n  }\n\n  &.success {\n    background: var(--toast-success-color-light);\n    border: 1px solid var(--toast-success-color);\n    border-left: 5px solid var(--toast-success-color);\n\n    p,\n    a,\n    fa-icon {\n      display: inline-block;\n      color: var(--toast-success-color);\n    }\n    .close:hover {\n      color: color.adjust($toast-success-color, $lightness: -10%);\n    }\n  }\n\n  &.error {\n    background: var(--toast-error-color-light);\n    border: 1px solid var(--toast-error-color);\n    border-left: 5px solid var(--toast-error-color);\n\n    p,\n    a,\n    fa-icon {\n      display: inline-block;\n      color: var(--toast-error-color);\n    }\n    .close:hover {\n      color: color.adjust($toast-error-color, $lightness: -10%);\n    }\n  }\n\n  &.info {\n    background: var(--toast-info-color-light);\n    border: 1px solid var(--toast-info-color);\n    border-left: 5px solid var(--toast-info-color);\n\n    p,\n    a,\n    fa-icon {\n      display: inline-block;\n      color: var(--toast-info-color);\n    }\n    .close:hover {\n      color: color.adjust($toast-info-color, $lightness: -10%);\n    }\n  }\n\n  &.warning {\n    background: var(--toast-warning-color-light);\n    border: 1px solid var(--toast-warning-color);\n    border-left: 5px solid var(--toast-warning-color);\n\n    p,\n    a,\n    fa-icon {\n      display: inline-block;\n      color: var(--toast-warning-color);\n    }\n    .close:hover {\n      color: color.adjust($toast-warning-color, $lightness: -10%);\n    }\n  }\n}\n\n/***************************************************************\nMedia query to hide hover effects for devices \nthat do not support them, like touch displays\n**************************************************************/\n@media (hover: hover) {\n  a:hover {\n    font-weight: var(--font-weight-medium);\n  }\n}\n",
                    "styleUrl": "./alert.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "@if (visibleState) {\n  <div class=\"alert\" [ngClass]=\"[type]\">\n    <div class=\"flex-row\">\n      @switch (type) {\n        @case (AlertType.ERROR) {\n          <fa-icon [icon]=\"faErrorIcon\"></fa-icon>\n        }\n        @case (AlertType.WARNING) {\n          <fa-icon [icon]=\"faWarningIcon\"></fa-icon>\n        }\n        @case (AlertType.INFO) {\n          <fa-icon [icon]=\"faInfoIcon\" [rotate]=\"180\"></fa-icon>\n        }\n        @case (AlertType.SUCCESS) {\n          <fa-icon [icon]=\"faSuccessIcon\"></fa-icon>\n        }\n      }\n      @if (title) {\n        <p>\n          <b>{{ title }}</b>\n        </p>\n      }\n      <span>\n        <p [innerHTML]=\"message\"></p>\n\n        @if (navigationLink) {\n          <a [routerLink]=\"navigationLink\"> {{ navigationLinkLabel }} </a>\n        }\n      </span>\n    </div>\n    <fa-icon class=\"close\" [icon]=\"faClose\" (click)=\"removeAlert()\"></fa-icon>\n  </div>\n}\n"
        },
        {
            "name": "BadgeComponent",
            "id": "component-BadgeComponent-28e1e69386b113491e6b12e0ecead8b1ff109be76a6aecfd3777897b8d486b911403cede1ddd28a7b18a14d58e39f44c17838c66d031fd8f7a550cfe04589299",
            "file": "projects/angular-component-library/src/lib/components/badge/badge.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "badge-component",
            "styleUrls": ["./badge.component.scss"],
            "styles": [],
            "templateUrl": ["./badge.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "borderRadius",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "classStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string | number",
                    "decorators": []
                },
                {
                    "name": "postIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "IconDefinition",
                    "decorators": []
                },
                {
                    "name": "preIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "IconDefinition",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create a badge.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;badge-component\n [label]=&quot;&#39;scheduler.today&#39; | translate &quot;&gt;\n&lt;/badge-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create a badge.\n\n```\n<badge-component\n [label]=\"'scheduler.today' | translate \">\n</badge-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\n\n/**\n * Component to create a badge.\n *\n * @howToUse\n * ```\n * <badge-component\n *  [label]=\"'scheduler.today' | translate \">\n * </badge-component>\n * ```\n */\n@Component({\n  selector: 'badge-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule],\n  templateUrl: './badge.component.html',\n  styleUrls: ['./badge.component.scss'],\n})\nexport class BadgeComponent {\n  @Input() label: string | number = '';\n  @Input() borderRadius: number = 0;\n  @Input() classStyle?: string;\n  @Input() isDisabled? = false;\n  @Input() postIcon?: IconDefinition;\n  @Input() preIcon?: IconDefinition;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-flex;\n  align-items: center;\n  box-sizing: border-box;\n}\n\n.badge {\n  padding: 0.7em 1em;\n  border-radius: var(--badge-radius);\n  background-color: var(--not-emphrazed-color);\n  display: flex;\n  align-items: center;\n  column-gap: 10px;\n\n  p {\n    font-weight: var(--font-weight-medium);\n    color: var(--fa-icon-color);\n    margin: 0px;\n    padding: 0px;\n    line-height: 10px;\n  }\n\n  &.pos-absolute {\n    position: absolute;\n    top: -5px;\n    right: -5px;\n    border-radius: 50%;\n    width: 10px;\n    height: 10px;\n    line-height: 9px;\n    background-color: var(--modified-data-color);\n    color: var(--fa-icon-color);\n    font-weight: var(--font-weight-medium);\n    padding: 2px;\n    z-index: 1500;\n\n    &.xs {\n      top: 1px;\n      padding: 0px;\n    }\n\n    &.s {\n      padding: 5px;\n      display: flex;\n      justify-content: center;\n    }\n\n    &.event {\n      top: -4px;\n      right: -1px;\n      padding: 0px;\n    }\n  }\n\n  &.success {\n    background-color: var(--job-successful-color);\n  }\n\n  &.failed {\n    background-color: var(--job-failed-color);\n  }\n\n  &.pending {\n    background-color: var(--job-pending-color);\n  }\n\n  &.running {\n    background-color: var(--job-running-color);\n  }\n\n  &.changes {\n    background-color: var(--modified-data-color);\n    color: white;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: calc(var(--btn-height) - 15px);\n    height: calc(var(--btn-height) - 15px);\n    box-sizing: border-box;\n    padding: 0.4em;\n    position: relative;\n    margin: auto;\n  }\n\n  /** task states ***/\n  &.current {\n    background-color: var(--current-color);\n    p {\n      font-weight: var(--font-weight-semibold);\n      text-transform: uppercase;\n      color: var(--current-color-dark);\n    }\n  }\n\n  &.urgent {\n    background-color: var(--urgent-color);\n    border: 1px solid white;\n    p {\n      font-weight: var(--font-weight-semibold);\n      text-transform: uppercase;\n      color: var(--urgent-color-dark);\n    }\n  }\n\n  &.frozen {\n    background-color: var(--frozen-color);\n    p {\n      font-weight: var(--font-weight-semibold);\n      text-transform: uppercase;\n      color: var(--frozen-color-dark);\n    }\n  }\n\n  &.manual {\n    background-color: var(--manual-color);\n    p {\n      font-weight: var(--font-weight-semibold);\n      text-transform: uppercase;\n      color: var(--manual-color-dark);\n    }\n  }\n\n  &.free {\n    background-color: var(--free-color);\n    border: 1px solid var(--border-color);\n\n    p {\n      font-weight: var(--font-weight-semibold);\n      text-transform: uppercase;\n      color: var(--free-color-dark);\n    }\n\n    fa-icon {\n      color: var(--free-color-dark);\n    }\n  }\n}\n\n.disabled {\n  opacity: 0.3;\n  cursor: not-allowed;\n}\n\n/***************************************************************\nMedia query to hide hover effects for devices \nthat do not support them, like touch displays\n**************************************************************/\n@media (hover: hover) {\n  .badge {\n    &:hover,\n    &.active {\n      &:not([disabled]) {\n        filter: brightness(85%);\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./badge.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div\n  class=\"badge\"\n  [attr.aria-label]=\"label\"\n  [ngClass]=\"styleClass ?? ''\"\n  [style.border-radius.px]=\"borderRadius\"\n  [class.disabled]=\"isDisabled\">\n  @if (preIcon) {\n    <fa-icon [icon]=\"preIcon\"></fa-icon>\n  }\n  <p>{{ label }}</p>\n\n  @if (postIcon) {\n    <fa-icon [icon]=\"postIcon\"></fa-icon>\n  }\n</div>\n"
        },
        {
            "name": "BorderedBtnComponent",
            "id": "component-BorderedBtnComponent-47f6bc768f3b315795b66fa8d9084a9ec0ca0dee6b126a5a5a2d1b8e72932d747ff32351820506544015cdc8af50ce8f3c75d3f4b1dd923066ee2c671e1b3be2",
            "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bordered-btn-component",
            "styleUrls": ["./bordered-btn.component.scss"],
            "styles": [],
            "templateUrl": ["./bordered-btn.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "faIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "IconDefinition",
                    "decorators": []
                },
                {
                    "name": "hoverStyle",
                    "defaultValue": "HoverStyle.SIMPLE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "isActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSpinning",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showIcon",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create a bordered button.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;bordered-btn-component\n [ariaLabel]= &quot;&#39;scheduler.today&#39; | translate &quot;\n [label]=&quot;&#39;scheduler.today&#39; | translate &quot;\n [faIcon]=&quot;faCog&quot;&gt;\n&lt;/bordered-btn-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create a bordered button.\n\n```\n<bordered-btn-component\n [ariaLabel]= \"'scheduler.today' | translate \"\n [label]=\"'scheduler.today' | translate \"\n [faIcon]=\"faCog\">\n</bordered-btn-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { HoverStyle } from '../../model/hover-style.enum';\n\n/**\n * Component to create a bordered button.\n *\n * @howToUse\n * ```\n * <bordered-btn-component\n *  [ariaLabel]= \"'scheduler.today' | translate \"\n *  [label]=\"'scheduler.today' | translate \"\n *  [faIcon]=\"faCog\">\n * </bordered-btn-component>\n * ```\n */\n@Component({\n  selector: 'bordered-btn-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule],\n  templateUrl: './bordered-btn.component.html',\n  styleUrls: ['./bordered-btn.component.scss'],\n})\nexport class BorderedBtnComponent {\n  @Input() ariaLabel: string = '';\n\n  @Input() label?: string;\n\n  @Input() faIcon?: IconDefinition;\n\n  @Input() showIcon = true;\n\n  @Input() isDisabled?: boolean;\n  // example --> gray, delete\n  @Input() styleClass?: string = '';\n  // example --> filling or shining\n  @Input() hoverStyle = HoverStyle.SIMPLE;\n  // example --> spin or not\n  @Input() isSpinning = false;\n  // example --> active or not\n  @Input() isActive?: boolean;\n  // example --> 100% or not\n  @Input() width?: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n\nbutton {\n  position: relative;\n  height: var(--btn-height);\n  line-height: var(--btn-height);\n  padding: var(--btn-padding);\n  border: 0;\n  border-radius: var(--border-radius);\n  font-weight: var(--font-weight-light);\n  font-size: var(--font-size);\n  background: transparent;\n  color: var(--btn-color);\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  fa-icon {\n    color: var(--btn-color);\n  }\n\n  ::ng-deep .pailot-icon {\n    font-size: 1.6em;\n  }\n\n  span {\n    margin: 0px 5px;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n\n/************************************\nShining\n**************************************/\n\n.shining {\n  background: transparent;\n  box-sizing: border-box;\n  box-shadow: inset 0 0 0 2px var(--btn-color);\n  transition: color 0.25s;\n\n  &::before,\n  &::after {\n    box-sizing: inherit;\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    border: var(--border-width) solid transparent;\n    width: 0;\n    height: 0;\n\n    fa-icon {\n      color: var(--accent-color);\n    }\n  }\n\n  &::before {\n    top: 0;\n    left: 0;\n  }\n\n  &::after {\n    bottom: 0;\n    right: 0;\n  }\n\n  &:hover,\n  &.active {\n    &:not([disabled]) {\n      color: var(--accent-color);\n\n      fa-icon {\n        color: var(--accent-color);\n      }\n    }\n  }\n\n  &:hover::before,\n  &:hover::after,\n  &.active::before,\n  &.active::after {\n    width: 100%;\n    height: 100%;\n\n    fa-icon {\n      color: var(--accent-color);\n    }\n  }\n\n  &:hover::before,\n  &.active::before {\n    border-top-color: var(--accent-color);\n    border-right-color: var(--accent-color);\n    transition:\n      width 0.25s ease-out,\n      height 0.25s ease-out 0.25s;\n  }\n\n  &:hover::after,\n  &.active::after {\n    border-bottom-color: var(--accent-color);\n    border-left-color: var(--accent-color);\n    transition:\n      border-color 0s ease-out 0.5s,\n      width 0.25s ease-out 0.5s,\n      height 0.25s ease-out 0.75s;\n  }\n}\n\n/************************************\nFilling\n**************************************/\n.filling {\n  color: var(--accent-color);\n  border: var(--border-width) solid var(--accent-color);\n  background: transparent;\n  background-image: linear-gradient(var(--accent-color), var(--accent-color));\n  background-position: 50% 50%;\n  background-repeat: no-repeat;\n  background-size: 0% 100%;\n  transition:\n    background-size 0.5s,\n    color 0.5s;\n\n  fa-icon {\n    color: var(--accent-color);\n  }\n\n  &:active,\n  &.active {\n    &:not([disabled]) {\n      background-size: 100% 100%;\n      color: var(--fa-icon-color);\n\n      fa-icon {\n        color: var(--fa-icon-color);\n      }\n    }\n  }\n}\n\n.filling.gray {\n  border: var(--border-width) solid var(--btn-color);\n  color: var(--btn-color);\n  background-image: linear-gradient(var(--btn-color), var(--btn-color));\n\n  fa-icon {\n    color: var(--btn-color);\n  }\n\n  &:active,\n  &.active {\n    &:not([disabled]) {\n      color: var(--accent-color);\n\n      fa-icon {\n        color: var(--accent-color);\n      }\n    }\n  }\n\n  &.loading::after {\n    border-top-color: var(--accent-color);\n  }\n}\n\n/***************************\nSimple hover\n********************************/\n.simple {\n  color: var(--btn-color);\n  border: var(--border-width) solid var(--btn-border-color);\n  background: transparent;\n\n  fa-icon {\n    color: var(--btn-color);\n  }\n\n  &:active,\n  &.active {\n    &:not([disabled]) {\n      border-color: transparent;\n      background-color: var(--accent-color-light);\n      color: var(--accent-color);\n\n      fa-icon {\n        color: var(--accent-color);\n      }\n\n      ::ng-deep .pailot-icon {\n        color: var(--accent-color);\n      }\n    }\n  }\n}\n\n/***************************\nInverted hover\n********************************/\n.inverted {\n  color: var(--btn-color);\n  border: var(--border-width) solid var(--btn-border-color);\n  background: transparent;\n\n  fa-icon {\n    color: var(--btn-color);\n  }\n\n  &:active,\n  &.active {\n    &:not([disabled]) {\n      border-color: transparent;\n      background-color: var(--btn-color);\n      color: var(--fa-icon-color);\n\n      fa-icon {\n        color: var(--fa-icon-color);\n      }\n\n      ::ng-deep .pailot-icon {\n        color: var(--fa-icon-color);\n      }\n    }\n  }\n}\n\n/************************************\nDeleted\n**************************************/\n.delete {\n  color: var(--delete-color);\n  border: var(--border-width) solid var(--delete-color);\n  background: transparent;\n\n  fa-icon {\n    color: var(--delete-color);\n  }\n\n  &:active {\n    &:not([disabled]) {\n      border-color: transparent;\n      background-color: var(--delete-color-light);\n      color: var(--delete-color);\n\n      fa-icon {\n        color: var(--delete-color);\n      }\n      ::ng-deep .pailot-icon {\n        color: var(--delete-color);\n      }\n    }\n  }\n}\n\n.small {\n  height: var(--btn-small-height);\n  line-height: var(--btn-small-height);\n  padding: var(--btn-small-padding);\n}\n\n/************************************\nDisabled\n**************************************/\nbutton:disabled,\nbutton[disabled] {\n  opacity: 0.5;\n  background-size: 0% 100%;\n  cursor: not-allowed;\n\n  &:hover::before,\n  &:hover::after {\n    width: 0%;\n    height: 0%;\n    border-color: transparent;\n  }\n}\n\n/***************************************************************\nMedia query to hide hover effects for devices \nthat do not support them, like touch displays\n**************************************************************/\n@media (hover: hover) {\n  .filling {\n    &:hover,\n    &.active {\n      &:not([disabled]) {\n        background-size: 100% 100%;\n        color: var(--fa-icon-color);\n\n        fa-icon {\n          color: var(--fa-icon-color);\n        }\n      }\n    }\n  }\n\n  .filling.gray {\n    &:hover,\n    &.active {\n      &:not([disabled]) {\n        color: var(--accent-color);\n\n        fa-icon {\n          color: var(--accent-color);\n        }\n      }\n    }\n  }\n\n  .simple {\n    &:hover,\n    &.active {\n      &:not([disabled]) {\n        border-color: transparent;\n        background-color: var(--accent-color-light);\n        color: var(--accent-color);\n\n        fa-icon {\n          color: var(--accent-color);\n        }\n\n        ::ng-deep .pailot-icon {\n          color: var(--accent-color);\n        }\n      }\n    }\n  }\n\n  .delete {\n    &:hover,\n    &.active {\n      &:not([disabled]) {\n        border-color: transparent;\n        background-color: var(--delete-color-light);\n        color: var(--delete-color);\n\n        fa-icon {\n          color: var(--delete-color);\n        }\n\n        ::ng-deep .pailot-icon {\n          color: var(--delete-color);\n        }\n      }\n    }\n  }\n\n  .inverted {\n    &:hover,\n    &.active {\n      &:not([disabled]) {\n        border-color: transparent;\n        background-color: var(--btn-color);\n        color: var(--fa-icon-color);\n\n        fa-icon {\n          color: var(--fa-icon-color);\n        }\n      }\n    }\n  }\n\n  .inverted.delete {\n    &:hover,\n    &.active {\n      &:not([disabled]) {\n        background-color: var(--delete-color);\n        color: var(--fa-icon-color);\n\n        fa-icon {\n          color: var(--fa-icon-color);\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./bordered-btn.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<button\n  [style.width]=\"width\"\n  [ngClass]=\"[hoverStyle, styleClass]\"\n  [attr.title]=\"ariaLabel\"\n  [attr.aria-label]=\"ariaLabel\"\n  [disabled]=\"isDisabled\"\n  [class.active]=\"isActive\">\n  @if (faIcon && showIcon) {\n    <fa-icon\n      [icon]=\"faIcon\"\n      [animation]=\"isSpinning ? 'spin' : undefined\"></fa-icon>\n  }\n\n  <ng-content select=\"[icon]\"></ng-content>\n\n  @if (label) {\n    <span>{{ label }}</span>\n  }\n</button>\n"
        },
        {
            "name": "BorderlessBtnComponent",
            "id": "component-BorderlessBtnComponent-19789e365f1434599649d292bd34a799026316febff43da568495b2935573a004c2f28b9bc5c59f72f2b0ee217fac9aaf938a5c8e9ed3e30c902ac55c4aa4beb",
            "file": "projects/angular-component-library/src/lib/components/borderless-btn/borderless-btn.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "borderless-btn-component",
            "styleUrls": ["./borderless-btn.component.scss"],
            "styles": [],
            "templateUrl": ["./borderless-btn.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "faIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "IconDefinition",
                    "decorators": []
                },
                {
                    "name": "hoverStyle",
                    "defaultValue": "HoverStyle.SIMPLE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "isActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSpinning",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showIcon",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create a borderless button.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;borderless-btn-component\n [ariaLabel]= &quot;&#39;scheduler.today&#39; | translate &quot;\n [label]=&quot;&#39;scheduler.today&#39; | translate &quot;\n [faIcon] = &quot;faCog&quot;&gt;\n&lt;/borderless-btn-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create a borderless button.\n\n```\n<borderless-btn-component\n [ariaLabel]= \"'scheduler.today' | translate \"\n [label]=\"'scheduler.today' | translate \"\n [faIcon] = \"faCog\">\n</borderless-btn-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { HoverStyle } from '../../model/hover-style.enum';\n\n/**\n * Component to create a borderless button.\n *\n * @howToUse\n * ```\n * <borderless-btn-component\n *  [ariaLabel]= \"'scheduler.today' | translate \"\n *  [label]=\"'scheduler.today' | translate \"\n *  [faIcon] = \"faCog\">\n * </borderless-btn-component>\n * ```\n */\n@Component({\n  selector: 'borderless-btn-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule],\n  templateUrl: './borderless-btn.component.html',\n  styleUrls: ['./borderless-btn.component.scss'],\n})\nexport class BorderlessBtnComponent {\n  @Input() ariaLabel: string = '';\n\n  @Input() label?: string;\n\n  @Input() faIcon?: IconDefinition;\n\n  @Input() showIcon = true;\n\n  @Input() isDisabled?: boolean;\n  // example --> gray, delete\n  @Input() styleClass?: string = '';\n  // example --> filling or shining\n  @Input() hoverStyle = HoverStyle.SIMPLE;\n  // example --> spin or not\n  @Input() isSpinning = false;\n  // example --> active or not\n  @Input() isActive?: boolean;\n  // example --> 100% or not\n  @Input() width?: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n\nbutton {\n  position: relative;\n  height: var(--btn-height);\n  line-height: var(--btn-height);\n  padding: var(--btn-padding);\n  border: 0;\n  border-radius: var(--border-radius);\n  font-weight: var(--font-weight-light);\n  font-size: var(--font-size);\n  background: white;\n  color: var(--accent-color);\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-sizing: border-box;\n\n  fa-icon {\n    color: var(--accent-color);\n  }\n\n  span {\n    margin: 0px 5px;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n\n/************************************\nFilling\n**************************************/\n.filling {\n  color: var(--accent-color);\n  background: transparent;\n  background-image: linear-gradient(var(--accent-color), var(--accent-color));\n  background-position: 50% 50%;\n  background-repeat: no-repeat;\n  background-size: 0% 100%;\n  transition:\n    background-size 0.5s,\n    color 0.5s;\n\n  fa-icon {\n    color: var(--accent-color);\n  }\n\n  &:hover,\n  &.active {\n    &:not([disabled]) {\n      background-size: 100% 100%;\n      color: var(--fa-icon-color);\n\n      fa-icon {\n        color: var(--fa-icon-color);\n      }\n    }\n  }\n}\n\n.filling.gray {\n  color: var(var(--btn-color));\n  background-image: linear-gradient(\n    var(var(--btn-color)),\n    var(var(--btn-color))\n  );\n\n  fa-icon {\n    color: var(var(--btn-color));\n  }\n\n  &:hover,\n  &.active {\n    &:not([disabled]) {\n      color: var(--accent-color);\n\n      fa-icon {\n        color: var(--accent-color);\n      }\n    }\n  }\n}\n\n/***************************\nSimple hover\n********************************/\n.simple {\n  color: var(--accent-color);\n  background: transparent;\n\n  fa-icon {\n    color: var(--accent-color);\n  }\n\n  &:active,\n  &.active {\n    &:not([disabled]) {\n      background-color: var(--accent-color);\n      color: var(--fa-icon-color);\n      background-image: var(--darken-gradient);\n\n      fa-icon {\n        color: var(--fa-icon-color);\n      }\n    }\n  }\n}\n\n/************************************\nDeleted\n**************************************/\n.delete {\n  color: var(--delete-color);\n  background: transparent;\n\n  fa-icon {\n    color: var(--delete-color);\n  }\n\n  &:active {\n    &:not([disabled]) {\n      background-color: var(--delete-color);\n      color: var(--fa-icon-color);\n\n      fa-icon {\n        color: var(--fa-icon-color);\n      }\n    }\n  }\n}\n\n.small {\n  height: var(--btn-small-height);\n  line-height: var(--btn-small-height);\n  padding: var(--btn-small-padding);\n}\n\n/************************************\nDisabled\n**************************************/\nbutton:disabled,\nbutton[disabled] {\n  opacity: 0.5;\n  background-size: 0% 100%;\n  cursor: not-allowed;\n\n  &:hover::before,\n  &:hover::after {\n    width: 0%;\n    height: 0%;\n  }\n}\n\n/***************************************************************\nMedia query to hide hover effects for devices \nthat do not support them, like touch displays\n**************************************************************/\n@media (hover: hover) {\n  .simple {\n    &:hover,\n    &.active {\n      &:not([disabled]) {\n        background-color: var(--accent-color);\n        color: var(--fa-icon-color);\n        background-image: var(--darken-gradient);\n\n        fa-icon {\n          color: var(--fa-icon-color);\n        }\n      }\n    }\n    &:active:not([disabled]) {\n      background-color: var(--accent-color-dark);\n    }\n  }\n\n  .delete {\n    &:hover,\n    &.active {\n      &:not([disabled]) {\n        background-color: var(--delete-color);\n        color: var(--fa-icon-color);\n\n        fa-icon {\n          color: var(--fa-icon-color);\n        }\n      }\n    }\n    &:active:not([disabled]) {\n      background-color: var(--delete-color);\n    }\n  }\n}\n",
                    "styleUrl": "./borderless-btn.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<button\n  [style.width]=\"width\"\n  [ngClass]=\"[hoverStyle, styleClass]\"\n  [attr.title]=\"ariaLabel\"\n  [attr.aria-label]=\"ariaLabel\"\n  [disabled]=\"isDisabled\"\n  [class.active]=\"isActive\">\n  @if (faIcon && showIcon) {\n    <fa-icon\n      [icon]=\"faIcon\"\n      [animation]=\"isSpinning ? 'spin' : undefined\"></fa-icon>\n  }\n  @if (label) {\n    <span>{{ label }}</span>\n  }\n</button>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-644a3d31af0154a0a75e4ae9d6d7520ce83f48584290bf388435c62f4dd834f43a2d8cc4f507c372982161d483c8112ac04f187026dccfe1f9672805bced99dc",
            "file": "projects/angular-component-library/src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": ["./button.css"],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\">\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 771,
                            "end": 784,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 772,
                                "end": 780,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 28,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\">\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary\n      ? 'storybook-button--primary'\n      : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 42
                    }
                }
            }
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-7f24c1b4571e8c8b6353db515b1b4ddba96efe5595bd116f8abce9b973edab271de93dce057e0f089d0fcede4bee953ec89bc0e3ec074e2a74ec005eba0f67cb",
            "file": "projects/angular-component-library/src/lib/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "checkbox-component",
            "styleUrls": ["./checkbox.component.scss"],
            "styles": [],
            "templateUrl": ["./checkbox.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "EditMode.WRITE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EditMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faCheck",
                    "defaultValue": "Icons.faCheck",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "faSquare",
                    "defaultValue": "Icons.faSquare",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "faSquareCheck",
                    "defaultValue": "Icons.faSquareCheck",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "modes",
                    "defaultValue": "EditMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "randomId",
                    "defaultValue": "Math.floor(Math.random() * 16777215).toString(16)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to select or check a value</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;checkbox-component\n  [(value)]=&quot;checked&quot;&gt;\n&lt;/checkbox-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to select or check a value\n\n```\n<checkbox-component\n  [(value)]=\"checked\">\n</checkbox-component>\n```\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { Icons } from '../../model/icons';\nimport { EditMode } from '../../model/edit-mode.enum';\n\n/**\n * Component to select or check a value\n *\n * @howToUse\n * ```\n * <checkbox-component\n *   [(value)]=\"checked\">\n * </checkbox-component>\n * ```\n */\n@Component({\n  selector: 'checkbox-component',\n  standalone: true,\n  imports: [FontAwesomeModule],\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss'],\n})\nexport class CheckboxComponent {\n  @Input() value = false;\n  @Input() mode: EditMode = EditMode.WRITE;\n  @Input() height?: number;\n\n  @Output() valueChange = new EventEmitter<boolean>();\n\n  modes: typeof EditMode = EditMode;\n\n  faSquare: IconDefinition = Icons.faSquare;\n  faSquareCheck: IconDefinition = Icons.faSquareCheck;\n  faCheck: IconDefinition = Icons.faCheck;\n\n  randomId: string = Math.floor(Math.random() * 16777215).toString(16);\n\n  toggleValue(): void {\n    this.value = !this.value;\n    this.valueChange.emit(this.value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n\n.checkbox {\n  display: block;\n  position: relative;\n  cursor: pointer;\n  font-size: var(--font-size);\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  height: 27px;\n  width: 27px;\n\n  input[type='checkbox'] {\n    margin-right: 10px;\n    position: absolute;\n    opacity: 0;\n    cursor: pointer;\n    height: 0;\n    width: 25px;\n    min-width: 25px;\n  }\n\n  /* Create a custom checkbox */\n  .checkmark {\n    position: absolute;\n    margin-right: 10px;\n    height: 25px;\n    width: 25px;\n    background-color: transparent;\n    border: 1px solid var(--accent-color);\n    border-radius: var(--border-radius);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n\n    fa-icon {\n      font-size: 1.2em;\n      display: contents;\n    }\n  }\n\n  &:hover input ~ .checkmark {\n    background-color: var(--accent-color-light);\n  }\n\n  & input:checked ~ .checkmark {\n    background-color: var(--accent-color);\n  }\n}\n\n.readonly {\n  pointer-events: none;\n  opacity: 0.5;\n  margin: 0.25em;\n\n  .checkmark {\n    border: 1px solid var(--text-color);\n\n    fa-icon {\n      color: var(--text-color);\n    }\n  }\n\n  & input:checked ~ .checkmark {\n    background-color: white;\n  }\n}\n\n.read {\n  fa-icon {\n    color: var(--text-color);\n  }\n}\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "@if (mode === modes.WRITE) {\n  <span\n    class=\"checkbox\"\n    (click)=\"toggleValue()\"\n    [style.height.px]=\"height ?? 30\"\n    [style.width.px]=\"height ?? 30\">\n    <input id=\"checkbox-{{ randomId }}\" type=\"checkbox\" [checked]=\"value\" />\n    <span\n      class=\"checkmark\"\n      [style.height.px]=\"height ?? 30\"\n      [style.width.px]=\"height ?? 30\">\n      @if (value) {\n        <fa-icon [icon]=\"faCheck\"> </fa-icon>\n      }\n    </span>\n  </span>\n}\n@if (mode === modes.READ) {\n  <span class=\"read\">\n    <fa-icon [icon]=\"value ? faSquareCheck : faSquare\"> </fa-icon>\n  </span>\n}\n"
        },
        {
            "name": "CircleBtnComponent",
            "id": "component-CircleBtnComponent-73f51c3b91ce50eba2a450370b0b5ed9a5eae115589422f1611de53784e0344a310e9ea79b253a0743ce6f38a05421f207237297f786f0bbf647e1cfccd1847b",
            "file": "projects/angular-component-library/src/lib/components/circle-btn/circle-btn.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "circle-btn-component",
            "styleUrls": ["./circle-btn.component.scss"],
            "styles": [],
            "templateUrl": ["./circle-btn.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "faIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "IconDefinition",
                    "decorators": []
                },
                {
                    "name": "isActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSpinning",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create and show circle button with icon.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;circle-btn-component\n  [faIcon]=&quot;faCog&quot;\n  [backgroundColor]=&quot;red&quot;\n&gt;&lt;/circle-btn-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create and show circle button with icon.\n\n```\n<circle-btn-component\n  [faIcon]=\"faCog\"\n  [backgroundColor]=\"red\"\n></circle-btn-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\n\n/**\n * Component to create and show circle button with icon.\n *\n * @howToUse\n * ```\n * <circle-btn-component\n *   [faIcon]=\"faCog\"\n *   [backgroundColor]=\"red\"\n * ></circle-btn-component>\n * ```\n */\n@Component({\n  selector: 'circle-btn-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule],\n  templateUrl: './circle-btn.component.html',\n  styleUrls: ['./circle-btn.component.scss'],\n})\nexport class CircleBtnComponent {\n  @Input() ariaLabel: string = '';\n\n  @Input() faIcon?: IconDefinition;\n\n  @Input() isDisabled?: boolean;\n  // example --> spin or not\n  @Input() isSpinning = false;\n  // example --> active or not\n  @Input() isActive?: boolean;\n\n  @Input() backgroundColor?: string;\n\n  // example --> gray, delete\n  @Input() styleClass?: string = '';\n\n  // example --> 100% or not\n  @Input() width?: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n\nbutton {\n  height: var(--btn-height);\n  width: var(--btn-height);\n  position: relative;\n  border: 0;\n  border-radius: 50%;\n  margin: 5px;\n  background: var(--btn-color);\n  cursor: pointer;\n  font-size: 1.2em;\n  transition: background 0.6s ease;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  fa-icon {\n    color: var(--fa-icon-color);\n  }\n\n  &.active {\n    background-image: var(--darken-gradient) !important;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n\n/***************************************************************\nMedia query to hide hover effects for devices \nthat do not support them, like touch displays\n**************************************************************/\n@media (hover: hover) {\n  button {\n    &:hover {\n      background-image: var(--darken-gradient) !important;\n    }\n  }\n}\n",
                    "styleUrl": "./circle-btn.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<button\n  [ngClass]=\"[styleClass]\"\n  [style.background]=\"backgroundColor\"\n  [class.active]=\"isActive\"\n  [attr.title]=\"ariaLabel\"\n  [attr.aria-label]=\"ariaLabel\"\n  [disabled]=\"isDisabled\">\n  @if (faIcon) {\n    <fa-icon [icon]=\"faIcon\" [animation]=\"isSpinning ? 'spin' : undefined\">\n    </fa-icon>\n  }\n</button>\n"
        },
        {
            "name": "CollapsibleComponent",
            "id": "component-CollapsibleComponent-569639f3f7d8e3b51d92cc69fedd539524ad123cbbf9b7e685dd682dbb88b407499812c3f64f38b59852d0469256ce508f2924e6316a3a2af18871bba47bd676",
            "file": "projects/angular-component-library/src/lib/components/collapsible/collapsible.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "collapsible-component",
            "styleUrls": ["./collapsible.component.scss"],
            "styles": [],
            "templateUrl": ["./collapsible.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "classStyles",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "show",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "showChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "collapseContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to show and hide content by button click</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;collapsible-component class=&quot;legend&quot;&gt;\n    &lt;div header #collapsible&gt;\n        ...\n    &lt;/div&gt;\n    &lt;div content #collapsibleContent&gt;\n        ...\n    &lt;/div&gt;\n&lt;/collapsible-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to show and hide content by button click\n\n```\n<collapsible-component class=\"legend\">\n    <div header #collapsible>\n        ...\n    </div>\n    <div content #collapsibleContent>\n        ...\n    </div>\n</collapsible-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { ClickOutsideDirective } from '../../directives/click-outside.directive';\n\n/**\n * Component to show and hide content by button click\n *\n * @howToUse\n * ```\n * <collapsible-component class=\"legend\">\n *     <div header #collapsible>\n *         ...\n *     </div>\n *     <div content #collapsibleContent>\n *         ...\n *     </div>\n * </collapsible-component>\n * ```\n */\n@Component({\n  selector: 'collapsible-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule, FormsModule],\n  templateUrl: './collapsible.component.html',\n  styleUrls: ['./collapsible.component.scss'],\n})\nexport class CollapsibleComponent implements OnInit {\n  @Input() classStyles = '';\n  @Input() show = false;\n\n  @Output() showChange = new EventEmitter<boolean>();\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.changeDetector.detectChanges();\n  }\n\n  collapseContent(): void {\n    this.show = !this.show;\n    this.showChange.emit(this.show);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  position: relative;\n  cursor: pointer;\n}\n\n.collapsible-header {\n  border: 1px solid var(--border-color);\n  border-top-left-radius: var(--border-radius);\n  border-top-right-radius: var(--border-radius);\n  height: var(--btn-height);\n  line-height: var(--btn-height);\n  box-sizing: border-box;\n  padding: 0em 1em;\n\n  ::ng-deep {\n    h2,\n    h3,\n    h4,\n    p {\n      margin: 0px;\n    }\n  }\n}\n\n.collapsible-content {\n  border-left: 1px solid var(--border-color);\n  border-right: 1px solid var(--border-color);\n  border-bottom: 1px solid var(--border-color);\n  border-bottom-left-radius: var(--border-radius);\n  border-bottom-right-radius: var(--border-radius);\n\n  ::ng-deep {\n    h2,\n    h3,\n    h4,\n    p {\n      margin: 0px;\n    }\n  }\n\n  &.show {\n    height: auto;\n    transform-origin: top;\n    transform: scaleY(1);\n    transition: transform 0.2s ease-in-out;\n  }\n\n  &.hide {\n    height: 0;\n    transform-origin: top;\n    transition: transform 0s ease-in-out;\n    transform: scaleY(0);\n  }\n}\n\n.scheduler-design {\n  border: none;\n  margin: 0;\n  box-sizing: border-box;\n  padding: 0em;\n}\n\n.collapsible-header.scheduler-design {\n  min-height: calc(var(--btn-height) + 5px);\n}\n\n/***************************************************************\nMedia query to hide hover effects for devices \nthat do not support them, like touch displays\n**************************************************************/\n@media (hover: hover) {\n  .collapsible-header {\n    &:hover {\n      color: var(--accent-color);\n\n      ::ng-deep {\n        fa-icon {\n          color: var(--accent-color) !important;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./collapsible.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": ["OnInit"],
            "templateData": "<div\n  [ngClass]=\"['collapsible-header', classStyles]\"\n  (click)=\"collapseContent()\">\n  <ng-content select=\"[header]\"></ng-content>\n</div>\n\n<div\n  [ngClass]=\"['collapsible-content', classStyles]\"\n  [class.show]=\"show\"\n  [class.hide]=\"!show\">\n  <ng-content select=\"[content]\"></ng-content>\n</div>\n"
        },
        {
            "name": "ColorPaletteComponent",
            "id": "component-ColorPaletteComponent-0ae40a48fdf5f0e1248cc2c05708de167f3c7100a96357f1fa40a23e14295071016289bf47658c3b1848f2d4ce75b4ec03c809014b9eb12519b9ffd442f566e6",
            "file": "projects/angular-component-library/src/lib/components/color-palette/color-palette.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "color-palette-component",
            "styleUrls": ["./color-palette.component.scss"],
            "styles": [],
            "templateUrl": ["./color-palette.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Component to show colors from color service in a grid</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;color-palette-component&gt;&lt;/color-palette-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to show colors from color service in a grid\n\n```\n<color-palette-component></color-palette-component>\n```\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Colors } from '../../model/colors';\n\n/**\n * Component to show colors from color service in a grid\n *\n * @howToUse\n * ```\n * <color-palette-component></color-palette-component>\n * ```\n */\n@Component({\n  selector: 'color-palette-component',\n  standalone: true,\n  imports: [],\n  templateUrl: './color-palette.component.html',\n  styleUrls: ['./color-palette.component.scss'],\n})\nexport class ColorPaletteComponent implements OnInit {\n  colors: string[] = [];\n\n  ngOnInit() {\n    this.colors = Colors.standard;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n\n.color-palette {\n  padding: 5px;\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(auto-fill, auto);\n  grid-column-gap: 10px;\n\n  .color-item {\n    display: inline-flex;\n    height: 30px;\n    line-height: 30px;\n    color: white;\n    padding: 5px;\n  }\n}\n",
                    "styleUrl": "./color-palette.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": ["OnInit"],
            "templateData": "<div class=\"color-palette\">\n  @for (color of colors; track color; let i = $index) {\n    <div class=\"color-item\" [style.background]=\"color\">\n      <span>{{ color }}</span>\n    </div>\n  }\n</div>\n"
        },
        {
            "name": "ContextMenuComponent",
            "id": "component-ContextMenuComponent-6450f284edb8a7e2b32d2006c32c95c5c9aa688033bccfef3928a205a68da8a65ffaca23471c0e4480aa695148e647b3f09359b8d2adfeb9fce3fca9679beed6",
            "file": "projects/angular-component-library/src/lib/components/context-menu/context-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "context-menu-component",
            "styleUrls": ["./context-menu.component.scss"],
            "styles": [],
            "templateUrl": ["./context-menu.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "classStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "faIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "IconDefinition",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "ContextMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "minWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemSelected",
                    "defaultValue": "new EventEmitter<ContextMenuItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "btn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'btn'"
                        }
                    ],
                    "modifierKind": [170]
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menu'"
                        }
                    ],
                    "modifierKind": [170]
                },
                {
                    "name": "show",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "alignmentLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates alignment of menu to left or right according to the available space\n",
                    "description": "<p>Updates alignment of menu to left or right according to the available space</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1648,
                                "end": 1655,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "handleClickOutside",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles click outside of menu to close menu\n",
                    "description": "<p>Handles click outside of menu to close menu</p>\n"
                },
                {
                    "name": "selectElement",
                    "args": [
                        {
                            "name": "item",
                            "type": "ContextMenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect element in menu\n",
                    "description": "<p>Select element in menu</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2308,
                                "end": 2312,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "item"
                            },
                            "type": "ContextMenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2302,
                                "end": 2307,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle show state of menu\n",
                    "description": "<p>Toggle show state of menu</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "ClickOutsideDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Component to create and show  select</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;context-menu-component\n   [items]=&quot;selectItems&quot;\n   [ariaLabel]=&quot;&#39;Plan&#39;&quot;\n   [label]=&quot;&#39;Plan: &#39;&quot;\n   (itemSelected)=&quot;selectItemProduction($event)&quot;&gt;\n&lt;/context-menu-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create and show  select\n\n```\n<context-menu-component\n   [items]=\"selectItems\"\n   [ariaLabel]=\"'Plan'\"\n   [label]=\"'Plan: '\"\n   (itemSelected)=\"selectItemProduction($event)\">\n</context-menu-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { ContextMenuItem } from '../../model/context-menu-item.model';\nimport { ClickOutsideDirective } from '../../directives/click-outside.directive';\n\n/**\n * Component to create and show  select\n *\n * @howToUse\n * ```\n * <context-menu-component\n *    [items]=\"selectItems\"\n *    [ariaLabel]=\"'Plan'\"\n *    [label]=\"'Plan: '\"\n *    (itemSelected)=\"selectItemProduction($event)\">\n * </context-menu-component>\n * ```\n */\n@Component({\n  selector: 'context-menu-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule, ClickOutsideDirective],\n  templateUrl: './context-menu.component.html',\n  styleUrls: ['./context-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContextMenuComponent {\n  @Input() items: ContextMenuItem[] = [];\n  @Input() label = '';\n  @Input() ariaLabel: string = '';\n  @Input() faIcon?: IconDefinition;\n  @Input() classStyle?: string;\n  @Input() minWidth? = 0;\n\n  @Output() itemSelected = new EventEmitter<ContextMenuItem>();\n\n  @ViewChild('btn') btn?: ElementRef<HTMLDivElement>;\n  @ViewChild('menu') menu?: ElementRef<HTMLDivElement>;\n\n  show = false;\n\n  /**\n   * Toggle show state of menu\n   */\n  toggleMenu(): void {\n    this.show = !this.show;\n  }\n\n  /**\n   * Updates alignment of menu to left or right according to the available space\n   * @returns\n   */\n  alignmentLeft(): boolean {\n    const boundingMenu = this.menu?.nativeElement.getBoundingClientRect();\n    const boundingBtn = this.btn?.nativeElement.getBoundingClientRect();\n\n    if (boundingBtn && boundingMenu) {\n      const right = document.body.scrollWidth - boundingBtn.right;\n      //as long as there is enough space on the right, align it to the right\n      return right > boundingMenu.width;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Handles click outside of menu to close menu\n   */\n  handleClickOutside(): void {\n    if (this.show) {\n      this.show = !this.show;\n    }\n  }\n\n  /**\n   * Select element in menu\n   * @param item\n   */\n  selectElement(item: ContextMenuItem): void {\n    this.itemSelected.emit(item);\n    this.show = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n  position: relative;\n}\n\n.flex {\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  .icon-before {\n    padding-left: 10px;\n    padding-right: 5px;\n  }\n}\n\nbutton {\n  cursor: pointer;\n  position: relative;\n  height: var(--btn-height);\n  min-width: var(--btn-height);\n  line-height: var(--btn-height);\n  border: 0;\n  font-weight: var(--font-weight-light);\n  font-size: var(--font-size);\n  padding: 0px;\n  color: var(--fa-icon-color);\n  background: transparent;\n  border: var(--border-width) solid var(--accent-color);\n  border-radius: var(--border-radius);\n  width: 100%;\n  max-width: var(--max-width);\n  overflow: hidden;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  box-sizing: border-box;\n\n  fa-icon {\n    padding: var(--btn-padding);\n  }\n\n  span {\n    height: var(--btn-height);\n    line-height: var(--btn-height);\n    padding: 10px;\n    text-align: left;\n    display: inline-flex;\n    -webkit-line-clamp: 1;\n    color: var(--accent-color);\n    line-height: 1.4;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    text-align: left;\n    box-sizing: border-box;\n  }\n\n  &:hover,\n  &.active {\n    background-color: var(--accent-color-light);\n    color: var(--accent-color);\n\n    ::ng-deep {\n      .successful,\n      .released,\n      .failed,\n      .pending {\n        color: var(--accent-color);\n      }\n    }\n  }\n}\n\n.menu {\n  position: absolute;\n  top: calc(var(--btn-height) + 5px);\n  min-width: 150px;\n  width: max-content;\n  max-width: var(--max-width);\n  height: auto;\n  border-radius: 0;\n  background: var(--menu-background);\n  z-index: var(--z-index-5);\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n\n  &.left {\n    left: 2px;\n  }\n\n  &.right {\n    right: 2px;\n  }\n\n  &.show {\n    transform-origin: top;\n    transform: scaleY(1);\n    transition: transform 0.2s ease-in-out;\n  }\n\n  &.hide {\n    transform-origin: top;\n    transition: transform 0.2s ease-in-out;\n    transform: scaleY(0);\n  }\n\n  input[type='text'] {\n    height: var(--input-height);\n    border: var(--border-width) solid var(--border-color);\n    border-radius: 0;\n    outline: none;\n    cursor: pointer;\n    font-size: var(--font-size);\n    background: transparent;\n    margin: 5px;\n    width: -moz-available; /* WebKit-based browsers will ignore this. */\n    width: -webkit-fill-available; /* Mozilla-based browsers will ignore this. */\n    width: strech;\n\n    &:focus {\n      border-color: var(--accent-color);\n    }\n  }\n\n  ul {\n    list-style: none;\n    padding: 0px;\n    margin: 0px;\n    max-height: 500px;\n    overflow-y: auto;\n    border-top: 1px solid var(--border-color);\n\n    li {\n      height: var(--btn-height);\n      position: relative;\n      cursor: pointer;\n      font-size: var(--font-size);\n      -webkit-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n      padding: 0.25em 0.5em 0.25em 0.75em;\n      color: var(--text-color);\n      border-bottom: 1px solid rgb(var(--border-color), 0.2);\n      text-align: left;\n      box-sizing: border-box;\n      overflow: hidden;\n      align-items: center;\n      display: grid;\n      grid-template-columns: 0.4fr 3fr;\n\n      &.grid {\n        display: grid;\n        grid-template-columns: 0.4fr 3fr;\n      }\n\n      &.flex {\n        display: flex;\n        gap: 15px;\n      }\n\n      input[type='checkbox'] {\n        margin-right: 10px;\n        position: absolute;\n        opacity: 0;\n        cursor: pointer;\n        height: 0;\n        width: 0;\n      }\n\n      &:last-of-type {\n        border-bottom: none;\n      }\n\n      .text {\n        line-height: calc(var(--btn-height) - 10px);\n        word-wrap: break-word;\n        // max-width: 100%;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        text-align: left;\n      }\n\n      fa-icon {\n        color: var(--text-color);\n\n        &.pending {\n          color: var(--job-pending-color);\n        }\n        &.successful {\n          color: var(--job-successful-color);\n        }\n      }\n\n      &:hover,\n      &.active {\n        background-color: var(--accent-color-light);\n        color: var(--accent-color);\n\n        fa-icon {\n          color: var(--accent-color);\n        }\n      }\n    }\n  }\n}\n\n.not-emphrazed {\n  color: var(--fa-icon-color);\n  background: transparent;\n  border: var(--border-width) solid var(--not-emphrazed-color);\n  color: var(--not-emphrazed-color);\n\n  span {\n    color: var(--not-emphrazed-color);\n  }\n\n  span:last-of-type {\n    background: var(--not-emphrazed-color);\n    border-left: 1px solid var(--menu-background);\n\n    fa-icon {\n      color: var(--fa-icon-color);\n    }\n  }\n\n  &:active:not([disabled]) {\n    background-color: var(--not-emphrazed-color);\n    span {\n      color: var(--menu-background);\n    }\n  }\n}\n\n.flex.navbar {\n  cursor: pointer;\n\n  button {\n    background: transparent;\n    border: none;\n    height: var(--sub-navbar-height);\n    cursor: pointer;\n    max-width: 350px;\n\n    span {\n      color: var(--fa-icon-color);\n    }\n\n    span:first-of-type {\n      line-height: calc((var(--btn-height) / 2) + 5px);\n      overflow: hidden;\n      word-break: break-all;\n    }\n\n    span:last-of-type {\n      background: transparent;\n      border-left: none;\n\n      fa-icon {\n        color: var(--fa-icon-color);\n      }\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n    }\n  }\n\n  &:active:not([disabled]) {\n    fa-icon {\n      color: var(--accent-color-dark);\n    }\n    button {\n      span:last-of-type {\n        fa-icon {\n          color: var(--accent-color-dark);\n        }\n      }\n      span,\n      fa-icon {\n        color: var(--accent-color-dark);\n      }\n    }\n  }\n}\n\n/************************************************\nMedia query to add hover only on device which support hover\n*********************************************/\n\n@media (hover: hover) {\n  .not-emphrazed {\n    &:hover {\n      background-color: var(--not-emphrazed-color);\n      span {\n        color: var(--menu-background);\n      }\n    }\n\n    &:active:not([disabled]) {\n      background-color: var(--not-emphrazed-color);\n      span {\n        color: var(--menu-background);\n      }\n    }\n  }\n\n  .flex.navbar {\n    &:hover {\n      background-color: black;\n      fa-icon {\n        color: var(--accent-color);\n      }\n      button {\n        span:last-of-type {\n          fa-icon {\n            color: var(--accent-color);\n          }\n        }\n        span,\n        fa-icon {\n          color: var(--accent-color);\n        }\n      }\n    }\n\n    &:active:not([disabled]) {\n      fa-icon {\n        color: var(--accent-color-dark);\n      }\n      button {\n        span:last-of-type {\n          fa-icon {\n            color: var(--accent-color-dark);\n          }\n        }\n        span,\n        fa-icon {\n          color: var(--accent-color-dark);\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./context-menu.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div\n  class=\"flex\"\n  (clickOutside)=\"handleClickOutside()\"\n  [ngClass]=\"[show ? 'selected' : '', classStyle ?? '']\">\n  <button\n    #btn\n    [ngClass]=\"[show ? 'selected' : '']\"\n    [attr.title]=\"ariaLabel\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-haspopup]=\"'menu'\"\n    [attr.aria-expanded]=\"show\"\n    (click)=\"toggleMenu()\"\n    [style.justify-content]=\"label ? 'space-between' : 'center'\">\n    @if (label) {\n      <span>{{ label }}</span>\n    }\n    <span [style.padding-left.px]=\"label ? 5 : 10\">\n      @if (faIcon) {\n        <fa-icon [icon]=\"faIcon\"></fa-icon>\n      }\n    </span>\n  </button>\n  <div\n    #menu\n    class=\"menu popup-shadow\"\n    [class.show]=\"show\"\n    [class.hide]=\"!show\"\n    [ngClass]=\"alignmentLeft() ? 'left' : 'right'\">\n    <ul>\n      @for (item of items; track item) {\n        <li\n          (click)=\"selectElement(item)\"\n          [ngClass]=\"item.icon ? 'grid' : 'flex'\">\n          @if (item.icon) {\n            <fa-icon [icon]=\"item.icon\"></fa-icon>\n          }\n          <span class=\"text\">{{ item.text }} </span>\n        </li>\n      }\n    </ul>\n  </div>\n</div>\n"
        },
        {
            "name": "CustomSelectComponent",
            "id": "component-CustomSelectComponent-ad3bbc1b271639d913f5781eff24bb98abdfccf4f8fc9d37f4af06c38fa84cb2d862c93f5b8989002575bb30bdef79a5d9cfa4b5772b14d4486ef33cb83aaf4c",
            "file": "projects/angular-component-library/src/lib/components/custom-select/custom-select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "custom-select-component",
            "styleUrls": ["./custom-select.component.scss"],
            "styles": [],
            "templateUrl": ["./custom-select.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "show",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "showChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "btn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'btn'"
                        }
                    ],
                    "modifierKind": [170]
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menu'"
                        }
                    ],
                    "modifierKind": [170]
                }
            ],
            "methodsClass": [
                {
                    "name": "aligmentLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBtnHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleClickOutside",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ClickOutsideDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Component to create and show custom select with own button content and menu content</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;custom-select-component&gt;\n  &lt;div header&gt;\n    &lt;bordered-btn-component\n     [hoverStyle]=&quot;shiningStyle&quot;\n     [faIcon]=&quot;faElipsis&quot;&gt;\n   &lt;/bordered-btn-component&gt;\n  &lt;/div&gt;\n  &lt;div body&gt;\n     &lt;p&gt;Put your content inside&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/custom-select-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create and show custom select with own button content and menu content\n\n```\n<custom-select-component>\n  <div header>\n    <bordered-btn-component\n     [hoverStyle]=\"shiningStyle\"\n     [faIcon]=\"faElipsis\">\n   </bordered-btn-component>\n  </div>\n  <div body>\n     <p>Put your content inside</p>\n  </div>\n</custom-select-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { ClickOutsideDirective } from '../../directives/click-outside.directive';\n\n/**\n * Component to create and show custom select with own button content and menu content\n *\n * @howToUse\n * ```\n * <custom-select-component>\n *   <div header>\n *     <bordered-btn-component\n *      [hoverStyle]=\"shiningStyle\"\n *      [faIcon]=\"faElipsis\">\n *    </bordered-btn-component>\n *   </div>\n *   <div body>\n *      <p>Put your content inside</p>\n *   </div>\n * </custom-select-component>\n * ```\n */\n@Component({\n  selector: 'custom-select-component',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FontAwesomeModule,\n    FormsModule,\n    ClickOutsideDirective,\n  ],\n  templateUrl: './custom-select.component.html',\n  styleUrls: ['./custom-select.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomSelectComponent implements OnInit {\n  @Input() show? = false;\n\n  @Output() showChange = new EventEmitter<boolean>();\n\n  @ViewChild('btn') btn?: ElementRef<HTMLDivElement>;\n  @ViewChild('menu') menu?: ElementRef<HTMLDivElement>;\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.changeDetector.detectChanges();\n  }\n\n  toggleFilter(): void {\n    this.show = !this.show;\n    this.showChange.emit(this.show);\n  }\n\n  getBtnHeight(): number {\n    const boundingBtn = this.btn?.nativeElement.getBoundingClientRect();\n    if (boundingBtn) {\n      return boundingBtn.height;\n    } else {\n      return 0;\n    }\n  }\n\n  aligmentLeft(): boolean {\n    const boundingMenu = this.menu?.nativeElement.getBoundingClientRect();\n    const boundingBtn = this.btn?.nativeElement.getBoundingClientRect();\n\n    if (boundingBtn && boundingMenu) {\n      const right = document.body.scrollWidth - boundingBtn.right;\n      //as long as there is enough space on the right, align it to the left\n      return right > boundingMenu.width;\n    } else {\n      return false;\n    }\n  }\n\n  handleClickOutside(): void {\n    if (this.show) {\n      this.show = !this.show;\n      this.showChange.emit(this.show);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n  position: relative;\n}\n\nbutton {\n  background: transparent;\n  border: none;\n  padding: 0px;\n}\n\n.menu {\n  position: absolute;\n  top: calc(var(--btn-height) + 5px);\n  min-width: 150px;\n  width: max-content;\n  height: auto;\n  background: var(--menu-background);\n  z-index: var(--z-index-5);\n  box-sizing: border-box;\n  transform: scaleY(0);\n  transform-origin: top;\n  transition: transform 0.2s ease-in-out;\n\n  &.left {\n    left: 5px;\n  }\n\n  &.right {\n    right: 5px;\n  }\n\n  &.show {\n    transform: scaleY(1);\n  }\n}\n",
                    "styleUrl": "./custom-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": ["OnInit"],
            "templateData": "<div class=\"dropdown\" (clickOutside)=\"handleClickOutside()\">\n  <button #btn (click)=\"toggleFilter()\">\n    <ng-content select=\"[header]\"></ng-content>\n  </button>\n\n  <div\n    #menu\n    class=\"menu shadow\"\n    [class.show]=\"show\"\n    [style.top.px]=\"getBtnHeight()\"\n    [ngClass]=\"aligmentLeft() ? 'left' : 'right'\">\n    <ng-content select=\"[body]\"></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "DatePickerComponent",
            "id": "component-DatePickerComponent-c3e452309c9f35dd43053967ce9fe5558151dbd0c299540f6e84af17dbff71afcf01fa7581bd559033b7f73ef907fb95c3add89a960c7bc3ed12802b82cf305c",
            "file": "projects/angular-component-library/src/lib/components/date-picker/date-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "date-picker-component",
            "styleUrls": ["./date-picker.component.scss"],
            "styles": [],
            "templateUrl": ["./date-picker.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "clear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "Date | string",
                    "decorators": []
                },
                {
                    "name": "withInput",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "dateChanged",
                    "defaultValue": "new EventEmitter<Date>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dateBefore",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "faCalender",
                    "defaultValue": "Icons.faCalendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "platform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Platform",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [125]
                },
                {
                    "name": "randomId",
                    "defaultValue": "Math.floor(Math.random() * 16777215).toString(16)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "showOverlayBtn",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "changeDate",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChanges selected date\n",
                    "description": "<p>Changes selected date</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showDatePicker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow menu to input type date\n",
                    "description": "<p>Show menu to input type date</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "PlatformModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to select date</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;date-picker-component\n  [date]=&quot;selectedDate&quot;\n  [withInput]=&quot;true&quot;\n  (dateChanged)=&quot;dateChanged($event)&quot;&gt;\n&lt;/date-picker-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to select date\n\n```\n<date-picker-component\n  [date]=\"selectedDate\"\n  [withInput]=\"true\"\n  (dateChanged)=\"dateChanged($event)\">\n</date-picker-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule, formatDate } from '@angular/common';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/free-solid-svg-icons';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { cloneDeep } from 'lodash';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Icons } from '../../model/icons';\n\n/**\n * Component to select date\n *\n * @howToUse\n * ```\n * <date-picker-component\n *   [date]=\"selectedDate\"\n *   [withInput]=\"true\"\n *   (dateChanged)=\"dateChanged($event)\">\n * </date-picker-component>\n * ```\n */\n@Component({\n  selector: 'date-picker-component',\n  standalone: true,\n  imports: [CommonModule, FormsModule, FontAwesomeModule, PlatformModule],\n  templateUrl: './date-picker.component.html',\n  styleUrls: ['./date-picker.component.scss'],\n})\nexport class DatePickerComponent implements OnInit {\n  @Input() date?: Date | string; // date is string after change in date picker\n  @Input() withInput?: boolean = true;\n  @Input() clear?: boolean = true;\n\n  @Output() dateChanged = new EventEmitter<Date>();\n\n  faCalender: IconDefinition = Icons.faCalendar;\n  showOverlayBtn = true;\n  randomId: string = Math.floor(Math.random() * 16777215).toString(16);\n\n  dateBefore: Date | string = '';\n\n  constructor(\n    public platform: Platform,\n    private translateService: TranslateService,\n  ) {}\n\n  ngOnInit() {\n    //hide overlay button on ios, safari or webkit because it does not work\n    if (this.platform.IOS || this.platform.SAFARI || this.platform.WEBKIT) {\n      this.showOverlayBtn = false;\n    }\n\n    if (this.date) {\n      this.dateBefore = cloneDeep(this.date);\n    }\n  }\n\n  /**\n   * Changes selected date\n   */\n  changeDate(event: Event): void {\n    if (this.date) {\n      if (typeof this.date === 'string') {\n        this.date = new Date(this.date);\n      }\n\n      this.dateBefore = cloneDeep(this.date);\n\n      this.dateChanged.emit(this.date);\n    } else {\n      // date is cleared by clear button\n      // note: clear button is not shown in every browser -> handle state\n      // if date is invalid date and clearing is false/ not supported -> reset invalid date with date before\n      if (!this.clear) {\n        this.date = new Date(this.dateBefore);\n\n        this.dateBefore = cloneDeep(this.date);\n\n        const inputDateElement: HTMLInputElement | null =\n          document.querySelector('#date-input-' + this.randomId);\n\n        const localeId =\n          this.translateService.currentLang +\n          '-' +\n          this.translateService.currentLang.toUpperCase();\n\n        if (inputDateElement) {\n          inputDateElement.value = formatDate(\n            this.date,\n            'yyyy-MM-dd',\n            localeId,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Show menu to input type date\n   */\n  showDatePicker() {\n    const inputDateElement: HTMLInputElement | null = document.querySelector(\n      '#date-input-' + this.randomId,\n    );\n    if (inputDateElement) {\n      inputDateElement.showPicker();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n\n.datepicker {\n  position: relative;\n  display: inline-block;\n\n  input[type='date'] {\n    height: var(--btn-height);\n    line-height: var(--btn-height);\n    min-width: auto;\n    font-size: var(--font-size);\n    outline: none;\n    font-family: var(--font-family);\n    border: var(--border-width) solid var(--btn-border-color);\n    cursor: pointer;\n    color: var(--btn-color);\n    background: transparent;\n    box-sizing: border-box;\n    border-radius: var(--input-radius);\n    padding: 2px 16px 2px 5px;\n    -webkit-padding-end: 5px;\n  }\n\n  .btn-overlay {\n    height: var(--btn-height);\n    line-height: var(--btn-height);\n    position: absolute;\n    top: 0;\n    right: 0px;\n    background: var(--fa-icon-color);\n    border: 1px solid var(--btn-border-color);\n    border-left: none;\n    padding: 2px 10px;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    box-sizing: border-box;\n    border-top-right-radius: var(--input-radius);\n    border-bottom-right-radius: var(--input-radius);\n\n    fa-icon {\n      color: var(--btn-color);\n      font-size: 1.2em;\n      display: contents;\n    }\n  }\n\n  &:hover {\n    input[type='date'] {\n      border-color: var(--accent-color-light);\n    }\n\n    .btn-overlay {\n      border-color: var(--accent-color-light);\n      background-color: var(--accent-color-light);\n\n      fa-icon {\n        color: var(--accent-color);\n      }\n    }\n  }\n\n  input:focus,\n  input:focus + .btn-overlay {\n    border-color: var(--accent-color-light);\n  }\n}\n\n.not-emphrazed {\n  input[type='date'] {\n    border: var(--border-width) solid var(--not-emphrazed-color);\n    color: var(--not-emphrazed-color);\n    background: transparent;\n  }\n  .btn-overlay {\n    background: var(--not-emphrazed-color);\n    border: 1px solid var(--not-emphrazed-color);\n\n    &:hover {\n      background-image: var(--darken-gradient);\n    }\n  }\n\n  input:focus,\n  input:focus + .btn-overlay {\n    border-color: var(--not-emphrazed-color);\n  }\n}\n",
                    "styleUrl": "./date-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": ["OnInit"],
            "templateData": "<div class=\"datepicker\">\n  <input\n    id=\"date-input-{{ randomId }}\"\n    [style.display]=\"withInput ? 'block' : 'none'\"\n    [attr.aria-labelledby]=\"'date-input'\"\n    type=\"date\"\n    [ngModel]=\"date | date: 'yyyy-MM-dd'\"\n    (ngModelChange)=\"changeDate((date = $event))\" />\n  @if (showOverlayBtn) {\n    <div\n      class=\"btn-overlay\"\n      [style.position]=\"withInput ? 'absolute' : 'relative'\"\n      (click)=\"showDatePicker()\">\n      <fa-icon [icon]=\"faCalender\"></fa-icon>\n    </div>\n  }\n</div>\n"
        },
        {
            "name": "DateRangePickerComponent",
            "id": "component-DateRangePickerComponent-d86fc79a8420971f7015632a8d49ef1d27053136b298535ecfb70aa6348989663021e0967e83a9c86239e033ff3cead08ea6b35eb5d253613b76a0bcd44db231",
            "file": "projects/angular-component-library/src/lib/components/date-range-picker/date-range-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "date-range-picker-component",
            "styleUrls": ["./date-range-picker.component.scss"],
            "styles": [],
            "templateUrl": ["./date-range-picker.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "endDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "startDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "Date",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "endDateChange",
                    "defaultValue": "new EventEmitter<Date>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter"
                },
                {
                    "name": "startDateChange",
                    "defaultValue": "new EventEmitter<Date>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faCalender",
                    "defaultValue": "faCalendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "platform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Platform",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [125]
                },
                {
                    "name": "randomId",
                    "defaultValue": "Math.floor(Math.random() * 16777215).toString(16)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "showOverlayBtn",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "endChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChanges selected date\n",
                    "description": "<p>Changes selected date</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showDatePicker",
                    "args": [
                        {
                            "name": "prevString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow menu to input type date\n",
                    "description": "<p>Show menu to input type date</p>\n",
                    "jsdoctags": [
                        {
                            "name": "prevString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChanges selected date\n",
                    "description": "<p>Changes selected date</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "PlatformModule",
                    "type": "module"
                },
                {
                    "name": "DatePickerComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Component select date</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;date-range-picker-component\n  (startDateChanged)=&quot;startDateChanged($event)&quot;\n  (endDateChanged)=&quot;endDateChanged($event)&quot;&gt;\n&lt;/date-range-picker-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent select date\n\n```\n<date-range-picker-component\n  (startDateChanged)=\"startDateChanged($event)\"\n  (endDateChanged)=\"endDateChanged($event)\">\n</date-range-picker-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition, faCalendar } from '@fortawesome/free-solid-svg-icons';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { parseISO } from 'date-fns';\nimport { DatePickerComponent } from '../date-picker/date-picker.component';\n\n/**\n * Component select date\n *\n * @howToUse\n * ```\n * <date-range-picker-component\n *   (startDateChanged)=\"startDateChanged($event)\"\n *   (endDateChanged)=\"endDateChanged($event)\">\n * </date-range-picker-component>\n * ```\n */\n@Component({\n  selector: 'date-range-picker-component',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    FontAwesomeModule,\n    PlatformModule,\n    DatePickerComponent,\n  ],\n  templateUrl: './date-range-picker.component.html',\n  styleUrls: ['./date-range-picker.component.scss'],\n})\nexport class DateRangePickerComponent implements OnInit {\n  @Input() startDate: Date = new Date();\n  @Input() endDate: Date = new Date();\n\n  @Output() startDateChange = new EventEmitter<Date>();\n  @Output() endDateChange = new EventEmitter<Date>();\n\n  faCalender: IconDefinition = faCalendar;\n  showOverlayBtn = true;\n  randomId: string = Math.floor(Math.random() * 16777215).toString(16);\n\n  constructor(public platform: Platform) {}\n\n  ngOnInit() {\n    //hide overlay button on ios, safari or webkit because it does not work\n    if (this.platform.IOS || this.platform.SAFARI || this.platform.WEBKIT) {\n      this.showOverlayBtn = false;\n    }\n  }\n\n  /**\n   * Changes selected date\n   */\n  startChanged(event: Event): void {\n    if (typeof this.startDate === 'string') {\n      this.startDate = parseISO(this.startDate);\n    }\n    this.startDateChange.emit(this.startDate);\n  }\n\n  /**\n   * Changes selected date\n   */\n  endChanged(event: Event): void {\n    if (typeof this.endDate === 'string') {\n      this.endDate = parseISO(this.endDate);\n    }\n    this.endDateChange.emit(this.endDate);\n  }\n\n  /**\n   * Show menu to input type date\n   */\n  showDatePicker(prevString: string) {\n    const inputDateElement: HTMLInputElement | null = document.querySelector(\n      '#' + prevString + '-date-input-' + this.randomId,\n    );\n    if (inputDateElement) {\n      inputDateElement.showPicker();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-flex;\n  column-gap: 0.5em;\n  align-items: center;\n}\n\np {\n  margin: 0;\n}\n",
                    "styleUrl": "./date-range-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": ["OnInit"],
            "templateData": "<date-picker-component\n  [date]=\"startDate\"\n  (startDateChange)=\"startChanged($event)\">\n</date-picker-component>\n\n<p>-</p>\n\n<date-picker-component\n  [date]=\"startDate\"\n  (startDateChange)=\"endChanged($event)\">\n</date-picker-component>\n"
        },
        {
            "name": "DateTimePickerComponent",
            "id": "component-DateTimePickerComponent-03986a370da9c6cb4b70487b6872723491559410755d0cb991b1dd6752ae6ecc4c51498d9fa61027bb3e589827f22c7f04b2c45b5349f1a1fad4ebd3491e220d",
            "file": "projects/angular-component-library/src/lib/components/date-time-picker/date-time-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "date-time-picker-component",
            "styleUrls": ["./date-time-picker.component.scss"],
            "styles": [],
            "templateUrl": ["./date-time-picker.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "date",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "minWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "EditMode.WRITE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "EditMode",
                    "decorators": []
                },
                {
                    "name": "withInput",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "dateChange",
                    "defaultValue": "new EventEmitter<string | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter"
                },
                {
                    "name": "pickerClosed",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dateTimePickerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dateTimePicker'"
                        }
                    ],
                    "modifierKind": [170]
                },
                {
                    "name": "faCalender",
                    "defaultValue": "Icons.faCalendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "modes",
                    "defaultValue": "EditMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "platform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Platform",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [125]
                },
                {
                    "name": "randomId",
                    "defaultValue": "Math.floor(Math.random() * 16777215).toString(16)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "showOverlayBtn",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocusout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUse focusout instead of change, because change is triggered on every character changed\nthe element loses its focus on an emit events an stops so the input\nfocusout is only called if the focus is out and the change has been completed\n",
                    "description": "<p>Use focusout instead of change, because change is triggered on every character changed\nthe element loses its focus on an emit events an stops so the input\nfocusout is only called if the focus is out and the change has been completed</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focusout'"
                        }
                    ],
                    "modifierKind": [170]
                },
                {
                    "name": "showDatePicker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow menu to input type date\n",
                    "description": "<p>Show menu to input type date</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "focusout",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUse focusout instead of change, because change is triggered on every character changed\nthe element loses its focus on an emit events an stops so the input\nfocusout is only called if the focus is out and the change has been completed\n",
                    "description": "<p>Use focusout instead of change, because change is triggered on every character changed\nthe element loses its focus on an emit events an stops so the input\nfocusout is only called if the focus is out and the change has been completed</p>\n",
                    "line": 90
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "PlatformModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to select date time</p>\n<p>Note: The format is &quot;yyyy-MM-ddThh:mm&quot; followed by optional &quot;:ss&quot; or &quot;:ss.SSS&quot;.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;date-time-picker-component\n  [date]=&quot;selectedDate&quot;\n  [withInput]=&quot;true&quot;\n  (dateChanged)=&quot;dateChanged($event)&quot;&gt;\n&lt;/date-time-picker-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to select date time\n\nNote: The format is \"yyyy-MM-ddThh:mm\" followed by optional \":ss\" or \":ss.SSS\".\n\n```\n<date-time-picker-component\n  [date]=\"selectedDate\"\n  [withInput]=\"true\"\n  (dateChanged)=\"dateChanged($event)\">\n</date-time-picker-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/free-solid-svg-icons';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { EditMode } from '../../model/edit-mode.enum';\nimport { Icons } from '../../model/icons';\n\n/**\n * Component to select date time\n *\n * Note: The format is \"yyyy-MM-ddThh:mm\" followed by optional \":ss\" or \":ss.SSS\".\n *\n * @howToUse\n * ```\n * <date-time-picker-component\n *   [date]=\"selectedDate\"\n *   [withInput]=\"true\"\n *   (dateChanged)=\"dateChanged($event)\">\n * </date-time-picker-component>\n * ```\n */\n@Component({\n  selector: 'date-time-picker-component',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    FontAwesomeModule,\n    PlatformModule,\n    TranslateModule,\n  ],\n  templateUrl: './date-time-picker.component.html',\n  styleUrls: ['./date-time-picker.component.scss'],\n})\nexport class DateTimePickerComponent implements OnInit {\n  @Input() date: string | null = '';\n  @Input() withInput?: boolean = true; // shows only calender btn\n  @Input() mode: EditMode = EditMode.WRITE;\n  @Input() height?: number;\n  @Input() minWidth?: number;\n\n  @Output() dateChange = new EventEmitter<string | null>();\n  @Output() pickerClosed = new EventEmitter<boolean>();\n\n  @ViewChild('dateTimePicker') dateTimePickerRef?: ElementRef;\n\n  faCalender: IconDefinition = Icons.faCalendar;\n  showOverlayBtn = true;\n  randomId: string = Math.floor(Math.random() * 16777215).toString(16);\n\n  modes: typeof EditMode = EditMode;\n\n  constructor(public platform: Platform) {}\n\n  ngOnInit() {\n    //hide overlay button on ios, safari or webkit because it does not work\n    if (this.platform.IOS || this.platform.SAFARI || this.platform.WEBKIT) {\n      this.showOverlayBtn = false;\n    }\n  }\n\n  /**\n   * Show menu to input type date\n   */\n  showDatePicker() {\n    if (this.dateTimePickerRef) {\n      this.dateTimePickerRef.nativeElement.showPicker();\n      this.dateTimePickerRef.nativeElement.focus();\n    }\n  }\n\n  /**\n   * Use focusout instead of change, because change is triggered on every character changed\n   * the element loses its focus on an emit events an stops so the input\n   * focusout is only called if the focus is out and the change has been completed\n   */\n  @HostListener('focusout')\n  onFocusout() {\n    this.dateChange.emit(this.date);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::-webkit-calendar-picker-indicator {\n  background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"15\" viewBox=\"0 0 24 24\"><path fill=\"var(--accent-color)\" d=\"M20 3h-1V1h-2v2H7V1H5v2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 18H4V8h16v13z\"/></svg>');\n}\n\n:host {\n  display: inline-block;\n}\n\n.datepicker {\n  position: relative;\n  display: inline-block;\n\n  input[type='datetime-local'] {\n    height: var(--btn-height);\n    line-height: var(--btn-height);\n    min-width: auto;\n    font-size: var(--font-size);\n    outline: none;\n    font-family: var(--font-family);\n    border: var(--border-width) solid var(--btn-border-color);\n    cursor: pointer;\n    color: var(--btn-color);\n    background: transparent;\n    box-sizing: border-box;\n    border-radius: var(--input-radius);\n    padding: 2px 16px 2px 5px;\n    -webkit-padding-end: 5px;\n\n    &.readonly {\n      border: none;\n      padding: 0;\n      text-align: right;\n      cursor: default;\n    }\n  }\n\n  .btn-overlay {\n    height: var(--btn-height);\n    line-height: var(--btn-height);\n    position: absolute;\n    top: 0;\n    right: 0px;\n    background: var(--fa-icon-color);\n    border: 1px solid var(--btn-border-color);\n    border-left: none;\n    padding: 2px 10px;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    box-sizing: border-box;\n    border-top-right-radius: var(--input-radius);\n    border-bottom-right-radius: var(--input-radius);\n\n    fa-icon {\n      color: var(--btn-color);\n      font-size: 1.2em;\n      display: contents;\n    }\n\n    &.readonly {\n      display: none;\n    }\n  }\n\n  &:hover {\n    input[type='datetime-local'] {\n      border-color: var(--accent-color-light);\n    }\n\n    .btn-overlay {\n      border-color: var(--accent-color-light);\n      background-color: var(--accent-color-light);\n\n      fa-icon {\n        color: var(--accent-color);\n      }\n    }\n  }\n\n  input:focus,\n  input:focus + .btn-overlay {\n    border-color: var(--accent-color-light);\n  }\n}\n\n.not-emphrazed {\n  input[type='date'] {\n    border: var(--border-width) solid var(--not-emphrazed-color);\n    color: var(--not-emphrazed-color);\n    background: transparent;\n  }\n  .btn-overlay {\n    background: var(--not-emphrazed-color);\n    border: 1px solid var(--not-emphrazed-color);\n\n    &:hover {\n      background-image: var(--darken-gradient);\n    }\n  }\n\n  input:focus,\n  input:focus + .btn-overlay {\n    border-color: var(--not-emphrazed-color);\n  }\n}\n",
                    "styleUrl": "./date-time-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": ["OnInit"],
            "templateData": "@if (mode === modes.WRITE) {\n  <div class=\"datepicker\">\n    <input\n      #dateTimePicker\n      [style.display]=\"withInput ? 'block' : 'none'\"\n      [style.height.px]=\"height ?? 40\"\n      [style.min-width.px]=\"minWidth ?? 'auto'\"\n      [attr.aria-labelledby]=\"'date-time-input'\"\n      id=\"date-time-input-{{ randomId }}\"\n      type=\"datetime-local\"\n      [(ngModel)]=\"date\" />\n    @if (showOverlayBtn) {\n      <div\n        class=\"btn-overlay\"\n        [style.position]=\"withInput ? 'absolute' : 'relative'\"\n        [style.height.px]=\"height ?? 40\"\n        (click)=\"showDatePicker()\">\n        <fa-icon [icon]=\"faCalender\"></fa-icon>\n      </div>\n    }\n  </div>\n}\n@if (mode === modes.READ) {\n  <div>\n    @if (date) {\n      <span\n        >{{ date | date: 'dd.MM.yyyy HH:mm:ss' }}\n        {{ 'scheduler.clock' | translate }}</span\n      >\n    }\n    @if (!date) {\n      <span> - </span>\n    }\n  </div>\n}\n"
        },
        {
            "name": "DropzoneComponent",
            "id": "component-DropzoneComponent-719cebd0f7b726b1879a9aae09c33d7a6d01ed62f543581592654816b42b977ea976d423ba3f532e3c422c07d2d8c63e879d7670dca89c0535f61ad9991c9ea4",
            "file": "projects/angular-component-library/src/lib/components/dropzone/dropzone.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dropzone-component",
            "styleUrls": ["./dropzone.component.scss"],
            "styles": [],
            "templateUrl": ["./dropzone.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "allowedExtension",
                    "defaultValue": "['json']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "dropHeight",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "fileArrayLength",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "files",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "File[]",
                    "decorators": []
                },
                {
                    "name": "maxSizeOfFiles",
                    "defaultValue": "5000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fileExistsError",
                    "defaultValue": "new EventEmitter<File>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter"
                },
                {
                    "name": "filesChanged",
                    "defaultValue": "new EventEmitter<File[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "EventEmitter"
                },
                {
                    "name": "fileTypeNotAllowedError",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter"
                },
                {
                    "name": "maxListSizeReachedError",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faFile",
                    "defaultValue": "Icons.faFile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "faRemove",
                    "defaultValue": "Icons.faTrash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "faUpload",
                    "defaultValue": "Icons.faUpload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "FILE_SIZE_CONVERTER",
                    "defaultValue": "1024",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "onLangChangeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "randomId",
                    "defaultValue": "Math.floor(Math.random() * 16777215).toString(16)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "addFile",
                    "args": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds file to array\n",
                    "description": "<p>Adds file to array</p>\n",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fileExists",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if file exists in List\n",
                    "description": "<p>Checks if file exists in List</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4191,
                                "end": 4195,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "file"
                            },
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4185,
                                "end": 4190,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 4202,
                                "end": 4209,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getFilesFromEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "File[]",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets a list of files from event\n",
                    "description": "<p>Gets a list of files from event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3562,
                                "end": 3567,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3556,
                                "end": 3561,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 3574,
                                "end": 3581,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getLocale",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProvides the current lang\n",
                    "description": "<p>Provides the current lang</p>\n"
                },
                {
                    "name": "isAllowedFileType",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks file type is allowed\n",
                    "description": "<p>Checks file type is allowed</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3859,
                                "end": 3863,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "file"
                            },
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3853,
                                "end": 3858,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 3870,
                                "end": 3877,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "maxListSizeReached",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if max size of list reached (with new files)\n",
                    "description": "<p>Checks if max size of list reached (with new files)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4485,
                                "end": 4489,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "file"
                            },
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4479,
                                "end": 4484,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 4496,
                                "end": 4503,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onFileChange",
                    "args": [
                        {
                            "name": "fileList",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTriggered if file changed in drop zone\n",
                    "description": "<p>Triggered if file changed in drop zone</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fileList",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputFileChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTriggered if file changed in drop zone\n",
                    "description": "<p>Triggered if file changed in drop zone</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2320,
                                "end": 2325,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2314,
                                "end": 2319,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "removeFile",
                    "args": [
                        {
                            "name": "f",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoved file from array\n",
                    "description": "<p>Removed file from array</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4958,
                                "end": 4959,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "f"
                            },
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4952,
                                "end": 4957,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "replaceFileWithLastItems",
                    "args": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReplaces file in array with last items\n",
                    "description": "<p>Replaces file in array with last items</p>\n",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "FileDragNDropDirective",
                    "type": "directive"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to upload files by drag and drop or simple upload button</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;dropzone-component\n  [files]=&quot;planningInputFiles&quot;\n  [fileArrayLength]=&quot;100&quot;\n  [fileArraySize]=&quot;100&quot;\n  (filesChanged)=&quot;filesChanged($event)&quot;&gt;\n&lt;/dropzone-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to upload files by drag and drop or simple upload button\n\n```\n<dropzone-component\n  [files]=\"planningInputFiles\"\n  [fileArrayLength]=\"100\"\n  [fileArraySize]=\"100\"\n  (filesChanged)=\"filesChanged($event)\">\n</dropzone-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { Subscription } from 'rxjs';\nimport { FileDragNDropDirective } from '../../directives/drag-drop-file.directive';\nimport { Icons } from '../../model/icons';\n\n/**\n * Component to upload files by drag and drop or simple upload button\n *\n * @howToUse\n * ```\n * <dropzone-component\n *   [files]=\"planningInputFiles\"\n *   [fileArrayLength]=\"100\"\n *   [fileArraySize]=\"100\"\n *   (filesChanged)=\"filesChanged($event)\">\n * </dropzone-component>\n * ```\n */\n@Component({\n  selector: 'dropzone-component',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FontAwesomeModule,\n    FileDragNDropDirective,\n    TranslateModule,\n  ],\n  templateUrl: './dropzone.component.html',\n  styleUrls: ['./dropzone.component.scss'],\n})\nexport class DropzoneComponent {\n  @Input() dropHeight = 100;\n  @Input() allowedExtension: string[] = ['json'];\n  @Input() fileArrayLength = 100;\n  @Input() files: File[] = [];\n  @Input() maxSizeOfFiles = 5000; // 10 MB\n\n  @Output() filesChanged = new EventEmitter<File[]>(); // When true, deliver events asynchronously.\n  @Output() fileExistsError = new EventEmitter<File>();\n  @Output() maxListSizeReachedError = new EventEmitter<number>();\n  @Output() fileTypeNotAllowedError = new EventEmitter<string>();\n\n  faUpload: IconDefinition = Icons.faUpload;\n  faFile: IconDefinition = Icons.faFile;\n  faRemove: IconDefinition = Icons.faTrash;\n  randomId: string = Math.floor(Math.random() * 16777215).toString(16);\n\n  onLangChangeSubscription?: Subscription;\n\n  FILE_SIZE_CONVERTER = 1024;\n\n  constructor(private translate: TranslateService) {}\n\n  /**\n   * Provides the current lang\n   */\n  getLocale() {\n    return this.translate.currentLang;\n  }\n\n  /**\n   * Triggered if file changed in drop zone\n   * @param files\n   */\n  onFileChange(fileList: File[]) {\n    if (fileList.length < this.fileArrayLength) {\n      this.addFile(fileList);\n    } else {\n      this.replaceFileWithLastItems(fileList);\n    }\n  }\n\n  /**\n   * Triggered if file changed in drop zone\n   * @param event\n   */\n  onInputFileChange(event: Event) {\n    if (\n      (event.target as HTMLInputElement).files &&\n      (event.target as HTMLInputElement).files!.length\n    ) {\n      const fileList: FileList | null = (event.target as HTMLInputElement)\n        .files;\n      const files = Array.from(fileList as FileList);\n\n      if (files && files.length < this.fileArrayLength) {\n        this.addFile(files);\n      } else {\n        this.replaceFileWithLastItems(files);\n      }\n    }\n  }\n\n  /**\n   * Adds file to array\n   * @param event\n   */\n  addFile(files: File[]): void {\n    files.forEach((file: File) => {\n      if (\n        !this.fileExists(file) &&\n        this.isAllowedFileType(file) &&\n        !this.maxListSizeReached(file)\n      ) {\n        this.files.push(file);\n        this.filesChanged.emit(this.files);\n      }\n    });\n  }\n\n  /**\n   * Replaces file in array with last items\n   * @param event\n   */\n  replaceFileWithLastItems(files: File[]): void {\n    files.forEach((file: File) => {\n      if (this.isAllowedFileType(file) && !this.maxListSizeReached(file)) {\n        this.files[this.files.length - 1] = file;\n        this.filesChanged.emit(this.files);\n      }\n    });\n  }\n\n  /**\n   * Gets a list of files from event\n   * @param event\n   * @returns\n   */\n  getFilesFromEvent(event: any): File[] {\n    let files = [];\n    if (event instanceof FileList) {\n      files = Array.from(event as FileList);\n    } else {\n      files = event.target.files;\n    }\n    return files;\n  }\n\n  /**\n   * Checks file type is allowed\n   * @param file\n   * @returns\n   */\n  isAllowedFileType(file: File): boolean {\n    const type = file.name.split('.').pop();\n    if (type && this.allowedExtension.includes(type)) {\n      return true;\n    } else {\n      this.fileTypeNotAllowedError.emit(type);\n      return false;\n    }\n  }\n\n  /**\n   * Checks if file exists in List\n   * @param file\n   * @returns\n   */\n  fileExists(file: File): boolean {\n    if (this.files.some((f) => f.name === file.name)) {\n      this.fileExistsError.emit(file);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Checks if max size of list reached (with new files)\n   * @param file\n   * @returns\n   */\n  maxListSizeReached(file: File): boolean {\n    let kbSize = 0;\n    // get size of all olf files\n    this.files.forEach((f) => (kbSize = kbSize + f.size));\n\n    // add size of new file\n    kbSize = (kbSize + file.size) / this.FILE_SIZE_CONVERTER;\n\n    if (kbSize <= this.maxSizeOfFiles) {\n      return false;\n    } else {\n      this.maxListSizeReachedError.emit(kbSize);\n      return true;\n    }\n  }\n\n  /**\n   * Removed file from array\n   * @param f\n   */\n  removeFile(f: File) {\n    this.files = this.files.filter(function (item) {\n      return (\n        item.name !== f.name &&\n        item.lastModified !== f.lastModified &&\n        item.size !== f.size\n      );\n    });\n    this.filesChanged.emit(this.files);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n\n.dropzone {\n  height: 75px;\n  display: table;\n  width: 100%;\n}\n\n.text-wrapper {\n  display: table-cell;\n  vertical-align: middle;\n}\n\n.centered {\n  font-family: sans-serif;\n  font-size: 1.1em;\n  text-align: center;\n\n  p {\n    padding-bottom: 0px;\n    margin-bottom: 0px;\n  }\n}\n\ninput[type='file'] {\n  display: none;\n}\n\n.upload-btn {\n  display: inline-block;\n  padding: var(--btn-padding);\n  height: var(--btn-height);\n  line-height: var(--btn-height);\n  background-color: var(--accent-color);\n  color: var(--fa-icon-color);\n  border-radius: var(--border-radius);\n  cursor: pointer;\n  font-size: 0.9em;\n}\n\n.file-item {\n  border: 1px solid var(--border-color);\n  margin: 5px 0px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n\n  .left,\n  .right {\n    display: flex;\n    flex-direction: row;\n  }\n\n  p {\n    padding: 10px;\n    margin: 0px;\n  }\n\n  span {\n    padding: 10px;\n  }\n\n  .left {\n    fa-icon {\n      color: var(--text-color);\n    }\n    span {\n      background: #efefef;\n    }\n  }\n\n  .right {\n    cursor: pointer;\n\n    span {\n      padding: var(--btn-padding);\n    }\n\n    fa-icon {\n      color: var(--text-color);\n\n      &:hover:not([disabled]) {\n        color: var(--delete-color);\n      }\n    }\n  }\n}\n\n/************************************\n Ripple\n**************************************/\n\n.ripple {\n  background-position: center;\n  transition: background 0.8s;\n\n  &:hover:not([disabled]) {\n    background-image: var(--darken-gradient);\n  }\n\n  &:active:not([disabled]) {\n    background-color: var(--accent-color-dark);\n  }\n}\n",
                    "styleUrl": "./dropzone.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div\n  class=\"dropzone\"\n  [style.height.px]=\"dropHeight\"\n  dragDropFile\n  (filesChangeEmitter)=\"onFileChange($event)\">\n  <div class=\"text-wrapper\">\n    <div class=\"centered\">\n      <input\n        id=\"file-{{ randomId }}\"\n        type=\"file\"\n        name=\"file-{{ randomId }}\"\n        (change)=\"onInputFileChange($event)\"\n        multiple />\n      <label for=\"file-{{ randomId }}\">\n        <span class=\"upload-btn ripple\">\n          <fa-icon [icon]=\"faUpload\"></fa-icon>\n          {{ 'upload.dropElement.choseFile' | translate }}</span\n        >\n        {{ 'upload.dropElement.dropIt' | translate }}\n      </label>\n      <p>\n        ( Format: {{ allowedExtension }} , max {{ maxSizeOfFiles / 1000 }} MB)\n      </p>\n    </div>\n  </div>\n</div>\n@for (file of files; track file; let ind = $index) {\n  <div class=\"row file-item\">\n    <div class=\"left\">\n      <span>\n        <fa-icon [icon]=\"faFile\"></fa-icon>\n      </span>\n      <p>\n        {{ file.name }} [{{\n          file.size / FILE_SIZE_CONVERTER | number: '1.2-2' : getLocale()\n        }}\n        KB]\n      </p>\n    </div>\n    <div class=\"right\">\n      <span (click)=\"removeFile(file)\">\n        <fa-icon [icon]=\"faRemove\"></fa-icon>\n      </span>\n    </div>\n  </div>\n}\n"
        },
        {
            "name": "DurationInputComponent",
            "id": "component-DurationInputComponent-4e4a19c36e84aa277739b8dbdeb97cc96270b26bed3b865d8fbfcaf51b091b854d112d0b52931bd9307b02e48a90d083f793ccd33c42ee67f861f1e8d382b763",
            "file": "projects/angular-component-library/src/lib/components/duration-input/duration-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "duration-input-component",
            "styleUrls": ["./duration-input.component.scss"],
            "styles": [],
            "templateUrl": ["./duration-input.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "maxDuration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "EditMode.WRITE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EditMode",
                    "decorators": []
                },
                {
                    "name": "seconds",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string | number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "secondsChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "days",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "durationInputForm",
                    "defaultValue": "new FormGroup({\n    days: new FormControl('', [\n      Validators.required,\n      Validators.min(0),\n      Validators.max(365),\n    ]),\n    hours: new FormControl('', [\n      Validators.required,\n      Validators.min(0),\n      Validators.max(24),\n    ]),\n    minutes: new FormControl('', [\n      Validators.required,\n      Validators.min(0),\n      Validators.max(60),\n    ]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "hours",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "minutes",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "modes",
                    "defaultValue": "EditMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "numSeconds",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "randomId",
                    "defaultValue": "Math.floor(Math.random() * 16777215).toString(16)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "durationChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDuration changed\n",
                    "description": "<p>Duration changed</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to select duration</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;duration-input-component [seconds]=&quot;3000&quot;&gt;\n&lt;/duration-input-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to select duration\n\n```\n<duration-input-component [seconds]=\"3000\">\n</duration-input-component>\n```\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { EditMode } from '../../model/edit-mode.enum';\n\n/**\n * Component to select duration\n *\n * @howToUse\n * ```\n * <duration-input-component [seconds]=\"3000\">\n * </duration-input-component>\n * ```\n */\n@Component({\n  selector: 'duration-input-component',\n  standalone: true,\n  imports: [TranslateModule, FormsModule, ReactiveFormsModule],\n  templateUrl: './duration-input.component.html',\n  styleUrls: ['./duration-input.component.scss'],\n})\nexport class DurationInputComponent implements OnChanges {\n  @Input() seconds: string | number = 0;\n  @Input() mode: EditMode = EditMode.WRITE;\n  @Input() maxDuration?: number;\n  @Input() height?: number;\n\n  @Output() secondsChange = new EventEmitter<number>();\n\n  minutes = 0;\n  hours = 0;\n  days = 0;\n\n  durationInputForm = new FormGroup({\n    days: new FormControl('', [\n      Validators.required,\n      Validators.min(0),\n      Validators.max(365),\n    ]),\n    hours: new FormControl('', [\n      Validators.required,\n      Validators.min(0),\n      Validators.max(24),\n    ]),\n    minutes: new FormControl('', [\n      Validators.required,\n      Validators.min(0),\n      Validators.max(60),\n    ]),\n  });\n\n  modes: typeof EditMode = EditMode;\n\n  randomId: string = Math.floor(Math.random() * 16777215).toString(16);\n\n  numSeconds = 0;\n\n  ngOnChanges(): void {\n    if (this.seconds) {\n      this.numSeconds = this.seconds as number;\n      this.days = Math.floor((this.seconds as number) / 60 / 60 / 24);\n      this.hours = Math.floor((this.seconds as number) / 3600) - this.days * 24;\n      this.minutes = Math.floor(((this.seconds as number) % 3600) / 60);\n    }\n  }\n\n  /**\n   * Duration changed\n   */\n  durationChanged(): void {\n    const dayToSeconds = Math.floor(this.days * 60 * 60 * 24);\n    const hourToSeconds = Math.floor(this.hours * 3600);\n    const minutesToSeconds = Math.floor(this.minutes * 60);\n\n    this.seconds = dayToSeconds + hourToSeconds + minutesToSeconds;\n\n    if (this.maxDuration && this.seconds > this.maxDuration) {\n      this.seconds = this.maxDuration;\n    }\n\n    this.numSeconds = this.seconds;\n\n    this.secondsChange.emit(this.seconds);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n}\n\n.flex-row {\n  align-items: center;\n}\n\ninput {\n  height: var(--input-height);\n  min-width: auto;\n  width: 4em !important;\n  margin-right: 5px;\n  border: var(--border-width) solid var(--btn-border-color);\n  border-radius: var(--input-radius);\n  box-sizing: border-box;\n  font-family: var(--font-family);\n  font-weight: var(--font-weight-normal);\n}\n\nspan {\n  font-weight: var(--font-weight-light);\n  margin-right: 10px;\n  font-size: 0.85em;\n}\n\np {\n  margin-right: 0.5em !important;\n}\n\n.readonly {\n  border: none;\n  width: 2.5em !important;\n  padding: 0;\n  text-align: right;\n  cursor: default;\n\n  -webkit-appearance: none;\n  -moz-appearance: textfield;\n  appearance: textfield;\n}\n\n/***************************************************************\nMedia query to hide hover effects for devices \nthat do not support them, like touch displays\n**************************************************************/\n@media (hover: hover) {\n  input {\n    &:hover {\n      border: 2px solid var(--accent-color);\n    }\n  }\n}\n",
                    "styleUrl": "./duration-input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": ["OnChanges"],
            "templateData": "<div class=\"flex-row\">\n  <div class=\"flex-row\">\n    @if (mode !== modes.READ) {\n      <input\n        id=\"duration-days-{{ randomId }}\"\n        class=\"form-control duration\"\n        [style.height.px]=\"height ?? 40\"\n        [attr.aria-labelledby]=\"'duration-days'\"\n        type=\"number\"\n        min=\"0\"\n        [(ngModel)]=\"days\"\n        (change)=\"durationChanged()\" />\n    }\n    @if (mode === modes.READ) {\n      <p>{{ days }}</p>\n    }\n    <span>{{ 'time.days' | translate }}</span>\n  </div>\n  <div class=\"flex-row\">\n    @if (mode !== modes.READ) {\n      <input\n        id=\"duration-hours-{{ randomId }}\"\n        class=\"form-control duration\"\n        [style.height.px]=\"height ?? 40\"\n        [attr.aria-labelledby]=\"'duration-hours'\"\n        type=\"number\"\n        min=\"0\"\n        [(ngModel)]=\"hours\"\n        (change)=\"durationChanged()\" />\n    }\n    @if (mode === modes.READ) {\n      <p>{{ hours }}</p>\n    }\n    <span>{{ 'time.hoursShort' | translate }}</span>\n  </div>\n  <div class=\"flex-row\">\n    @if (mode !== modes.READ) {\n      <input\n        id=\"duration-minutes-{{ randomId }}\"\n        class=\"form-control duration\"\n        [style.height.px]=\"height ?? 40\"\n        [attr.aria-labelledby]=\"'duration-minutes'\"\n        type=\"number\"\n        min=\"0\"\n        [(ngModel)]=\"minutes\"\n        (change)=\"durationChanged()\" />\n    }\n    @if (mode === modes.READ) {\n      <p>{{ minutes }}</p>\n    }\n    <span>{{ 'time.minutesShort' | translate }}</span>\n  </div>\n</div>\n@if (numSeconds === maxDuration) {\n  <span class=\"error\">{{ 'validation.maxDuration' | translate }}</span>\n}\n"
        },
        {
            "name": "FilledBtnComponent",
            "id": "component-FilledBtnComponent-c77f72f2c5df51b66cc53f8a949d23f55b35185b3d599cfad03a10123b11fca5cbb3201412038ba30aca3f26093f120ef64e5bea4eda0da33f2baa1a97fb7676",
            "file": "projects/angular-component-library/src/lib/components/filled-btn/filled-btn.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "filled-btn-component",
            "styleUrls": ["./filled-btn.component.scss"],
            "styles": [],
            "templateUrl": ["./filled-btn.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "faIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "IconDefinition",
                    "decorators": []
                },
                {
                    "name": "hoverStyle",
                    "defaultValue": "HoverStyle.RIPPLE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "isActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSpinning",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showIcon",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create a filled button.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;filled-btn-component\n [ariaLabel]= &quot;&#39;scheduler.today&#39; | translate &quot;\n [label]=&quot;&#39;scheduler.today&#39; | translate &quot;\n [faIcon] = &quot;faCog&quot;&gt;\n&lt;/filled-btn-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create a filled button.\n\n```\n<filled-btn-component\n [ariaLabel]= \"'scheduler.today' | translate \"\n [label]=\"'scheduler.today' | translate \"\n [faIcon] = \"faCog\">\n</filled-btn-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { HoverStyle } from '../../model/hover-style.enum';\n\n/**\n * Component to create a filled button.\n *\n * @howToUse\n * ```\n * <filled-btn-component\n *  [ariaLabel]= \"'scheduler.today' | translate \"\n *  [label]=\"'scheduler.today' | translate \"\n *  [faIcon] = \"faCog\">\n * </filled-btn-component>\n * ```\n */\n@Component({\n  selector: 'filled-btn-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule],\n  templateUrl: './filled-btn.component.html',\n  styleUrls: ['./filled-btn.component.scss'],\n})\nexport class FilledBtnComponent {\n  @Input() ariaLabel: string = '';\n\n  @Input() label?: string;\n\n  @Input() faIcon?: IconDefinition;\n\n  @Input() showIcon = true;\n  // example --> spin or not\n  @Input() isSpinning = false;\n\n  @Input() isDisabled?: boolean;\n\n  // example --> active or not\n  @Input() isActive?: boolean;\n\n  // example --> gray, delete\n  @Input() styleClass?: string = '';\n  // example --> filling or shining\n  @Input() hoverStyle = HoverStyle.RIPPLE;\n  // example --> 100% or not\n  @Input() width?: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/********************\nCSS Variables -> --accent-color, --fa-icon-color for changing theme\n********************/\n\n:host {\n  display: inline-block;\n}\n\nbutton {\n  position: relative;\n  height: var(--btn-height);\n  line-height: var(--btn-height);\n  padding: var(--btn-padding);\n  border: var(--border-width);\n  border-radius: var(--border-radius);\n  font-weight: var(--font-weight-light);\n  font-size: var(--font-size);\n  transition: background 400ms;\n  background: var(--accent-color);\n  color: var(--fa-icon-color);\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-sizing: border-box;\n\n  fa-icon {\n    color: var(--fa-icon-color);\n  }\n\n  span {\n    color: var(--fa-icon-color);\n    margin: 0px 5px;\n  }\n}\n\n/************************************\n Ripple\n**************************************/\n\n.ripple {\n  background-position: center;\n  transition: background 0.8s;\n\n  &.active,\n  &:active:not([disabled]) {\n    background-color: var(--accent-color-dark);\n  }\n}\n\n/************************************\n Delete\n**************************************/\n.delete {\n  background: var(--delete-color);\n\n  &.active,\n  &:active:not([disabled]) {\n    background-color: var(--delete-color-dark);\n  }\n}\n\n/************************************\n Not emphrazed\n**************************************/\n.not-emphrazed {\n  background: var(--not-emphrazed-color);\n\n  &.active,\n  &:active:not([disabled]) {\n    background-color: var(--not-emphrazed-color-dark);\n  }\n}\n\n.navbar-btn {\n  border-radius: 5px;\n  height: calc(var(--btn-height) - 5px);\n  line-height: calc(var(--btn-height) - 5px);\n  padding: var(--btn-small-padding);\n}\n\n/************************************\nDisabled\n**************************************/\nbutton:disabled,\nbutton[disabled] {\n  opacity: 0.5;\n  background-size: 0% 100%;\n  cursor: not-allowed;\n}\n\n/***************************************************************\nMedia query to hide hover effects for devices \nthat do not support them, like touch displays\n**************************************************************/\n@media (hover: hover) {\n  .ripple {\n    &:hover:not([disabled]) {\n      background-image: var(--darken-gradient);\n    }\n  }\n\n  button:disabled,\n  button[disabled] {\n    &:hover::before,\n    &:hover::after {\n      width: 0%;\n      height: 0%;\n      border-color: transparent;\n    }\n  }\n}\n",
                    "styleUrl": "./filled-btn.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<button\n  [ngClass]=\"[hoverStyle, styleClass]\"\n  [style.width]=\"width\"\n  [attr.aria-label]=\"ariaLabel\"\n  [disabled]=\"isDisabled\"\n  [class.active]=\"isActive\">\n  @if (faIcon && showIcon) {\n    <fa-icon\n      [icon]=\"faIcon\"\n      [animation]=\"isSpinning ? 'spin' : undefined\"></fa-icon>\n  }\n\n  @if (label) {\n    <span>{{ label }}</span>\n  }\n</button>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-939beeea6d841a034d12e12e3d9546676e0e60b0df17bcd9847caee1c84d8612692cae2321a930af1996f0473a463a502d302a694dfd9576d742e9ab04227487",
            "file": "projects/angular-component-library/src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": ["./header.css"],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg\n          width=\"32\"\n          height=\"32\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\" />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\" />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\" />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg\n          width=\"32\"\n          height=\"32\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\" />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\" />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\" />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-9f6c9c851c88ed758ba84dedf5af3636ab014b02a7bdb7b6e7fcc77b4cf19c50484bb589d41e5f42b97a665153cf0eb9aac65c452f69eeb39c3a1ab2f2fde90f",
            "file": "projects/angular-component-library/src/lib/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "input-component",
            "styleUrls": ["./input.component.scss"],
            "styles": [],
            "templateUrl": ["./input.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "classStyles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "IconDefinition",
                    "decorators": []
                },
                {
                    "name": "input",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholderText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "inputChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "randomId",
                    "defaultValue": "Math.floor(Math.random() * 16777215).toString(16)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "inputChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput string has changed\n",
                    "description": "<p>Input string has changed</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to add input</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;search-input-component\n [(input)]=&quot;input&quot;&gt;\n&lt;/search-input-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to add input\n\n```\n<search-input-component\n [(input)]=\"input\">\n</search-input-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/free-solid-svg-icons';\n\n/**\n * Component to add input\n *\n * @howToUse\n * ```\n * <search-input-component\n *  [(input)]=\"input\">\n * </search-input-component>\n * ```\n */\n@Component({\n  selector: 'input-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule, FormsModule],\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n})\nexport class InputComponent {\n  @Input() input = '';\n  @Input() classStyles?: string;\n  @Input() placeholderText? = '';\n  @Input() type = 'text';\n  @Input() icon?: IconDefinition;\n\n  @Output() inputChange = new EventEmitter<string>();\n\n  randomId: string = Math.floor(Math.random() * 16777215).toString(16);\n\n  /**\n   * Input string has changed\n   */\n  inputChanged(): void {\n    this.inputChange.emit(this.input);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  position: relative;\n}\n\n.input-container {\n  position: relative;\n\n  input {\n    height: var(--input-height);\n    min-width: 160px;\n    outline: none;\n    font-size: var(--font-size);\n    font-family: var(--font-family);\n    font-weight: var(--font-weight-normal);\n    color: var(--text-color);\n    background: white;\n    border: 1px solid var(--btn-border-color);\n    border-radius: var(--input-radius);\n    padding-right: 35px;\n    padding-left: 20px;\n    box-sizing: border-box;\n  }\n\n  .icon {\n    width: 20px;\n\n    fa-icon {\n      color: #999;\n    }\n  }\n\n  .right {\n    position: absolute;\n    right: 10px;\n    top: calc((var(--input-height) - 20px) / 2);\n  }\n}\n\n.no-radius {\n  input {\n    border-radius: 0;\n  }\n}\n\n.full-width {\n  width: 100%;\n\n  input {\n    width: 100%;\n  }\n}\n\n/************************************************\nMedia query to add hover only on device which support hover\n*********************************************/\n\n@media (hover: hover) {\n  .input-container {\n    &:hover {\n      input {\n        border: 2px solid var(--accent-color);\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"input-container\" [ngClass]=\"[classStyles ?? '']\">\n  <input\n    id=\"input-field-{{ randomId }}\"\n    class=\"form-control\"\n    type=\"{{ type }}\"\n    [attr.aria-label]=\"'search-field-{{randomId}}'\"\n    [(ngModel)]=\"input\"\n    (click)=\"$event.stopPropagation()\"\n    (ngModelChange)=\"inputChanged()\"\n    placeholder=\"{{ placeholderText }}\" />\n  @if (icon) {\n    <span class=\"icon right\">\n      <fa-icon [icon]=\"icon\"></fa-icon>\n    </span>\n  }\n</div>\n"
        },
        {
            "name": "LoaderComponent",
            "id": "component-LoaderComponent-219ffdb956c15751d99423a22d8040e86efa6e38cf31ec5352ab87302e532570f62654dcc249d63b1fbd29f045ae10283ea9aa05a90ca744063054ca975e1421",
            "file": "projects/angular-component-library/src/lib/components/loader/loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "loader-component",
            "styleUrls": ["./loader.component.scss"],
            "styles": [],
            "templateUrl": ["./loader.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "animation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loaderStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "LoaderStyle",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create and show a loader/ spinner.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;loader-component\n  [style.border]=&quot;&#39;1px solid #ddd&#39;&quot;\n  [loaderStyle]=&quot;dotLoader2&quot;\n  [label]=&quot;&#39;Daten werden geladen...&#39;&quot;&gt;\n&lt;/loader-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create and show a loader/ spinner.\n\n```\n<loader-component\n  [style.border]=\"'1px solid #ddd'\"\n  [loaderStyle]=\"dotLoader2\"\n  [label]=\"'Daten werden geladen...'\">\n</loader-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { LoaderStyle } from '../../model/loader-style.enum';\n\n/**\n * Component to create and show a loader/ spinner.\n *\n * @howToUse\n * ```\n * <loader-component\n *   [style.border]=\"'1px solid #ddd'\"\n *   [loaderStyle]=\"dotLoader2\"\n *   [label]=\"'Daten werden geladen...'\">\n * </loader-component>\n * ```\n */\n@Component({\n  selector: 'loader-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule],\n  templateUrl: './loader.component.html',\n  styleUrls: ['./loader.component.scss'],\n})\nexport class LoaderComponent {\n  @Input() loaderStyle?: LoaderStyle;\n  //example -> linear, ease\n  @Input() animation?: string;\n\n  @Input() label?: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  position: absolute;\n  margin: 0 auto;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: var(--z-index-5);\n  padding-top: 20%;\n  background: rgba(var(--loader-bg-rgb), 0.5);\n}\n\n.loader-container {\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 300px;\n  height: 200px;\n  position: relative;\n\n  div {\n    color: var(--text-color);\n  }\n\n  p {\n    color: var(--text-color);\n    font-weight: var(--font-weight-normal);\n    font-size: 1.2em;\n    text-align: center;\n  }\n}\n\n/************************************\nSpinner\n**************************************/\n.spinner {\n  border: 8px solid #f3f3f3;\n  border-top: 8px solid var(--text-color);\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  margin: auto;\n}\n\n/************************************\nSpinner 2\n**************************************/\n.spinner-2 {\n  border: 8px solid transparent;\n  border-top: 8px solid var(--text-color);\n  border-bottom: 8px solid var(--text-color);\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  margin: auto;\n}\n\n.linear {\n  animation: spin 2s linear infinite;\n}\n\n.ease {\n  animation: loading 1s ease infinite;\n}\n\n/************************************\nDot Loader\n**************************************/\n.dot-loader {\n  position: relative;\n  flex-direction: column;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 70px;\n  height: 70px;\n  margin: auto;\n\n  span {\n    position: absolute;\n    font-size: 10px;\n    width: 1em;\n    height: 1em;\n    border-radius: 50%;\n    animation: dotSpin 1.1s infinite ease;\n  }\n}\n\n/************************************\nDot Loader 2\n**************************************/\n.dot-loader-2 {\n  margin: 10px auto 0;\n  width: auto;\n  text-align: center;\n\n  & > span {\n    width: 18px;\n    height: 18px;\n    margin: 3px;\n    background-color: var(--text-color);\n    border-radius: 100%;\n    display: inline-block;\n    -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;\n    animation: sk-bouncedelay 1.4s infinite ease-in-out both;\n\n    &:first-of-type {\n      -webkit-animation-delay: -0.32s;\n      animation-delay: -0.32s;\n    }\n\n    &:nth-child(2) {\n      -webkit-animation-delay: -0.16s;\n      animation-delay: -0.16s;\n    }\n  }\n}\n\n@keyframes dotSpin {\n  0%,\n  100% {\n    box-shadow:\n      0em -2.6em 0em 0em var(--accent-color),\n      1.8em -1.8em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      2.5em 0em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      1.75em 1.75em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      0em 2.5em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      -1.8em 1.8em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      -2.6em 0em 0 0em rgba(var(--accent-color-rgb), 0.5),\n      -1.8em -1.8em 0 0em rgba(var(--accent-color-rgb), 0.7);\n  }\n  12.5% {\n    box-shadow:\n      0em -2.6em 0em 0em rgba(var(--accent-color-rgb), 0.7),\n      1.8em -1.8em 0 0em var(--accent-color),\n      2.5em 0em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      1.75em 1.75em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      0em 2.5em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      -1.8em 1.8em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      -2.6em 0em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      -1.8em -1.8em 0 0em rgba(var(--accent-color-rgb), 0.5);\n  }\n  25% {\n    box-shadow:\n      0em -2.6em 0em 0em rgba(var(--accent-color-rgb), 0.5),\n      1.8em -1.8em 0 0em rgba(var(--accent-color-rgb), 0.7),\n      2.5em 0em 0 0em var(--accent-color),\n      1.75em 1.75em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      0em 2.5em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      -1.8em 1.8em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      -2.6em 0em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      -1.8em -1.8em 0 0em rgba(var(--accent-color-rgb), 0.2);\n  }\n  37.5% {\n    box-shadow:\n      0em -2.6em 0em 0em rgba(var(--accent-color-rgb), 0.2),\n      1.8em -1.8em 0 0em rgba(var(--accent-color-rgb), 0.5),\n      2.5em 0em 0 0em rgba(var(--accent-color-rgb), 0.7),\n      1.75em 1.75em 0 0em var(--accent-color),\n      0em 2.5em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      -1.8em 1.8em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      -2.6em 0em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      -1.8em -1.8em 0 0em rgba(var(--accent-color-rgb), 0.2);\n  }\n  50% {\n    box-shadow:\n      0em -2.6em 0em 0em rgba(var(--accent-color-rgb), 0.2),\n      1.8em -1.8em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      2.5em 0em 0 0em rgba(var(--accent-color-rgb), 0.5),\n      1.75em 1.75em 0 0em rgba(var(--accent-color-rgb), 0.7),\n      0em 2.5em 0 0em var(--accent-color),\n      -1.8em 1.8em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      -2.6em 0em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      -1.8em -1.8em 0 0em rgba(var(--accent-color-rgb), 0.2);\n  }\n  62.5% {\n    box-shadow:\n      0em -2.6em 0em 0em rgba(var(--accent-color-rgb), 0.2),\n      1.8em -1.8em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      2.5em 0em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      1.75em 1.75em 0 0em rgba(var(--accent-color-rgb), 0.5),\n      0em 2.5em 0 0em rgba(var(--accent-color-rgb), 0.7),\n      -1.8em 1.8em 0 0em var(--accent-color),\n      -2.6em 0em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      -1.8em -1.8em 0 0em rgba(var(--accent-color-rgb), 0.2);\n  }\n  75% {\n    box-shadow:\n      0em -2.6em 0em 0em rgba(var(--accent-color-rgb), 0.2),\n      1.8em -1.8em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      2.5em 0em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      1.75em 1.75em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      0em 2.5em 0 0em rgba(var(--accent-color-rgb), 0.5),\n      -1.8em 1.8em 0 0em rgba(var(--accent-color-rgb), 0.7),\n      -2.6em 0em 0 0em var(--accent-color),\n      -1.8em -1.8em 0 0em rgba(var(--accent-color-rgb), 0.2);\n  }\n  87.5% {\n    box-shadow:\n      0em -2.6em 0em 0em rgba(var(--accent-color-rgb), 0.2),\n      1.8em -1.8em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      2.5em 0em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      1.75em 1.75em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      0em 2.5em 0 0em rgba(var(--accent-color-rgb), 0.2),\n      -1.8em 1.8em 0 0em rgba(var(--accent-color-rgb), 0.5),\n      -2.6em 0em 0 0em rgba(var(--accent-color-rgb), 0.7),\n      -1.8em -1.8em 0 0em var(--accent-color);\n  }\n}\n\n@keyframes loading {\n  to {\n    transform: rotate(1turn);\n  }\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n@-webkit-keyframes sk-bouncedelay {\n  0%,\n  80%,\n  100% {\n    -webkit-transform: scale(0);\n  }\n  40% {\n    -webkit-transform: scale(1);\n  }\n}\n\n@keyframes sk-bouncedelay {\n  0%,\n  80%,\n  100% {\n    -webkit-transform: scale(0);\n    transform: scale(0);\n  }\n  40% {\n    -webkit-transform: scale(1);\n    transform: scale(1);\n  }\n}\n",
                    "styleUrl": "./loader.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"loader-container\">\n  @if (loaderStyle && animation) {\n    <div [ngClass]=\"[loaderStyle, animation]\">\n      <span></span>\n      <span></span>\n      <span></span>\n    </div>\n  }\n  @if (loaderStyle && !animation) {\n    <div [ngClass]=\"[loaderStyle]\">\n      <span></span>\n      <span></span>\n      <span></span>\n    </div>\n  }\n  @if (label) {\n    <p>{{ label }}</p>\n  }\n</div>\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-03eb0d7b1f177d2f769723f8beab1cef527cf95a4ca459dd276972d4ab9b857997bdf812fe102ed0518fc54d7c2562522fd9eee726ee811f23512080a07cbfff",
            "file": "projects/angular-component-library/src/lib/components/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "modal-component",
            "styleUrls": ["./modal.component.scss"],
            "styles": [],
            "templateUrl": ["./modal.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "cancelBtn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "cancelBtnText",
                    "defaultValue": "'Cancel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "confirmBtn",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "confirmBtnText",
                    "defaultValue": "'Ok'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "confirmDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "deleteBtn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "deleteBtnTxt",
                    "defaultValue": "'Delete'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showConfirmBtnLoader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "sizeClass",
                    "defaultValue": "['m']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "{}",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "' '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "description",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [123]
                },
                {
                    "name": "faCircleInfo",
                    "defaultValue": "Icons.faCircleInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "faCircleXmark",
                    "defaultValue": "Icons.faCircleXmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "faClose",
                    "defaultValue": "Icons.faXmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "faLoader",
                    "defaultValue": "Icons.faLoader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "modalResult",
                    "defaultValue": "ModalResult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "modalType",
                    "defaultValue": "ModalType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "sassHelper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SassHelperComponent",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SassHelperComponent"
                        }
                    ],
                    "modifierKind": [170]
                },
                {
                    "name": "subscriptionOnClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "type",
                    "defaultValue": "ModalType.custom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "zIndex",
                    "defaultValue": "1000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCloses modal\n",
                    "description": "<p>Closes modal</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "confirmModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCloses and confirms modal\n",
                    "description": "<p>Closes and confirms modal</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "handleClickOutside",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClose modal on click outside of modal-content\n",
                    "description": "<p>Close modal on click outside of modal-content</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openCustomModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens modal\n",
                    "description": "<p>Opens modal</p>\n"
                },
                {
                    "name": "openGenericModal",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "modalType",
                            "type": "ModalType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows info modal\n",
                    "description": "<p>Shows info modal</p>\n",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "modalType",
                            "type": "ModalType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FilledBtnComponent",
                    "type": "component"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "BorderedBtnComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Component to create and show a modal.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;modal-component&gt;\n&lt;/modal-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create and show a modal.\n\n```\n<modal-component>\n</modal-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FilledBtnComponent } from '../filled-btn/filled-btn.component';\nimport { BorderedBtnComponent } from '../bordered-btn/bordered-btn.component';\nimport { IconDefinition } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { Subscription } from 'rxjs';\nimport { ModalResult } from '../../model/modal-result.enum';\nimport { ModalType } from '../../model/modal-type.enum';\nimport { ModalService } from '../../services/modal.service';\nimport { Icons } from '../../model/icons';\nimport { SassHelperComponent } from '../sass-helper.component';\n\n/**\n * Component to create and show a modal.\n *\n * @howToUse\n * ```\n * <modal-component>\n * </modal-component>\n * ```\n */\n@Component({\n  selector: 'modal-component',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FilledBtnComponent,\n    FontAwesomeModule,\n    BorderedBtnComponent,\n  ],\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss'],\n})\nexport class ModalComponent implements OnInit, OnDestroy {\n  @ViewChild(SassHelperComponent) sassHelper?: SassHelperComponent;\n\n  @Input() id: string = '';\n  @Input() title = ' ';\n  @Input() confirmBtn = true;\n  @Input() confirmBtnText? = 'Ok';\n  @Input() showConfirmBtnLoader = false;\n  @Input() confirmDisabled? = false;\n  @Input() cancelBtn? = false;\n  @Input() cancelBtnText? = 'Cancel';\n  @Input() deleteBtn? = false;\n  @Input() deleteBtnTxt? = 'Delete';\n  @Input() sizeClass = ['m'];\n\n  faLoader: IconDefinition = Icons.faLoader;\n  faClose: IconDefinition = Icons.faXmark;\n  faCircleInfo: IconDefinition = Icons.faCircleInfo;\n  faCircleXmark: IconDefinition = Icons.faCircleXmark;\n\n  type: ModalType = ModalType.custom;\n  modalType: typeof ModalType = ModalType;\n  modalResult: typeof ModalResult = ModalResult;\n\n  zIndex = 1000; // z-index-6 var TODO read var value from sassHelper Service\n\n  description: string | null = null;\n  private element: any;\n\n  subscriptionOnClose?: Subscription;\n\n  constructor(\n    private modalService: ModalService,\n    private el: ElementRef,\n  ) {\n    this.element = this.el.nativeElement;\n  }\n\n  ngOnInit(): void {\n    if (!this.id) {\n      console.error('modal must have an id');\n      return;\n    }\n\n    document.body.appendChild(this.element);\n    this.modalService.addModal(this);\n  }\n\n  ngOnDestroy(): void {\n    this.modalService.removeModal(this.id);\n    this.element.remove();\n\n    if (this.subscriptionOnClose) {\n      this.subscriptionOnClose.unsubscribe();\n    }\n  }\n\n  /**\n   * Opens modal\n   */\n  openCustomModal(): void {\n    this.zIndex = 1000 + this.modalService.modals.length;\n    this.type = this.modalType.custom;\n    this.element.style.display = 'flex';\n  }\n\n  /**\n   * Closes modal\n   * @param reason\n   */\n  closeModal(): void {\n    this.modalService.closeModal(this.id);\n    this.element.style.display = 'none';\n  }\n\n  /**\n   * Closes and confirms modal\n   * @param reason\n   */\n  confirmModal(): void {\n    this.modalService.confirmModal(this.id);\n\n    this.subscriptionOnClose = this.modalService.onClose$.subscribe(\n      (modalId) => {\n        if (this.id === modalId && this.subscriptionOnClose) {\n          this.subscriptionOnClose.unsubscribe();\n          this.element.style.display = 'none';\n        }\n      },\n    );\n  }\n\n  /**\n   * Close modal on click outside of modal-content\n   */\n  handleClickOutside(event: MouseEvent): void {\n    const className = (event.target as HTMLElement).className;\n    if (className === 'modal') {\n      this.modalService.closeModal(this.id);\n      this.element.style.display = 'none';\n    }\n  }\n\n  /**\n   * Shows info modal\n   */\n  openGenericModal(\n    title: string,\n    description: string,\n    modalType: ModalType,\n  ): void {\n    this.type = modalType;\n    this.title = title;\n    this.description = description;\n    this.element.style.display = 'flex';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: none;\n}\n\n.modal {\n  position: fixed;\n  display: flex;\n  justify-self: center;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: var(--z-index-6);\n  box-sizing: border-box;\n  height: 100%;\n  width: 100%;\n  padding: 0.625em;\n  transition: background-color 0.1s;\n  animation: modal-show 0.3s;\n\n  .modal-content {\n    align-self: center;\n    justify-self: center;\n    position: relative;\n    box-sizing: border-box;\n    width: 60em;\n    min-height: 15em;\n    max-width: 100%;\n    padding: 0 0 1.25em;\n    border: var(--border-width) solid var(--border-color);\n    color: var(--text-color);\n    font-family: inherit;\n    font-size: 1rem;\n    margin: auto;\n    overflow: hidden;\n    background-color: var(--modal-background);\n\n    &.lg {\n      height: 100%;\n      width: 100%;\n    }\n\n    &.l {\n      height: 75%;\n      width: 75%;\n    }\n\n    &.m {\n      height: 30em;\n      width: 50em;\n    }\n\n    &.s {\n      height: 20em;\n      width: 25em;\n    }\n\n    &.xs {\n      height: 15em;\n      width: 25em;\n    }\n\n    .modal-header {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n      align-items: center;\n      min-height: var(--btn-height);\n\n      h2 {\n        position: relative;\n        width: 100%;\n        margin: 0;\n        padding: 0.5em 2em 0.5em 1em;\n        color: inherit;\n        font-size: 1.1em;\n        font-weight: var(--font-weight-semibold);\n        text-align: left;\n        text-transform: none;\n        word-wrap: break-word;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n\n      .close-btn {\n        z-index: 2;\n        width: var(--btn-height);\n        height: var(--btn-height);\n        position: absolute;\n        right: 0;\n        padding: 0;\n        overflow: hidden;\n        transition:\n          color 0.1s,\n          box-shadow 0.1s;\n        border: none;\n        background-color: transparent;\n        cursor: pointer;\n\n        display: flex;\n        align-items: center;\n        justify-content: center;\n\n        fa-icon {\n          font-size: 2em;\n          color: var(--text-color);\n          font-weight: var(--font-weight-normal);\n        }\n\n        &:hover {\n          fa-icon {\n            color: var(--accent-color);\n          }\n        }\n      }\n    }\n\n    ::ng-deep .modal-body {\n      margin: 0px;\n      padding: 0.5em 2em 70px 2em;\n      border-top: 1px solid var(--border-color-light);\n      overflow-y: auto;\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      top: 45px;\n\n      input {\n        width: 100%;\n      }\n\n      h3 {\n        text-align: left;\n        margin: 0.5em 0em;\n        font-size: 1em;\n        font-weight: var(--font-weight-medium);\n        padding: 0.25em 0em;\n        color: var(--not-emphrazed-color-dark);\n        text-transform: uppercase;\n      }\n\n      .info-icon {\n        width: 100%;\n        display: flex;\n        justify-content: center;\n\n        fa-icon {\n          font-size: 5em;\n          color: var(--toast-info-color);\n        }\n      }\n\n      .error-icon {\n        width: 100%;\n        display: flex;\n        justify-content: center;\n\n        fa-icon {\n          font-size: 4em;\n          color: var(--delete-color);\n        }\n      }\n\n      .tag-list {\n        margin: 0.5em 0em;\n      }\n\n      .grid {\n        display: grid;\n        grid-template-columns: 1.5fr 4fr;\n        grid-template-rows: max-content;\n        grid-row-gap: 10px;\n        text-align: left;\n        margin-left: 0.25em;\n        margin-top: 1em;\n        align-items: stretch;\n      }\n\n      .grid-2-4 {\n        @extend .grid;\n        grid-template-columns: 2fr 4fr;\n      }\n\n      h4 {\n        font-weight: var(--font-weight-semibold);\n        color: var(--text-color);\n        height: 22px;\n        margin: 0;\n      }\n\n      .auto-label {\n        @extend h4;\n        height: auto;\n        display: grid;\n        align-items: center;\n      }\n\n      .margin-bottom {\n        margin-bottom: 2em;\n      }\n    }\n\n    &.no-padding {\n      .modal-body {\n        padding: 0;\n      }\n    }\n\n    .modal-footer {\n      position: absolute;\n      bottom: 0;\n      width: 100%;\n      text-align: center;\n      padding: 1em;\n      box-sizing: border-box;\n\n      display: flex;\n      align-items: center;\n      justify-content: flex-end;\n      gap: 1em;\n    }\n  }\n}\n\n.modal-background {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.4);\n  z-index: calc(var(--z-index-6) - 1);\n}\n\n@keyframes modal-show {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.01);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n/* On screens that are 1050px or less, set the background color to olive */\n@media screen and (max-width: 1050px) {\n  .modal {\n    .modal-content {\n      &.l {\n        height: 75%;\n        width: 85%;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": ["OnInit", "OnDestroy"],
            "templateData": "@if (type === modalType.custom) {\n  <div class=\"modal\" [style.z-index]=\"zIndex\">\n    <div class=\"modal-content\" [ngClass]=\"sizeClass\">\n      <div class=\"modal-header\">\n        <h2>{{ title }}</h2>\n        <button\n          class=\"close-btn\"\n          [attr.title]=\"'close'\"\n          [attr.aria-label]=\"'close'\"\n          type=\"button\"\n          (click)=\"closeModal()\">\n          <fa-icon [icon]=\"faClose\"></fa-icon>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <ng-content> </ng-content>\n      </div>\n      <div class=\"modal-footer\">\n        @if (cancelBtn) {\n          <bordered-btn-component\n            [ariaLabel]=\"'Close'\"\n            (click)=\"closeModal()\"\n            [label]=\"cancelBtnText\">\n          </bordered-btn-component>\n        }\n        @if (deleteBtn) {\n          <filled-btn-component\n            [ariaLabel]=\"'Delete'\"\n            [faIcon]=\"showConfirmBtnLoader ? faLoader : undefined\"\n            [isDisabled]=\"confirmDisabled\"\n            [styleClass]=\"'delete'\"\n            [isSpinning]=\"showConfirmBtnLoader\"\n            (click)=\"confirmModal()\"\n            [label]=\"deleteBtnTxt\">\n          </filled-btn-component>\n        }\n        @if (confirmBtn) {\n          <filled-btn-component\n            [ariaLabel]=\"'Confirm'\"\n            [faIcon]=\"showConfirmBtnLoader ? faLoader : undefined\"\n            [isDisabled]=\"confirmDisabled\"\n            [isSpinning]=\"showConfirmBtnLoader\"\n            (click)=\"confirmModal()\"\n            [label]=\"confirmBtnText\">\n          </filled-btn-component>\n        }\n      </div>\n    </div>\n  </div>\n}\n@if (type !== modalType.custom) {\n  <div\n    class=\"modal\"\n    [style.z-index]=\"zIndex\"\n    (click)=\"handleClickOutside($event)\">\n    <div class=\"modal-content\" [ngClass]=\"sizeClass\">\n      <div class=\"modal-header\">\n        <button\n          class=\"close-btn\"\n          [attr.title]=\"'close'\"\n          [attr.aria-label]=\"'close'\"\n          type=\"button\"\n          (click)=\"closeModal()\">\n          <fa-icon [icon]=\"faClose\"></fa-icon>\n        </button>\n      </div>\n      <div class=\"modal-body\" [style.text-align]=\"'center'\">\n        @if (type === modalType.info) {\n          <div class=\"info-icon\">\n            <fa-icon [icon]=\"faCircleInfo\"></fa-icon>\n          </div>\n        }\n        @if (type === modalType.error) {\n          <div class=\"error-icon\">\n            <fa-icon [icon]=\"faCircleXmark\"></fa-icon>\n          </div>\n        }\n        <h2>{{ title }}</h2>\n        <div [innerHTML]=\"description\"></div>\n      </div>\n      <div class=\"modal-footer\">\n        <filled-btn-component\n          [ariaLabel]=\"'Close'\"\n          [isDisabled]=\"confirmDisabled\"\n          (click)=\"confirmModal()\"\n          [label]=\"'Ok'\">\n        </filled-btn-component>\n      </div>\n    </div>\n  </div>\n}\n<div class=\"modal-background\" [style.z-index]=\"zIndex - 1\"></div>\n"
        },
        {
            "name": "MultiSelectComponent",
            "id": "component-MultiSelectComponent-464981e3859824a7f10cbda4f3406725cd052f52cafe47ba8d7da9a7382e4287fddf0cd14e460b5a72c93b031197a08e2105dc2a8c55b15e2de67dcd725b0646",
            "file": "projects/angular-component-library/src/lib/components/multi-select/multi-select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "multi-select-component",
            "styleUrls": ["./multi-select.component.scss"],
            "styles": [],
            "templateUrl": ["./multi-select.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "classStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "faIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "IconDefinition",
                    "decorators": []
                },
                {
                    "name": "filterPlaceholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "withFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemsSelected",
                    "defaultValue": "new EventEmitter<string[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "btn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'btn'"
                        }
                    ],
                    "modifierKind": [170]
                },
                {
                    "name": "filter",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "filterInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 56,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'filterInput'"
                        }
                    ],
                    "modifierKind": [170]
                },
                {
                    "name": "itemsBefore",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menu'"
                        }
                    ],
                    "modifierKind": [170]
                },
                {
                    "name": "randomId",
                    "defaultValue": "Math.floor(Math.random() * 16777215).toString(16)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "selectedItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "show",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "alignmentLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates alignment of menu to left or right according to the available space\n",
                    "description": "<p>Updates alignment of menu to left or right according to the available space</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2192,
                                "end": 2199,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "filterAndSort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFilters list\n",
                    "description": "<p>Filters list</p>\n"
                },
                {
                    "name": "getSortedList",
                    "args": [
                        {
                            "name": "list",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCompares elements in menu alphabetically by text param\n",
                    "description": "<p>Compares elements in menu alphabetically by text param</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3555,
                                "end": 3559,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "list"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3549,
                                "end": 3554,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 3566,
                                "end": 3573,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "handleClickOutside",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles click outside of menu to close menu\n",
                    "description": "<p>Handles click outside of menu to close menu</p>\n"
                },
                {
                    "name": "isInFilterArray",
                    "args": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if item is in filtered array\n",
                    "description": "<p>Checks if item is in filtered array</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3757,
                                "end": 3761,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "item"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3751,
                                "end": 3756,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 3768,
                                "end": 3775,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeElement",
                    "args": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves selected element\n",
                    "description": "<p>Removes selected element</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2853,
                                "end": 2857,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "item"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2847,
                                "end": 2852,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "selectElement",
                    "args": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect element\n",
                    "description": "<p>Select element</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3188,
                                "end": 3192,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "item"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3182,
                                "end": 3187,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toggleFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle show state of menu\n",
                    "description": "<p>Toggle show state of menu</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ClickOutsideDirective",
                    "type": "directive"
                },
                {
                    "name": "SearchInputComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Component to create and show  select</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;multi-select-component\n  [items]=&quot;items&quot;\n  [faIcon]=&quot;faFilter&quot;\n  [withFilter]=&quot;false&quot;\n&gt;&lt;/multi-select-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create and show  select\n\n```\n<multi-select-component\n  [items]=\"items\"\n  [faIcon]=\"faFilter\"\n  [withFilter]=\"false\"\n></multi-select-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { SearchInputComponent } from '../search-input/search-input.component';\nimport { ClickOutsideDirective } from '../../directives/click-outside.directive';\nimport { FormsModule } from '@angular/forms';\n\n/**\n * Component to create and show  select\n *\n * @howToUse\n * ```\n * <multi-select-component\n *   [items]=\"items\"\n *   [faIcon]=\"faFilter\"\n *   [withFilter]=\"false\"\n * ></multi-select-component>\n * ```\n */\n@Component({\n  selector: 'multi-select-component',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FontAwesomeModule,\n    FormsModule,\n    ClickOutsideDirective,\n    SearchInputComponent,\n  ],\n  templateUrl: './multi-select.component.html',\n  styleUrls: ['./multi-select.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MultiSelectComponent implements OnChanges {\n  @Input() items: string[] = [];\n  @Input() label = '';\n  @Input() faIcon?: IconDefinition;\n  @Input() withFilter?: boolean;\n  @Input() filterPlaceholder?: string;\n  @Input() classStyle?: string;\n  @Input() backgroundColor?: string;\n\n  @Output() itemsSelected = new EventEmitter<string[]>();\n\n  @ViewChild('filterInput') filterInput?: ElementRef<HTMLDivElement>;\n  @ViewChild('btn') btn?: ElementRef<HTMLDivElement>;\n  @ViewChild('menu') menu?: ElementRef<HTMLDivElement>;\n\n  itemsBefore: string[] = [];\n  selectedItems: string[] = [];\n  filter = '';\n  show = false;\n\n  randomId: string = Math.floor(Math.random() * 16777215).toString(16);\n\n  constructor(private changedDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges() {\n    this.selectedItems = [];\n    this.itemsBefore = JSON.parse(JSON.stringify(this.items));\n  }\n\n  /**\n   * Toggle show state of menu\n   */\n  toggleFilter(): void {\n    this.show = !this.show;\n  }\n\n  /**\n   * Updates alignment of menu to left or right according to the available space\n   * @returns\n   */\n  alignmentLeft(): boolean {\n    const boundingMenu = this.menu?.nativeElement.getBoundingClientRect();\n    const boundingBtn = this.btn?.nativeElement.getBoundingClientRect();\n\n    if (boundingBtn && boundingMenu) {\n      const right = document.body.scrollWidth - boundingBtn.right;\n      //as long as there is enough space on the right, align it to the left\n      return right > boundingMenu.width;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Handles click outside of menu to close menu\n   */\n  handleClickOutside(): void {\n    if (this.show) {\n      this.show = !this.show;\n    }\n  }\n\n  /**\n   * Removes selected element\n   * @param item\n   */\n  removeElement(item: string): void {\n    this.selectedItems = this.selectedItems.filter((el) => el !== item);\n    this.items.push(item);\n    this.items = this.getSortedList(this.items);\n    this.changedDetectorRef.detectChanges();\n    this.itemsSelected.emit(this.selectedItems);\n  }\n\n  /**\n   * Select element\n   * @param item\n   */\n  selectElement(item: string): void {\n    this.selectedItems.push(item);\n    this.items = this.items.filter((el) => el !== item);\n    this.items = this.getSortedList(this.items);\n    this.changedDetectorRef.detectChanges();\n    this.itemsSelected.emit(this.selectedItems);\n  }\n\n  /**\n   * Compares elements in menu alphabetically by text param\n   * @param list\n   * @returns\n   */\n  getSortedList(list: string[]): string[] {\n    list = list.sort((a, b) => a.localeCompare(b));\n    return list;\n  }\n\n  /**\n   * Checks if item is in filtered array\n   * @param item\n   * @returns\n   */\n  isInFilterArray(item: string): boolean {\n    return this.selectedItems.some((el: string) => el === item);\n  }\n\n  /**\n   * Filters list\n   */\n  filterAndSort(): void {\n    this.items = this.itemsBefore.filter(\n      (item: string) =>\n        !this.filter || item.toLowerCase().includes(this.filter.toLowerCase()),\n    );\n    this.items = this.items.filter((el) => !this.isInFilterArray(el));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n  position: relative;\n}\n\n.filter-btn {\n  min-width: var(--btn-height);\n  justify-content: space-between;\n\n  span {\n    font-weight: var(--font-weight-light);\n    color: var(--fa-icon-color);\n    width: max-content;\n    padding-left: 0.75em;\n  }\n\n  p {\n    text-align: center;\n    font-size: 1.3em;\n    font-weight: var(--font-weight-semibold);\n    color: var(--fa-icon-color);\n    margin-left: 0.25em;\n  }\n\n  fa-icon {\n    color: var(--fa-icon-color);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: var(--btn-height);\n  }\n}\n\nbutton {\n  position: relative;\n  height: var(--btn-height);\n  line-height: var(--btn-height);\n  border: 0;\n  padding: var(--btn-padding);\n  font-weight: var(--font-weight-light);\n  font-size: var(--font-size);\n  background: transparent;\n  border: var(--border-width) solid var(--accent-color);\n  border-radius: var(--border-radius);\n  z-index: 10;\n  width: 100%;\n  max-width: var(--max-width);\n  overflow: hidden;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  cursor: pointer;\n\n  fa-icon,\n  span {\n    color: var(--accent-color);\n  }\n\n  &.active {\n    background-color: var(--accent-color) !important;\n    border: var(--border-width) solid var(--accent-color) !important;\n\n    fa-icon,\n    span {\n      color: var(--fa-icon-color);\n    }\n  }\n\n  &:active:not([disabled]) {\n    background-color: var(--accent-color-dark) !important;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n\n.menu {\n  position: absolute;\n  top: calc(var(--btn-height) + 4px);\n  min-width: 150px;\n  width: max-content;\n  max-width: var(--max-width);\n  height: auto;\n  border-radius: 0;\n  background: var(--menu-background);\n  z-index: var(--z-index-5);\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n\n  &.left {\n    left: 0px;\n  }\n\n  &.right {\n    right: 0px;\n  }\n\n  &.show {\n    transform-origin: top;\n    transform: scaleY(1);\n    transition: transform 0.2s ease-in-out;\n  }\n\n  &.hide {\n    transform-origin: top;\n    transition: transform 0.2s ease-in-out;\n    transform: scaleY(0);\n  }\n\n  input[type='text'] {\n    height: var(--input-height);\n    border: 1px solid var(--btn-border-color);\n    border-radius: var(--border-radius);\n    outline: none;\n    cursor: pointer;\n    font-size: var(--font-size);\n    background: transparent;\n    margin: 5px;\n    width: -moz-available; /* WebKit-based browsers will ignore this. */\n    width: -webkit-fill-available; /* Mozilla-based browsers will ignore this. */\n    width: strech;\n\n    display: flex;\n    flex-direction: column;\n\n    &:focus {\n      border-color: var(--accent-color);\n    }\n  }\n\n  .selected-items {\n    border-bottom: 1px solid var(--border-color);\n    margin-bottom: 1.5em;\n    overflow: hidden;\n  }\n\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    overflow-y: auto;\n    border-top: 1px solid var(--border-color);\n\n    li {\n      height: var(--btn-height);\n      display: block;\n      position: relative;\n      cursor: pointer;\n      font-size: var(--font-size);\n      -webkit-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n      padding: 0.5em;\n      color: var(--text-color);\n      border-bottom: 1px solid rgb(var(--border-color-rgb), 0.2);\n      text-align: left;\n      box-sizing: border-box;\n      overflow: hidden;\n      text-overflow: ellipsis;\n\n      input[type='checkbox'] {\n        margin-right: 10px;\n        position: absolute;\n        opacity: 0;\n        cursor: pointer;\n        height: 0;\n        width: 0;\n      }\n\n      &:last-of-type {\n        border-bottom: none;\n      }\n\n      /* Create a custom checkbox */\n      .checkmark {\n        position: absolute;\n        margin-right: 10px;\n        height: 25px;\n        width: 25px;\n        background-color: transparent;\n        border: 1px solid var(--btn-border-color);\n        border-radius: var(--border-radius);\n\n        &:after {\n          content: '';\n          position: absolute;\n          display: none;\n          left: 9px;\n          top: 5px;\n          width: 5px;\n          height: 10px;\n          border: solid white;\n          border-width: 0 3px 3px 0;\n          -webkit-transform: rotate(45deg);\n          -ms-transform: rotate(45deg);\n          transform: rotate(45deg);\n        }\n      }\n\n      .text {\n        padding-left: 35px;\n        padding-right: 10px;\n        line-height: calc(var(--btn-height) - 10px);\n      }\n\n      &:hover input ~ .checkmark {\n        background-color: var(--row-highlight-color);\n        border: 1px solid var(--accent-color);\n      }\n\n      & input:checked ~ .checkmark {\n        background-color: var(--accent-color);\n        border: 1px solid var(--accent-color);\n      }\n\n      & input:checked ~ .checkmark:after {\n        display: block;\n      }\n\n      &:active,\n      &.active {\n        background-color: var(--row-highlight-color);\n        color: var(--accent-color);\n      }\n    }\n  }\n}\n\n.navbar {\n  background: transparent;\n  border: none;\n  height: var(--sub-navbar-height);\n\n  span,\n  fa-icon {\n    color: var(--fa-icon-color);\n  }\n\n  span:last-of-type {\n    background: transparent;\n    border-left: none;\n    padding-left: 0px;\n\n    fa-icon {\n      color: var(--fa-icon-color);\n    }\n  }\n\n  &:active {\n    background-color: black;\n\n    fa-icon {\n      color: var(--accent-color);\n    }\n\n    button {\n      span:last-of-type {\n        fa-icon {\n          color: var(--accent-color);\n        }\n      }\n      span,\n      fa-icon {\n        color: var(--accent-color);\n      }\n    }\n  }\n}\n\n/***************************************************************\nMedia query to hide hover effects for devices \nthat do not support them, like touch displays\n**************************************************************/\n@media (hover: hover) {\n  button {\n    &:hover,\n    &.active {\n      background-color: var(--accent-color) !important;\n      border: var(--border-width) solid var(--accent-color) !important;\n\n      fa-icon,\n      span {\n        color: var(--fa-icon-color);\n      }\n    }\n  }\n\n  .menu {\n    ul {\n      li {\n        &:hover {\n          background-color: var(--row-highlight-color);\n          color: var(--accent-color);\n        }\n      }\n    }\n  }\n\n  .navbar {\n    &:hover {\n      background-color: black;\n      fa-icon {\n        color: var(--accent-color);\n      }\n      button {\n        span:last-of-type {\n          fa-icon {\n            color: var(--accent-color);\n          }\n        }\n        span,\n        fa-icon {\n          color: var(--accent-color);\n        }\n      }\n    }\n\n    &:active:not([disabled]) {\n      fa-icon {\n        color: var(--accent-color-dark);\n      }\n      button {\n        span:last-of-type {\n          fa-icon {\n            color: var(--accent-color-dark);\n          }\n        }\n        span,\n        fa-icon {\n          color: var(--accent-color-dark);\n        }\n      }\n    }\n  }\n\n  .header {\n    &:hover,\n    &:active {\n      .filter-btn {\n        fa-icon {\n          color: var(--accent-color);\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./multi-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changedDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "changedDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": ["OnChanges"],
            "templateData": "<div class=\"multi-select\" (clickOutside)=\"handleClickOutside()\">\n  <button\n    #btn\n    [attr.title]=\"'MultiSelect'\"\n    [attr.aria-label]=\"'MultiSelect'\"\n    [attr.aria-haspopup]=\"'menu'\"\n    [attr.aria-expanded]=\"show\"\n    [style.background-color]=\"backgroundColor\"\n    [style.border-color]=\"backgroundColor\"\n    (click)=\"toggleFilter()\"\n    class=\"filter-btn\">\n    @if (label) {\n      <span>{{ label }}</span>\n    }\n    @if (faIcon) {\n      <fa-icon [icon]=\"faIcon\"></fa-icon>\n    }\n    @if (selectedItems.length !== 0) {\n      <p>{{ selectedItems.length }}</p>\n    }\n  </button>\n\n  <div\n    #menu\n    class=\"menu popup-shadow\"\n    [class.show]=\"show\"\n    [class.hide]=\"!show\"\n    [ngClass]=\"alignmentLeft() ? 'left' : 'right'\">\n    @if (withFilter) {\n      <search-input-component\n        [style.margin.em]=\"'0.25'\"\n        [classStyles]=\"'full-width no-radius'\"\n        [placeholderText]=\"filterPlaceholder\"\n        [(filter)]=\"filter\"\n        (filterChange)=\"filterAndSort()\">\n      </search-input-component>\n    }\n    <ul class=\"selected-items\">\n      @for (selectedItem of selectedItems; track i; let i = $index) {\n        <li (click)=\"removeElement(selectedItem)\">\n          <input\n            id=\"ms-s-items-{{ randomId }}-{{ i }}\"\n            type=\"checkbox\"\n            [checked]=\"isInFilterArray(selectedItem)\" />\n          <span class=\"checkmark\"></span>\n          <span class=\"text\">{{ selectedItem }}</span>\n        </li>\n      }\n    </ul>\n    <ul [style.max-height.px]=\"300\">\n      @for (item of items; track i; let i = $index) {\n        <li (click)=\"selectElement(item)\">\n          <input id=\"ms-items-{{ randomId }}-{{ i }}\" type=\"checkbox\" />\n          <span class=\"checkmark\"></span>\n          <span class=\"text\">{{ item }}</span>\n        </li>\n      }\n    </ul>\n  </div>\n</div>\n"
        },
        {
            "name": "NavbarBtnComponent",
            "id": "component-NavbarBtnComponent-ed003fa410a0cba027e5b7b9f9f7747dbc07df0a7715d82ad66f14e4693e4d361b11a31b43a0a5b6c1fc885486d0cc69d293a3e59571aafafa329307fa58f3d3",
            "file": "projects/angular-component-library/src/lib/components/navbar-btn/navbar-btn.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "navbar-btn-component",
            "styleUrls": ["./navbar-btn.component.scss"],
            "styles": [],
            "templateUrl": ["./navbar-btn.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "classStyle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "faIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "IconDefinition",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create a navbar button.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;navbar-btn-component\n [label]=&quot;&#39;scheduler.today&#39; | translate &quot;\n [faIcon] = &quot;faCog&quot;&gt;\n&lt;/navbar-btn-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create a navbar button.\n\n```\n<navbar-btn-component\n [label]=\"'scheduler.today' | translate \"\n [faIcon] = \"faCog\">\n</navbar-btn-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\n\n/**\n * Component to create a navbar button.\n *\n * @howToUse\n * ```\n * <navbar-btn-component\n *  [label]=\"'scheduler.today' | translate \"\n *  [faIcon] = \"faCog\">\n * </navbar-btn-component>\n * ```\n */\n@Component({\n  selector: 'navbar-btn-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule],\n  templateUrl: './navbar-btn.component.html',\n  styleUrls: ['./navbar-btn.component.scss'],\n})\nexport class NavbarBtnComponent {\n  @Input() label?: string;\n\n  @Input() faIcon?: IconDefinition;\n\n  @Input() disabled?: boolean;\n  // example --> gray, delete\n  @Input() classStyle?: string = '';\n\n  // example --> active or not\n  @Input() active?: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n\nbutton {\n  position: relative;\n  height: var(--sub-navbar-height);\n  padding: var(--btn-padding);\n  border: 0;\n  font-weight: var(--font-weight-light);\n  font-size: var(--ic-font-size);\n  cursor: pointer;\n  color: var(--fa-icon-color);\n  background: transparent;\n  border-left: 1px solid rgb(255, 255, 255, 0.15);\n\n  fa-icon {\n    color: var(--fa-icon-color);\n  }\n\n  span {\n    margin: 0px 5px;\n  }\n\n  &:active:not([disabled]) {\n    background-color: black;\n    fa-icon {\n      color: var(--accent-color-dark);\n    }\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n\n/************************************\nDisabled\n**************************************/\nbutton:disabled,\nbutton[disabled] {\n  opacity: 0.5;\n  background-size: 0% 100%;\n  cursor: not-allowed;\n\n  &:hover::before,\n  &:hover::after {\n    width: 0%;\n    height: 0%;\n    border-color: transparent;\n  }\n}\n\n.border-right {\n  border-right: 1px solid rgb(255, 255, 255, 0.15);\n  border-left: none;\n}\n\n.borderless {\n  border: none;\n}\n\n/************************************************\nMedia query to add hover only on device which support hover\n*********************************************/\n\n@media (hover: hover) {\n  button {\n    &:hover:not([disabled]) {\n      background-color: black;\n      fa-icon {\n        color: var(--accent-color);\n      }\n    }\n\n    &:active:not([disabled]) {\n      background-color: black;\n      fa-icon {\n        color: var(--accent-color-dark);\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./navbar-btn.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<button\n  [ngClass]=\"[classStyle]\"\n  [attr.title]=\"label\"\n  [attr.aria-label]=\"label\"\n  [disabled]=\"disabled\"\n  [class.active]=\"active\">\n  @if (faIcon) {\n    <fa-icon [icon]=\"faIcon\"></fa-icon>\n  }\n  @if (label) {\n    <span>{{ label }}</span>\n  }\n</button>\n"
        },
        {
            "name": "NoDataComponent",
            "id": "component-NoDataComponent-9091637350c4874b8a6cba329140d7d9b29bb59632e2eed7d7e7254ae6e0db060fb10b261b7084406b94418101431ddea9f20657139bc7b1329652ed8017064a",
            "file": "projects/angular-component-library/src/lib/components/no-data/no-data.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "no-data-component",
            "styleUrls": ["./no-data.component.scss"],
            "styles": [],
            "templateUrl": ["./no-data.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "translationKey",
                    "defaultValue": "'general.noData'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faCircleInfo",
                    "defaultValue": "Icons.faCircleInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create and show a no-data available.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;no-data-component\n  [translationKey]=&quot;&#39;no.data&#39;&quot;&gt;\n&lt;/no-data-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create and show a no-data available.\n\n```\n<no-data-component\n  [translationKey]=\"'no.data'\">\n</no-data-component>\n```\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Icons } from '../../model/icons';\n\n/**\n * Component to create and show a no-data available.\n *\n * @howToUse\n * ```\n * <no-data-component\n *   [translationKey]=\"'no.data'\">\n * </no-data-component>\n * ```\n */\n@Component({\n  selector: 'no-data-component',\n  standalone: true,\n  imports: [FontAwesomeModule, TranslateModule],\n  templateUrl: './no-data.component.html',\n  styleUrls: ['./no-data.component.scss'],\n})\nexport class NoDataComponent {\n  @Input() translationKey = 'general.noData';\n\n  faCircleInfo: IconDefinition = Icons.faCircleInfo;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n\n.no-data {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  column-gap: 10px;\n  padding: 25px;\n\n  span {\n    color: var(--text-color);\n  }\n\n  fa-icon {\n    color: var(--text-color);\n    font-size: 2em;\n  }\n}\n",
                    "styleUrl": "./no-data.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"no-data\">\n  <fa-icon [icon]=\"faCircleInfo\"></fa-icon>\n  <span>{{ translationKey | translate }}</span>\n</div>\n"
        },
        {
            "name": "NonModalComponent",
            "id": "component-NonModalComponent-56479c3b1e443a2ce7ca3ef7176127aec01ae95f015794db356b6cb21e9f12120fccfaffaaf80c2eb830f9b5a1e25f74f28d5acd6ff7ce124f17f384f2d5aaad",
            "file": "projects/angular-component-library/src/lib/components/non-modal/non-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "non-modal-component",
            "styleUrls": ["./non-modal.component.scss"],
            "styles": [],
            "templateUrl": ["./non-modal.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "sizeClass",
                    "defaultValue": "'m'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "' '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [123]
                },
                {
                    "name": "faClose",
                    "defaultValue": "Icons.faXmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "modalResult",
                    "defaultValue": "ModalResult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "nonModalContentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'nonModalContent'"
                        }
                    ],
                    "modifierKind": [170]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCloses modal\n",
                    "description": "<p>Closes modal</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens modal\n",
                    "description": "<p>Opens modal</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "DragDropModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create and show a modal.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;non-modal-component&gt;\n&lt;/non-modal-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create and show a modal.\n\n```\n<non-modal-component>\n</non-modal-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { ModalResult } from '../../model/modal-result.enum';\nimport { ModalService } from '../../services/modal.service';\nimport { Icons } from '../../model/icons';\n\n/**\n * Component to create and show a modal.\n *\n * @howToUse\n * ```\n * <non-modal-component>\n * </non-modal-component>\n * ```\n */\n@Component({\n  selector: 'non-modal-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule, DragDropModule],\n  templateUrl: './non-modal.component.html',\n  styleUrls: ['./non-modal.component.scss'],\n})\nexport class NonModalComponent implements OnInit, OnDestroy {\n  @Input() id: string = '';\n  @Input() title = ' ';\n  @Input() sizeClass = 'm';\n\n  @ViewChild('nonModalContent') nonModalContentRef?: ElementRef<HTMLDivElement>;\n\n  modalResult: typeof ModalResult = ModalResult;\n\n  faClose: IconDefinition = Icons.faXmark;\n\n  private element: any;\n\n  constructor(\n    private modalService: ModalService,\n    private el: ElementRef,\n  ) {\n    this.element = this.el.nativeElement;\n  }\n\n  ngOnInit(): void {\n    if (!this.id) {\n      console.error('modal must have an id');\n      return;\n    }\n    document.body.appendChild(this.element);\n    this.modalService.addNonModal(this);\n  }\n\n  ngOnDestroy(): void {\n    this.modalService.removeNonModal(this.id);\n    this.element.remove();\n  }\n\n  /**\n   * Opens modal\n   */\n  open(): void {\n    this.element.style.display = 'flex';\n  }\n\n  /**\n   * Closes modal\n   * @param reason\n   */\n  close(): void {\n    this.modalService.closeNonModal(this.id);\n    this.element.style.display = 'none';\n\n    if (this.nonModalContentRef?.nativeElement.style.transform) {\n      this.nonModalContentRef.nativeElement.style.transform = 'initial';\n    }\n  }\n\n  /**\n   * Close modal on click outside of non-modal-content\n   */\n  /*handleClickOutside(event: MouseEvent): void {\n        const className = (event.target as HTMLElement).className;\n        if (className === 'non-modal') {\n            this.close();\n        }\n    }*/\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: none;\n}\n\n.non-modal {\n  position: fixed;\n  display: grid;\n  right: 0;\n  bottom: 0;\n  z-index: var(--z-index-6);\n  box-sizing: border-box;\n  height: 100%;\n  width: 100%;\n  padding: 0.5em;\n  transition: background-color 0.1s;\n  animation: modal-show 0.3s;\n  pointer-events: none;\n\n  .non-modal-content {\n    align-self: normal;\n    justify-self: end;\n    position: relative;\n    box-sizing: border-box;\n    width: 60em;\n    min-height: 20em;\n    padding: 0 0 1.25em;\n    color: var(--text-color);\n    font-family: inherit;\n    font-size: 1rem;\n    border: var(--border-width) solid var(--border-color);\n    border-radius: 3px;\n    pointer-events: auto;\n    overflow: hidden;\n    margin: 0.5em;\n    background-color: var(--modal-background);\n\n    &.lg {\n      height: 100%;\n      width: 100%;\n    }\n\n    &.l {\n      height: 75%;\n      width: 75%;\n    }\n\n    &.m {\n      position: absolute;\n      top: 45px;\n      right: 0px;\n      bottom: 0px;\n      min-height: 21em;\n      height: auto;\n      width: 50em;\n    }\n\n    &.s {\n      position: absolute;\n      top: 45px;\n      right: 0px;\n      min-height: 35em;\n      width: 30em;\n    }\n\n    .non-modal-header {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n      align-items: center;\n      min-height: var(--btn-height);\n      border-bottom: 1px solid var(--border-color-light);\n\n      h2 {\n        position: relative;\n        width: 100%;\n        margin: 0;\n        padding: 0.5em 2em 0.5em 1em;\n        color: inherit;\n        font-size: 1.2em;\n        font-weight: var(--font-weight-semibold);\n        text-align: left;\n        text-transform: none;\n\n        line-height: calc(var(--btn-height) - 10px);\n        word-wrap: break-word;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      .close-btn {\n        z-index: 2;\n        width: var(--btn-height);\n        height: var(--btn-height);\n        position: absolute;\n        right: 0;\n        padding: 0;\n        overflow: hidden;\n        transition:\n          color 0.1s,\n          box-shadow 0.1s;\n        border: none;\n        background-color: transparent;\n        color: #ccc;\n        cursor: pointer;\n\n        display: flex;\n        align-items: center;\n        justify-content: center;\n\n        fa-icon {\n          font-size: 2em;\n          color: var(--text-color);\n          font-weight: var(--font-weight-normal);\n        }\n\n        &:hover {\n          fa-icon {\n            color: var(--accent-color);\n          }\n        }\n      }\n    }\n\n    ::ng-deep .non-modal-body {\n      margin: 0px;\n      padding: 0.5em 2em 1em 2em;\n      overflow-y: auto;\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      top: 48px;\n\n      input {\n        width: 100%;\n      }\n\n      h3 {\n        text-align: left;\n        margin: 0.5em 0em;\n        font-size: 1em;\n        font-weight: var(--font-weight-medium);\n        padding: 0.25em 0em;\n        color: var(--not-emphrazed-color-dark);\n        text-transform: uppercase;\n      }\n\n      .grid {\n        display: grid;\n        grid-template-columns: 2fr 3fr;\n        grid-template-rows: fit-content(1.5em);\n        grid-row-gap: 15px;\n        text-align: left;\n        align-items: center;\n        margin-left: 0.25em;\n        grid-column-gap: 10px;\n      }\n\n      .grid-2-4 {\n        @extend .grid;\n        margin-top: 1em;\n        grid-template-rows: max-content;\n        grid-template-columns: 2fr 4fr;\n        grid-column-gap: 0px;\n      }\n\n      .text-ellipsis {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      h4 {\n        font-weight: var(--font-weight-semibold);\n        color: var(--text-color);\n        height: 22px;\n        margin: 0;\n      }\n\n      .auto-label {\n        @extend h4;\n        height: auto;\n        display: grid;\n        align-items: center;\n      }\n\n      .margin-bottom {\n        margin-bottom: 2em;\n      }\n    }\n\n    .non-modal-footer {\n      background-color: white;\n      position: absolute;\n      bottom: 0;\n      width: 100%;\n      text-align: center;\n      padding: 1em;\n      box-sizing: border-box;\n\n      display: flex;\n      align-items: center;\n      justify-content: flex-end;\n      gap: 1em;\n    }\n  }\n}\n\n@keyframes modal-show {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.01);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n",
                    "styleUrl": "./non-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": ["OnInit", "OnDestroy"],
            "templateData": "<div class=\"non-modal\">\n  <div\n    #nonModalContent\n    class=\"non-modal-content modal-shadow\"\n    [ngClass]=\"sizeClass\">\n    <div class=\"non-modal-header\">\n      <h2>{{ title }}</h2>\n      <button\n        class=\"close-btn\"\n        [attr.title]=\"'close'\"\n        [attr.aria-label]=\"'close'\"\n        type=\"button\"\n        (click)=\"close()\">\n        <fa-icon [icon]=\"faClose\"></fa-icon>\n      </button>\n    </div>\n\n    <div class=\"non-modal-body\">\n      <ng-content> </ng-content>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-0d67587badbfebd4dbc3b5acc516a0a16ca25da6e9ad4280ff5658b23d2d14ee346774f52da489a28723ccdf910b808d0190668899f7da2ccb93fa1e19b960e4",
            "file": "projects/angular-component-library/src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": ["./page.css"],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a\n          href=\"https://componentdriven.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page\n        states without needing to navigate to them in your app. Here are some\n        handy patterns for managing page data in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose\n          such data from the \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock\n          these services out using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a\n          href=\"https://storybook.js.org/tutorials/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a\n          href=\"https://storybook.js.org/docs\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg\n          width=\"10\"\n          height=\"10\"\n          viewBox=\"0 0 12 12\"\n          xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\" />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a\n          href=\"https://componentdriven.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page\n        states without needing to navigate to them in your app. Here are some\n        handy patterns for managing page data in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose\n          such data from the \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock\n          these services out using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a\n          href=\"https://storybook.js.org/tutorials/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a\n          href=\"https://storybook.js.org/docs\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg\n          width=\"10\"\n          height=\"10\"\n          viewBox=\"0 0 12 12\"\n          xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\" />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PopoverComponent",
            "id": "component-PopoverComponent-9f42e7b507f3007b8a0c145b40125e004a9e99591da250c1d308f5cdbd07cf982773d591e03443e7e79db95786c0ac51d4f9b2eaba523d39422acfff98e0c8d0",
            "file": "projects/angular-component-library/src/lib/components/popover/popover.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "popover-component",
            "styleUrls": ["./popover.component.scss"],
            "styles": [],
            "templateUrl": ["./popover.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alignmentRight",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "show",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "togglePopover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle show state\n",
                    "description": "<p>Toggle show state</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Component to create and show popover.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;popover-component&gt;\n&lt;/popover-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create and show popover.\n\n```\n<popover-component>\n</popover-component>\n```\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n/**\n * Component to create and show popover.\n *\n * @howToUse\n * ```\n * <popover-component>\n * </popover-component>\n * ```\n */\n@Component({\n  selector: 'popover-component',\n  standalone: true,\n  imports: [],\n  templateUrl: './popover.component.html',\n  styleUrls: ['./popover.component.scss'],\n})\nexport class PopoverComponent {\n  @Input() alignmentRight = false;\n\n  show = false;\n\n  /**\n   * Toggle show state\n   */\n  togglePopover(): void {\n    this.show = !this.show;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  position: absolute;\n  bottom: 0px;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n}\n\n.popover {\n  position: absolute;\n  min-width: 150px;\n  width: max-content;\n  max-width: 450px;\n  height: auto;\n  border-radius: 0;\n  background: var(--menu-background);\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  z-index: var(--z-index-6);\n  padding: 1em;\n  text-align: left;\n\n  &:after,\n  &:before {\n    bottom: 100%;\n    border: solid transparent;\n    content: ' ';\n    height: 0;\n    width: 0;\n    position: absolute;\n    display: inline-block;\n  }\n\n  &:after {\n    border-color: rgba(255, 255, 255, 0);\n    border-bottom-color: #ffffff;\n    border-width: 10px;\n    left: 15px;\n    margin-left: 0px;\n  }\n\n  &:before {\n    border-color: rgba(113, 158, 206, 0);\n    border-bottom-color: var(--border-color);\n    border-width: 11.5px;\n    left: 15px;\n    margin-left: -1px;\n  }\n\n  ::ng-deep h4 {\n    margin: 0;\n  }\n\n  &.show {\n    height: auto;\n    transform-origin: top;\n    transform: scaleY(1);\n    transition: transform 0.2s ease-in-out;\n  }\n\n  &.hide {\n    height: 0;\n    transform-origin: top;\n    transition: transform 0s ease-in-out;\n    transform: scaleY(0);\n  }\n}\n\n.alignment-right {\n  &:after {\n    border-color: rgba(255, 255, 255, 0);\n    border-bottom-color: #ffffff;\n    border-width: 10px;\n    right: 15px;\n    left: auto;\n    margin-right: 0px;\n  }\n\n  &:before {\n    border-color: rgba(113, 158, 206, 0);\n    border-bottom-color: var(--border-color);\n    border-width: 11.5px;\n    right: 15px;\n    left: auto;\n    margin-right: -1px;\n  }\n\n  &.show {\n    right: - var(--btn-height);\n  }\n}\n",
                    "styleUrl": "./popover.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div\n  #popover\n  class=\"popover popup-shadow\"\n  [class.alignment-right]=\"alignmentRight\"\n  [class.show]=\"show\"\n  [class.hide]=\"!show\">\n  <ng-content> </ng-content>\n</div>\n"
        },
        {
            "name": "SassHelperComponent",
            "id": "component-SassHelperComponent-c707f2f1b4531c0ce19e39a72985a668a0327b5735de4dc0988902816e1d87f906d28a5adacabb8bd0c434720b38eee9dee6bfb87104389e212090a125a83739",
            "file": "projects/angular-component-library/src/lib/components/sass-helper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sass-helper",
            "styleUrls": [],
            "styles": [],
            "template": "<div></div>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "readProperty",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRead the custom property of body section with given name\n",
                    "description": "<p>Read the custom property of body section with given name</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 334,
                                "end": 338,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 328,
                                "end": 333,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 345,
                                "end": 352,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setProperty",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOverwrites the custom property of body section with given name\n",
                    "description": "<p>Overwrites the custom property of body section with given name</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 607,
                                "end": 612,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 601,
                                "end": 606,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 625,
                                "end": 629,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 619,
                                "end": 624,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Component to get and set sass/ css variables</p>\n",
            "rawdescription": "\n\nComponent to get and set sass/ css variables\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nexport const PREFIX = '--';\n\n/**\n * Component to get and set sass/ css variables\n */\n@Component({\n  selector: 'sass-helper',\n  standalone: true,\n  template: '<div></div>',\n})\nexport class SassHelperComponent {\n  /**\n   * Read the custom property of body section with given name\n   * @param name\n   * @returns\n   */\n  readProperty(name: string): string {\n    const bodyStyles = window.getComputedStyle(document.body);\n    return bodyStyles.getPropertyValue(PREFIX + name);\n  }\n\n  /**\n   * Overwrites the custom property of body section with given name\n   * @param value\n   * @param name\n   */\n  setProperty(value: string, name: string): void {\n    document.body.style.setProperty(PREFIX + name, value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "SearchInputComponent",
            "id": "component-SearchInputComponent-402f4cfac463529b3573832e38ac1ab403f739d88db7d274c296a147abe001108d3505bfe3efd23bef944c15301dd235bec604bb03ae107a28517ea5a143b68e",
            "file": "projects/angular-component-library/src/lib/components/search-input/search-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "search-input-component",
            "styleUrls": ["./search-input.component.scss"],
            "styles": [],
            "templateUrl": ["./search-input.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "classStyles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "filter",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholderText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "filterChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faCloseCircle",
                    "defaultValue": "Icons.faCircleXmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "faMagnifyingGlass",
                    "defaultValue": "Icons.faMagnifyingGlass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "randomId",
                    "defaultValue": "Math.floor(Math.random() * 16777215).toString(16)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "clearFilter",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear filter\n",
                    "description": "<p>Clear filter</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFilter string has changed\n",
                    "description": "<p>Filter string has changed</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to search</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;search-input-component\n [(filter)]=&quot;filter&quot;&gt;\n&lt;/search-input-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to search\n\n```\n<search-input-component\n [(filter)]=\"filter\">\n</search-input-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { Icons } from '../../model/icons';\n\n/**\n * Component to search\n *\n * @howToUse\n * ```\n * <search-input-component\n *  [(filter)]=\"filter\">\n * </search-input-component>\n * ```\n */\n@Component({\n  selector: 'search-input-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule, FormsModule],\n  templateUrl: './search-input.component.html',\n  styleUrls: ['./search-input.component.scss'],\n})\nexport class SearchInputComponent {\n  @Input() filter = '';\n  @Input() classStyles?: string;\n  @Input() placeholderText? = '';\n\n  @Output() filterChange = new EventEmitter<string>();\n\n  faMagnifyingGlass: IconDefinition = Icons.faMagnifyingGlass;\n  faCloseCircle: IconDefinition = Icons.faCircleXmark;\n\n  randomId: string = Math.floor(Math.random() * 16777215).toString(16);\n\n  /**\n   * Filter string has changed\n   */\n  filterChanged(): void {\n    this.filterChange.emit(this.filter);\n  }\n\n  /**\n   * Clear filter\n   */\n  clearFilter(event: Event): void {\n    event.stopPropagation();\n    this.filter = '';\n    this.filterChange.emit(this.filter);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  position: relative;\n}\n\n.input-container {\n  position: relative;\n\n  input {\n    height: var(--input-height);\n    font-size: var(--font-size);\n    font-family: var(--font-family);\n    font-weight: var(--font-weight-normal);\n    padding-right: 35px;\n    padding-left: 40px;\n    border-radius: var(--input-radius);\n    outline: none;\n    color: var(--text-color);\n    background: transparent;\n    box-sizing: border-box;\n    border: 1px solid var(--border-color);\n  }\n\n  .icon {\n    cursor: pointer;\n    width: 20px;\n\n    fa-icon {\n      color: #999;\n    }\n  }\n\n  .right {\n    position: absolute;\n    right: 10px;\n    top: 0px;\n    display: flex;\n    height: var(--input-height);\n    justify-content: center;\n    align-items: center;\n  }\n\n  .left {\n    position: absolute;\n    left: 10px;\n    top: 0px;\n    display: flex;\n    height: var(--input-height);\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n.no-radius {\n  input {\n    border-radius: 0;\n  }\n}\n\n.full-width {\n  width: 100%;\n  margin: 0em;\n\n  input {\n    width: 100%;\n    font-size: 1.1em;\n  }\n\n  fa-icon {\n    font-size: 18px;\n  }\n}\n\n.small {\n  line-height: calc(var(--input-height) - 10px);\n\n  input {\n    height: calc(var(--input-height) - 10px);\n    font-size: 0.9em;\n    padding-right: 35px;\n    padding-left: 40px;\n    border-radius: var(--border-radius);\n  }\n\n  .right {\n    position: absolute;\n    right: 10px;\n    top: 0px;\n    height: calc(var(--input-height) - 10px);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .left {\n    position: absolute;\n    left: 10px;\n    top: 0px;\n    height: calc(var(--input-height) - 10px);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n/************************************************\nMedia query to add hover only on device which support hover\n*********************************************/\n\n@media (hover: hover) {\n  .input-container {\n    .right {\n      &:hover {\n        fa-icon {\n          color: var(--accent-color);\n        }\n      }\n    }\n\n    &:hover {\n      input {\n        border: 2px solid var(--accent-color);\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./search-input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"input-container\" [ngClass]=\"[classStyles ?? '']\">\n  <span class=\"icon left\">\n    <fa-icon [icon]=\"faMagnifyingGlass\"></fa-icon>\n  </span>\n  <input\n    id=\"search-field-{{ randomId }}\"\n    class=\"form-control\"\n    type=\"text\"\n    [attr.aria-label]=\"'search-field-{{randomId}}'\"\n    [(ngModel)]=\"filter\"\n    (click)=\"$event.stopPropagation()\"\n    (ngModelChange)=\"filterChanged()\"\n    placeholder=\"{{ placeholderText }}\" />\n  @if (filter) {\n    <span class=\"icon right\" (click)=\"clearFilter($event)\">\n      <fa-icon [icon]=\"faCloseCircle\"></fa-icon>\n    </span>\n  }\n</div>\n"
        },
        {
            "name": "SegmentedBtnComponent",
            "id": "component-SegmentedBtnComponent-42891b7ed17b9a6f485371f09ee4f9de5129081ab22bcc6875fc0aff807c351507fe813c3b63b544d2ce81ed1d577103131a38e52212541902cd21b9799f9728",
            "file": "projects/angular-component-library/src/lib/components/segmented-btn/segmented-btn.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "segmented-btn-component",
            "styleUrls": ["./segmented-btn.component.scss"],
            "styles": [],
            "templateUrl": ["./segmented-btn.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "activeBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "SegmentedBtnItem",
                    "decorators": []
                },
                {
                    "name": "btnArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "SegmentedBtnItem[]",
                    "decorators": []
                },
                {
                    "name": "classStyle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "activeBtnChange",
                    "defaultValue": "new EventEmitter<SegmentedBtnItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                },
                {
                    "name": "btnSelected",
                    "defaultValue": "new EventEmitter<SegmentedBtnItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "btnClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "SegmentedBtnItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "SegmentedBtnItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create segmented buttons.\nNote -&gt; :not(p) is only a pseudo-selector with no effect,\nit is used to  handle Component ID generation collision errors</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;segmented-btn-component\n   [btnArray] = &quot;buttons&quot;\n   [(activeBtn)]=&quot;activeTimeSpanBtn&quot;\n   (btnSelected)=&quot;timeSpanBtnClicked($event)&quot;&gt;\n &lt;/segmented-btn-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create segmented buttons.\nNote -> :not(p) is only a pseudo-selector with no effect,\nit is used to  handle Component ID generation collision errors\n\n```\n<segmented-btn-component\n   [btnArray] = \"buttons\"\n   [(activeBtn)]=\"activeTimeSpanBtn\"\n   (btnSelected)=\"timeSpanBtnClicked($event)\">\n </segmented-btn-component>\n```\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { CommonModule } from '@angular/common';\nimport { SegmentedBtnItem } from '../../model/segmented-btn.model';\n\n/**\n * Component to create segmented buttons.\n * Note -> :not(p) is only a pseudo-selector with no effect,\n * it is used to  handle Component ID generation collision errors\n *\n * @howToUse\n * ```\n * <segmented-btn-component\n *    [btnArray] = \"buttons\"\n *    [(activeBtn)]=\"activeTimeSpanBtn\"\n *    (btnSelected)=\"timeSpanBtnClicked($event)\">\n *  </segmented-btn-component>\n * ```\n */\n@Component({\n  selector: 'segmented-btn-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule, TranslateModule],\n  templateUrl: './segmented-btn.component.html',\n  styleUrls: ['./segmented-btn.component.scss'],\n})\nexport class SegmentedBtnComponent {\n  @Input() classStyle: string = '';\n  // example ->   buttons = [{text:\"left\", value: \"\", isDisabled: false, icon: faXing}]\n  @Input() btnArray: SegmentedBtnItem[] = [];\n  // example ->   left\n  @Input() activeBtn?: SegmentedBtnItem;\n\n  @Output() btnSelected = new EventEmitter<SegmentedBtnItem>();\n  @Output() activeBtnChange = new EventEmitter<SegmentedBtnItem>();\n\n  btnClick(event: Event, item: SegmentedBtnItem): void {\n    event.stopPropagation();\n\n    this.activeBtn = item;\n    this.activeBtnChange.emit(item);\n    this.btnSelected.emit(item);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  border: var(--border-width) solid var(--btn-border-color);\n  border-radius: var(--border-radius);\n  height: var(--btn-height);\n  box-sizing: border-box;\n  overflow: hidden;\n}\n\nbutton {\n  position: relative;\n  margin: 2px;\n  margin-right: 0px;\n  height: calc(var(--btn-height) - 6px);\n  line-height: calc(var(--btn-height) - 6px);\n  padding: var(--btn-padding);\n  font-weight: var(--font-weight-light);\n  font-size: var(--font-size);\n  background: transparent;\n  color: var(--btn-color);\n  transition: 0.25s;\n  cursor: pointer;\n  border: 0;\n  border-radius: var(--border-radius);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-sizing: border-box;\n\n  &:last-of-type {\n    margin-right: 2px;\n  }\n\n  fa-icon {\n    color: var(--btn-color);\n  }\n\n  span {\n    margin: 0px 5px;\n  }\n\n  &.active:not([disabled]) {\n    background-color: var(--accent-color);\n    color: var(--fa-icon-color);\n\n    fa-icon {\n      color: var(--fa-icon-color);\n    }\n  }\n  &.focus {\n    background-color: var(--accent-color-light);\n    color: var(--accent-color);\n\n    fa-icon {\n      color: var(--accent-color);\n    }\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n\n/************************************************\nMedia query to add hover only on device which support hover\n*********************************************/\n\n@media (hover: hover) {\n  button {\n    &:hover:not([disabled]) {\n      background-color: var(--accent-color-light);\n      color: var(--accent-color);\n\n      fa-icon {\n        color: var(--accent-color);\n      }\n    }\n  }\n\n  .not-emphrazed {\n    &:hover {\n      background-color: var(--not-emphrazed-color-dark);\n    }\n  }\n}\n",
                    "styleUrl": "./segmented-btn.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "@for (item of btnArray; track item; let i = $index) {\n  <button\n    [class.active]=\"item === activeBtn\"\n    [disabled]=\"item.isDisabled\"\n    (click)=\"btnClick($event, item)\"\n    [attr.title]=\"item.text | translate\"\n    [attr.aria-label]=\"item.text | translate\">\n    @if (item.icon) {\n      <fa-icon [icon]=\"item.icon\"></fa-icon>\n    }\n\n    @if (item.text && !item.onlyIcons) {\n      <span [style.margin]=\"item.icon ? '0px 5px' : '0px'\">\n        {{ item.text | translate }}</span\n      >\n    }\n  </button>\n}\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-3b7930648f7fff1b6bc06fb3dd3d14507fc9df2a850b3094c6ca6ddb9b3f7f38fe6123a2d0aab5a3bd728e28f405200c5f7e055b6dd5c3b425f90d0ea259f490",
            "file": "projects/angular-component-library/src/lib/components/select/select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "select-component",
            "styleUrls": ["./select.component.scss"],
            "styles": [],
            "templateUrl": ["./select.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "classStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "faIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "IconDefinition",
                    "decorators": []
                },
                {
                    "name": "faIconBefore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "IconDefinition",
                    "decorators": []
                },
                {
                    "name": "filterPlaceholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "SelectItem[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "SelectItem",
                    "decorators": []
                },
                {
                    "name": "show",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "withBlankOption",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "withDeselect",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "withFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemSelected",
                    "defaultValue": "new EventEmitter<SelectItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "EventEmitter"
                },
                {
                    "name": "showChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "btn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'btn'"
                        }
                    ],
                    "modifierKind": [170]
                },
                {
                    "name": "filter",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "filterInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 66,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'filterInput'"
                        }
                    ],
                    "modifierKind": [170]
                },
                {
                    "name": "itemsBefore",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 68,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menu'"
                        }
                    ],
                    "modifierKind": [170]
                }
            ],
            "methodsClass": [
                {
                    "name": "alignmentLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates alignment of menu to left or right according to the available space\n",
                    "description": "<p>Updates alignment of menu to left or right according to the available space</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2587,
                                "end": 2594,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "filterAndSort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFilters list\n",
                    "description": "<p>Filters list</p>\n"
                },
                {
                    "name": "getSortedFilterList",
                    "args": [
                        {
                            "name": "list",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCompares elements in menu alphabetically by text param\n",
                    "description": "<p>Compares elements in menu alphabetically by text param</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4191,
                                "end": 4195,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "list"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4185,
                                "end": 4190,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 4202,
                                "end": 4209,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "handleClickOutside",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles click outside of menu to close menu\n",
                    "description": "<p>Handles click outside of menu to close menu</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectElement",
                    "args": [
                        {
                            "name": "item",
                            "type": "SelectItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect element in menu\n",
                    "description": "<p>Select element in menu</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3286,
                                "end": 3290,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "item"
                            },
                            "type": "SelectItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3280,
                                "end": 3285,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "selectEmptyElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet blank select item text\n",
                    "description": "<p>Set blank select item text</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle show state of menu\n",
                    "description": "<p>Toggle show state of menu</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ClickOutsideDirective",
                    "type": "directive"
                },
                {
                    "name": "SearchInputComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Component to create and show  select</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;select-component\n   [items]=&quot;selectItems&quot;\n   [faIcon]=&quot;faCaretDown&quot;\n   [label]=&quot;&#39;Plan: &#39;&quot;\n   [withFilter]=&quot;false&quot;\n   [selectedItem]=&quot;selectedItem.text&quot;\n   (itemSelected)=&quot;selectItemProduction($event)&quot;&gt;\n&lt;/select-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create and show  select\n\n```\n<select-component\n   [items]=\"selectItems\"\n   [faIcon]=\"faCaretDown\"\n   [label]=\"'Plan: '\"\n   [withFilter]=\"false\"\n   [selectedItem]=\"selectedItem.text\"\n   (itemSelected)=\"selectItemProduction($event)\">\n</select-component>\n```\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { ClickOutsideDirective } from '../../directives/click-outside.directive';\nimport { SelectItem } from '../../model/select-item.model';\nimport { cloneDeep } from 'lodash';\nimport { SearchInputComponent } from '../search-input/search-input.component';\nimport { FormsModule } from '@angular/forms';\n\n/**\n * Component to create and show  select\n *\n * @howToUse\n * ```\n * <select-component\n *    [items]=\"selectItems\"\n *    [faIcon]=\"faCaretDown\"\n *    [label]=\"'Plan: '\"\n *    [withFilter]=\"false\"\n *    [selectedItem]=\"selectedItem.text\"\n *    (itemSelected)=\"selectItemProduction($event)\">\n * </select-component>\n * ```\n */\n@Component({\n  selector: 'select-component',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FontAwesomeModule,\n    FormsModule,\n    ClickOutsideDirective,\n    SearchInputComponent,\n  ],\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectComponent implements OnInit, OnChanges {\n  @Input() items: SelectItem[] = [];\n  @Input() selectedItem?: SelectItem;\n  @Input() label = '';\n  @Input() faIcon?: IconDefinition;\n  @Input() faIconBefore?: IconDefinition;\n  @Input() withFilter?: boolean;\n  @Input() filterPlaceholder?: string;\n  @Input() classStyle?: string;\n  @Input() withBlankOption = false;\n  @Input() withDeselect = true;\n  @Input() show? = false;\n\n  @Output() showChange = new EventEmitter<boolean>();\n  @Output() itemSelected = new EventEmitter<SelectItem>();\n\n  @ViewChild('filterInput') filterInput?: ElementRef<HTMLDivElement>;\n  @ViewChild('btn') btn?: ElementRef<HTMLDivElement>;\n  @ViewChild('menu') menu?: ElementRef<HTMLDivElement>;\n\n  itemsBefore: SelectItem[] = [];\n  filter = '';\n\n  ngOnInit(): void {\n    this.itemsBefore = cloneDeep(this.items);\n\n    if (this.items.length === 1) {\n      this.selectedItem = this.items[0];\n      this.itemSelected.emit(this.selectedItem);\n    }\n  }\n\n  ngOnChanges() {\n    this.itemsBefore = cloneDeep(this.items);\n  }\n\n  /**\n   * Toggle show state of menu\n   */\n  toggleMenu(): void {\n    this.show = !this.show;\n    this.showChange.emit(this.show);\n  }\n\n  /**\n   * Updates alignment of menu to left or right according to the available space\n   * @returns\n   */\n  alignmentLeft(): boolean {\n    const boundingMenu = this.menu?.nativeElement.getBoundingClientRect();\n    const boundingBtn = this.btn?.nativeElement.getBoundingClientRect();\n\n    if (boundingBtn && boundingMenu) {\n      const right = document.body.scrollWidth - boundingBtn.right;\n      //as long as there is enough space on the right, align it to the right\n      return right > boundingMenu.width;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Handles click outside of menu to close menu\n   */\n  handleClickOutside(): void {\n    if (this.show) {\n      this.show = !this.show;\n      this.showChange.emit(this.show);\n    }\n  }\n\n  /**\n   * Select element in menu\n   * @param item\n   */\n  selectElement(item: SelectItem): void {\n    if (this.selectedItem) {\n      if (\n        this.selectedItem.text === item.text &&\n        this.selectedItem.timestamp === item.timestamp &&\n        this.withDeselect\n      ) {\n        this.selectedItem = new SelectItem('');\n      } else {\n        this.selectedItem = item;\n      }\n\n      this.itemSelected.emit(this.selectedItem);\n\n      if (this.show) {\n        this.show = !this.show;\n        this.showChange.emit(this.show);\n      }\n    }\n  }\n\n  /**\n   * Set blank select item text\n   * @param item\n   */\n  selectEmptyElement(): void {\n    if (this.selectedItem) {\n      this.selectedItem.text = '';\n      this.itemSelected.emit(this.selectedItem);\n\n      if (this.show) {\n        this.show = !this.show;\n        this.showChange.emit(this.show);\n      }\n    }\n  }\n\n  /**\n   * Compares elements in menu alphabetically by text param\n   * @param list\n   * @returns\n   */\n  getSortedFilterList(list: string[]): string[] {\n    list = list.sort((a, b) => a.localeCompare(b));\n    return list;\n  }\n\n  /**\n   * Filters list\n   */\n  filterAndSort(): void {\n    this.items = this.itemsBefore.filter(\n      (item: SelectItem) =>\n        !this.filter ||\n        item.text.toLowerCase().includes(this.filter.toLowerCase()),\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n  position: relative;\n}\n\n.flex {\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  .icon-before {\n    padding-left: 10px;\n    padding-right: 5px;\n  }\n\n  .label-before {\n    padding-left: 10px;\n  }\n}\n\nbutton {\n  cursor: pointer;\n  position: relative;\n  height: var(--btn-height);\n  min-width: var(--btn-height);\n  line-height: var(--btn-height);\n  font-weight: var(--font-weight-light);\n  font-size: var(--font-size);\n  padding: 0px;\n  color: var(--fa-icon-color);\n  background: transparent;\n  border: var(--border-width) solid var(--btn-border-color);\n  border-radius: var(--border-radius);\n  width: 100%;\n  max-width: var(--max-width-select);\n  overflow: hidden;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  box-sizing: border-box;\n\n  span {\n    color: var(--btn-color);\n    white-space: nowrap;\n  }\n\n  .select-text {\n    min-width: auto;\n    padding: 0px 10px;\n    text-align: left;\n    width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  fa-icon {\n    color: var(--btn-color);\n  }\n\n  // dropdown arrow design\n  span:last-of-type {\n    width: var(--btn-height);\n    padding: 15px;\n    background: var(--btn-color);\n    border-left: none;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n\n    &:active:not([disabled]) {\n      background-color: var(--accent-color-dark);\n    }\n\n    fa-icon {\n      color: var(--fa-icon-color);\n    }\n  }\n\n  // complete button design\n  &.active {\n    border-color: var(--accent-color);\n\n    span:last-of-type {\n      background-color: var(--accent-color);\n      // background-image: var(--darken-gradient);\n\n      fa-icon {\n        color: var(--fa-icon-color);\n      }\n    }\n\n    ::ng-deep {\n      .successful,\n      .released,\n      .failed,\n      .pending {\n        color: var(--accent-color);\n      }\n    }\n  }\n}\n\n.menu {\n  position: absolute;\n  top: calc(var(--btn-height) + 5px);\n  min-width: 150px;\n  width: max-content;\n  max-width: var(--max-width-select);\n  height: auto;\n  border-radius: 0;\n  background: var(--menu-background);\n  z-index: var(--z-index-5);\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  &.left {\n    left: 0px;\n  }\n\n  &.right {\n    right: 0px;\n  }\n\n  &.show {\n    transform-origin: top;\n    transform: scaleY(1);\n    transition: transform 0.2s ease-in-out;\n    min-width: 100%;\n  }\n\n  &.hide {\n    transform-origin: top;\n    transition: transform 0.2s ease-in-out;\n    transform: scaleY(0);\n  }\n\n  input[type='text'] {\n    height: var(--input-height);\n    border: var(--border-width) solid var(--border-color);\n    border-radius: 0;\n    outline: none;\n    cursor: pointer;\n    font-size: var(--font-size);\n    background: transparent;\n    margin: 5px;\n    width: -moz-available; /* WebKit-based browsers will ignore this. */\n    width: -webkit-fill-available; /* Mozilla-based browsers will ignore this. */\n    width: strech;\n\n    &:focus {\n      border-color: var(--accent-color);\n    }\n  }\n\n  ul {\n    list-style: none;\n    padding: 0px;\n    margin: 0px;\n    max-height: 500px;\n    width: 100%;\n    overflow-y: auto;\n    border-top: 1px solid var(--border-color);\n\n    li {\n      height: var(--btn-height);\n      position: relative;\n      cursor: pointer;\n      font-size: var(--font-size);\n      -webkit-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n      padding: 0.25em 0.5em 0.25em 0.75em;\n      color: var(--text-color);\n      border-bottom: 1px solid rgb(var(--border-color-rgb), 0.2);\n      text-align: left;\n      box-sizing: border-box;\n      overflow: hidden;\n      align-items: center;\n      display: grid;\n      grid-template-columns: 0.6fr 5fr 2fr;\n\n      &.grid {\n        display: grid;\n        grid-template-columns: 0.6fr 5fr 2fr;\n      }\n\n      &.flex {\n        display: flex;\n        gap: 15px;\n      }\n\n      input[type='checkbox'] {\n        margin-right: 10px;\n        position: absolute;\n        opacity: 0;\n        cursor: pointer;\n        height: 0;\n        width: 0;\n      }\n\n      &:last-of-type {\n        border-bottom: none;\n      }\n\n      .text {\n        line-height: calc(var(--btn-height) - 10px);\n        word-wrap: break-word;\n        // max-width: 100%;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        text-align: left;\n      }\n\n      fa-icon {\n        color: var(--btn-color);\n\n        &.pending {\n          color: var(--job-pending-color);\n        }\n        &.successful {\n          color: var(--job-successful-color);\n        }\n      }\n\n      small {\n        text-align: right;\n      }\n\n      &:active,\n      &.active {\n        background-color: var(--row-highlight-color);\n        color: var(--accent-color);\n\n        fa-icon {\n          color: var(--accent-color);\n        }\n      }\n    }\n  }\n}\n\n.flex.navbar {\n  cursor: pointer;\n\n  button {\n    background: transparent;\n    border: none;\n    height: var(--sub-navbar-height);\n    cursor: pointer;\n    max-width: 350px;\n\n    span {\n      color: var(--fa-icon-color);\n    }\n\n    span:first-of-type {\n      overflow: hidden;\n      word-break: break-all;\n    }\n\n    span:last-of-type {\n      background: transparent;\n      border-left: none;\n\n      fa-icon {\n        color: var(--fa-icon-color);\n      }\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n    }\n  }\n\n  .menu {\n    top: calc(var(--navbar-height) + 5px);\n  }\n}\n\n.scheduler {\n  button {\n    border: var(--border-width) solid var(--btn-border-color);\n\n    span {\n      color: var(--btn-color);\n    }\n\n    .select-text {\n      width: 100%;\n    }\n\n    span:last-of-type {\n      background: var(--fa-icon-color);\n      border-left: none;\n\n      fa-icon {\n        color: var(--btn-color);\n      }\n\n      &:active:not([disabled]) {\n        background-color: var(--accent-color-dark);\n      }\n    }\n\n    // complete button design\n    &:hover,\n    &.active {\n      border-color: var(--accent-color-light);\n\n      span:last-of-type {\n        background-color: var(--accent-color-light);\n\n        fa-icon {\n          color: var(--accent-color);\n        }\n      }\n\n      ::ng-deep {\n        .successful,\n        .released,\n        .failed,\n        .pending {\n          color: var(--accent-color);\n        }\n      }\n    }\n  }\n}\n\n.sidebar {\n  @extend .scheduler;\n\n  button {\n    border: none;\n\n    span:last-of-type {\n      background: transparent;\n    }\n\n    &.active {\n      background-color: var(--accent-color-light);\n      color: var(--accent-color);\n\n      fa-icon,\n      span {\n        color: var(--accent-color);\n      }\n\n      span:last-of-type {\n        background-color: var(--accent-color-light);\n\n        &:active:not([disabled]) {\n          background-color: var(--accent-color-light);\n        }\n      }\n    }\n  }\n}\n\n/************************************************\nMedia query to add hover only on device which support hover\n*********************************************/\n\n@media (hover: hover) {\n  button {\n    // complete button design\n    &:hover {\n      border-color: var(--accent-color);\n\n      span:last-of-type {\n        background-color: var(--accent-color);\n        // background-image: var(--darken-gradient);\n\n        fa-icon {\n          color: var(--fa-icon-color);\n        }\n      }\n\n      ::ng-deep {\n        .successful,\n        .released,\n        .failed,\n        .pending {\n          color: var(--accent-color);\n        }\n      }\n    }\n  }\n\n  .menu {\n    ul {\n      li {\n        &:hover {\n          background-color: var(--row-highlight-color);\n          color: var(--accent-color);\n\n          fa-icon {\n            color: var(--accent-color);\n          }\n        }\n      }\n    }\n  }\n\n  .flex.navbar {\n    &:hover {\n      background-color: black;\n      fa-icon {\n        color: var(--accent-color);\n      }\n      button {\n        span:last-of-type {\n          fa-icon {\n            color: var(--accent-color);\n          }\n        }\n        span,\n        fa-icon {\n          color: var(--accent-color);\n        }\n      }\n    }\n\n    &:active:not([disabled]) {\n      button {\n        span:last-of-type {\n          fa-icon {\n            color: var(--accent-color-dark);\n          }\n        }\n        span {\n          color: var(--accent-color-dark);\n        }\n      }\n    }\n  }\n\n  .scheduler {\n    button {\n      &:hover,\n      &.active {\n        border-color: var(--accent-color-light);\n\n        span:last-of-type {\n          background-color: var(--accent-color-light);\n\n          fa-icon {\n            color: var(--accent-color);\n          }\n        }\n\n        ::ng-deep {\n          .successful,\n          .released,\n          .failed,\n          .pending {\n            color: var(--accent-color);\n          }\n        }\n      }\n    }\n  }\n\n  .sidebar {\n    @extend .scheduler;\n    button {\n      &:hover {\n        background-color: var(--accent-color-light);\n        color: var(--accent-color);\n\n        fa-icon,\n        span {\n          color: var(--accent-color);\n        }\n\n        span:last-of-type {\n          background-color: var(--accent-color-light);\n\n          &:active:not([disabled]) {\n            background-color: var(--accent-color-light);\n          }\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": ["OnInit", "OnChanges"],
            "templateData": "@if (selectedItem) {\n  <div\n    class=\"flex\"\n    (clickOutside)=\"handleClickOutside()\"\n    [ngClass]=\"[show ? 'selected' : '', classStyle ?? '']\">\n    <button\n      id=\"select-component\"\n      #btn\n      [ngClass]=\"[show ? 'selected' : '', classStyle ?? '']\"\n      [attr.title]=\"'Select'\"\n      [attr.aria-label]=\"'Select'\"\n      [attr.aria-haspopup]=\"'menu'\"\n      [attr.aria-expanded]=\"show\"\n      (click)=\"toggleMenu()\">\n      @if (faIconBefore) {\n        <span class=\"icon-before\">\n          <fa-icon [icon]=\"faIconBefore\"></fa-icon>\n        </span>\n      }\n      @if (label) {\n        <span class=\"label-before\">{{ label }}</span>\n      }\n      @if (selectedItem.text || selectedItem.displayBtnText) {\n        <span class=\"select-text\">\n          {{ selectedItem.displayBtnText ?? selectedItem.text }}</span\n        >\n      }\n      <span>\n        @if (faIcon) {\n          <fa-icon [icon]=\"faIcon\"> </fa-icon>\n        }\n      </span>\n    </button>\n    <div\n      #menu\n      class=\"menu popup-shadow\"\n      [class.show]=\"show\"\n      [class.hide]=\"!show\"\n      [ngClass]=\"alignmentLeft() ? 'left' : 'right'\">\n      @if (withFilter) {\n        <search-input-component\n          [style.margin.em]=\"'0.25'\"\n          [classStyles]=\"'full-width no-radius'\"\n          [placeholderText]=\"filterPlaceholder\"\n          [(filter)]=\"filter\"\n          (filterChange)=\"filterAndSort()\">\n        </search-input-component>\n      }\n      <ul>\n        @if (withBlankOption) {\n          <li\n            (click)=\"selectEmptyElement()\"\n            [class.active]=\"'' === selectedItem.text\">\n            <span class=\"text\"></span>\n          </li>\n        }\n        @for (item of items; track i; let i = $index) {\n          <li\n            id=\"s-item-{{ i }}\"\n            (click)=\"selectElement(item)\"\n            [ngClass]=\"item.icon && item.localTimestamp ? 'grid' : 'flex'\"\n            [class.active]=\"\n              item.text === selectedItem.text &&\n              item.localTimestamp === selectedItem.localTimestamp\n            \">\n            @if (item.icon) {\n              <fa-icon [icon]=\"item.icon\"></fa-icon>\n            }\n            <span class=\"text\">{{ item.text }}</span>\n          </li>\n        }\n      </ul>\n    </div>\n  </div>\n}\n"
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-717e07c4e287ec12c83df5151ef615cf0d795766addce7c8c9f7a4ebe72376ee35162d890cc32ebf7e6c54f3c448145975185b99cd4d8040c9f7350627a0d93b",
            "file": "projects/angular-component-library/src/lib/components/tabs-view/tab/tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tab-component",
            "styleUrls": ["./tab.component.scss"],
            "styles": [],
            "templateUrl": ["./tab.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "classStyle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IconDefinition",
                    "decorators": []
                },
                {
                    "name": "tabTitle",
                    "defaultValue": "TabViewType.PRODUCTION",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "TabViewType",
                    "decorators": []
                },
                {
                    "name": "tooltip",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create tab in tab view.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\"> &lt;tab-component\n    [tabTitle]=&quot;tab1&quot;&gt;\n &lt;/tab-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create tab in tab view.\n\n```\n <tab-component\n    [tabTitle]=\"tab1\">\n </tab-component>\n```\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { TabViewType } from '../../../model/tab-view-type.enum';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Component to create tab in tab view.\n *\n * @howToUse\n * ```\n *  <tab-component\n *     [tabTitle]=\"tab1\">\n *  </tab-component>\n * ```\n */\n@Component({\n  selector: 'tab-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule],\n  templateUrl: './tab.component.html',\n  styleUrls: ['./tab.component.scss'],\n})\nexport class TabComponent {\n  @Input() tabTitle: TabViewType = TabViewType.PRODUCTION;\n  @Input() tabIcon?: IconDefinition;\n  @Input() active = false;\n  @Input() tooltip = '';\n  @Input() classStyle: string = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n}\n\n.tab-content {\n  display: inline-block;\n  position: absolute;\n  top: var(--tab-bg-height);\n  left: 0;\n  right: 0;\n  bottom: 0;\n  overflow: auto;\n  text-align: center;\n  background-color: var(--tabs-content-color);\n  border-top: 1px solid var(--tabs-background);\n}\n\n[hidden] {\n  display: none !important;\n}\n",
                    "styleUrl": "./tab.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"tab-content\" [hidden]=\"!active\" [ngClass]=\"[classStyle]\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-3b150f0f78db4d60109a5a7eef1f47e331521cedc47d66a1349c86a81ec31f1e833003b11c5c481b423db01cedfb50e7ec2ec880429e6e999ce1bbed732299aa",
            "file": "projects/angular-component-library/src/lib/components/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "table-component",
            "styleUrls": ["./table.component.scss"],
            "styles": [],
            "templateUrl": ["./table.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "classStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "scrollbarWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create and show  table</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;table-component&gt;\n    &lt;div header&gt;\n        ...\n    &lt;/div&gt;\n    &lt;div content&gt;\n        ...\n    &lt;/div&gt;\n&lt;/table-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create and show  table\n\n```\n<table-component>\n    <div header>\n        ...\n    </div>\n    <div content>\n        ...\n    </div>\n</table-component>\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\n\n/**\n * Component to create and show  table\n *\n * @howToUse\n * ```\n * <table-component>\n *     <div header>\n *         ...\n *     </div>\n *     <div content>\n *         ...\n *     </div>\n * </table-component>\n */\n@Component({\n  selector: 'table-component',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss'],\n})\nexport class TableComponent {\n  @Input() scrollbarWidth = 0;\n  @Input() classStyle?: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n  position: relative;\n  width: 100%;\n}\n\n/***************************\n Table\n**************************/\n\n.table-container {\n  position: relative;\n  display: flex-inline;\n  flex-direction: row;\n  margin: 5px 5px;\n  border: 1px solid var(--border-color);\n  min-height: 50px;\n\n  ::ng-deep .text-left {\n    text-align: left;\n  }\n\n  ::ng-deep .ellipsis {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: block;\n    height: var(--row-height);\n    white-space: nowrap;\n  }\n\n  ::ng-deep .search-input {\n    margin: 0.5em 0.5em;\n    height: 35px;\n    text-align: center;\n    min-width: 60px;\n    border: none;\n    width: 100%;\n    border-bottom: 1px solid var(--border-color);\n\n    &:focus {\n      border: none;\n      border-bottom: var(--border-width) solid var(--accent-color);\n    }\n  }\n}\n\n/***************************\nTable Header\n**************************/\n.table-header {\n  font-weight: var(--font-weight-normal);\n  font-size: 0.8em;\n  position: relative;\n  top: 0;\n  left: 0;\n  border-bottom: 1px solid #aaa;\n\n  div {\n    width: 100%;\n  }\n\n  ::ng-deep .flex-column {\n    & > div {\n      border-right: 1px solid var(--border-color);\n      cursor: pointer;\n    }\n\n    .flex-item {\n      flex: 1 1 0;\n    }\n  }\n\n  ::ng-deep .sort {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n    gap: 5px;\n    width: 100%;\n\n    h2 {\n      margin: 0em;\n      line-height: var(--btn-height);\n      font-size: 1.15em;\n      color: white;\n      box-sizing: border-box;\n      // display: contents;\n      max-width: 150px !important;\n      font-weight: var(--font-weight-semibold);\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n\n    &.withSelect {\n      width: calc(100% - 40px);\n    }\n  }\n\n  ::ng-deep h4 {\n    color: white;\n    padding: 0.5em;\n  }\n\n  ::ng-deep .flex-row {\n    display: flex;\n    flex-direction: row;\n    position: relative;\n    top: 0;\n    left: 0;\n\n    & > div {\n      box-sizing: border-box;\n      flex-basis: 100%;\n      text-align: center;\n      text-overflow: ellipsis;\n      display: flex;\n      justify-content: space-between;\n      flex-direction: row;\n\n      span {\n        width: 10px;\n      }\n\n      &.overflow {\n        overflow: hidden;\n        height: var(--btn-height);\n      }\n\n      &.center {\n        justify-content: center;\n      }\n    }\n\n    .flex-item {\n      flex: 1 1 0;\n      width: 0;\n      // overflow: hidden;\n    }\n\n    &:first-of-type {\n      background-color: var(--accent-color);\n    }\n\n    &:last-of-type {\n      border-bottom: 1px solid var(--border-color);\n\n      & > div {\n        border-right: 1px solid var(--border-color);\n\n        &:last-of-type {\n          border-right: none;\n        }\n      }\n    }\n  }\n}\n\n/***************************\nTable Content\n**************************/\n.table-content {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  overflow-y: auto;\n  height: 100%;\n\n  ::ng-deep .table-row,\n  ::ng-deep .table-row-collapse {\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    box-sizing: border-box;\n    border-bottom: 1px solid var(--border-color);\n    cursor: pointer;\n\n    &:active:not([disabled]),\n    &.active {\n      background-image: linear-gradient(\n        var(--row-highlight-color),\n        var(--row-highlight-color)\n      ) !important;\n      color: var(--accent-color);\n    }\n\n    &.no-hover {\n      pointer-events: none;\n      cursor: default;\n    }\n\n    & > div {\n      flex-basis: 100%;\n      border-right: 1px solid var(--border-color);\n      box-sizing: border-box;\n      height: var(--row-height);\n      line-height: var(--row-height);\n      text-overflow: ellipsis;\n      overflow: hidden;\n      padding: 0em 0.5em;\n      line-height: 45px;\n      font-size: 0.9em;\n      white-space: nowrap;\n\n      span {\n        font-weight: var(--font-weight-light);\n      }\n\n      &:last-of-type {\n        border-right: 1px solid var(--border-color);\n      }\n    }\n\n    /** collapsable redesign *****/\n    .collapsible-table {\n      width: 100%;\n\n      .collapsible-header {\n        width: 100%;\n        border: none;\n        margin: 0;\n        padding: 0;\n      }\n\n      .collapsible-table-header {\n        position: relative;\n        display: flex;\n        flex-direction: row;\n        box-sizing: border-box;\n        height: var(--btn-height);\n\n        & > div {\n          flex-basis: 100%;\n          border-right: 1px solid var(--border-color);\n          box-sizing: border-box;\n          height: calc(var(--row-height) - 3px);\n          line-height: calc(var(--row-height) - 3px);\n          text-overflow: ellipsis;\n          overflow: hidden;\n          padding: 0em 0.5em;\n          font-size: 0.9em;\n          align-items: center;\n          word-wrap: break-word;\n\n          span {\n            font-weight: var(--font-weight-light);\n          }\n\n          &:last-of-type {\n            border-right: 1px solid var(--border-color);\n          }\n        }\n\n        &.active {\n          background-color: var(--row-highlight-color);\n          color: var(--accent-color);\n          fa-icon {\n            color: var(--accent-color);\n          }\n        }\n      }\n\n      .collapse-cell {\n        display: grid;\n        grid-template-columns: 0.5fr 3fr;\n        justify-items: center;\n        align-items: center;\n\n        fa-icon {\n          color: var(--text-color);\n          width: var(--btn-height);\n        }\n      }\n\n      .collapsible-content {\n        margin: 0;\n        background-color: white;\n        border: none;\n        border-top: 1px solid var(--border-color);\n\n        p {\n          margin: 0;\n          padding: 0;\n        }\n      }\n    }\n  }\n}\n\n.table-container.inner-table {\n  background-color: white;\n\n  ::ng-deep .flex-row {\n    &:first-of-type {\n      background-color: white;\n\n      h2 {\n        color: var(--text-color);\n        font-weight: var(--font-weight-medium);\n      }\n\n      fa-icon {\n        color: var(--text-color);\n      }\n    }\n  }\n}\n\n/************************************************\nMedia query to add hover only on device which support hover\n*********************************************/\n\n@media (hover: hover) {\n  .table-container {\n    .table-content {\n      ::ng-deep .table-row {\n        &:hover:not([disabled]):not(.inner-table) {\n          background-image: linear-gradient(\n            var(--row-highlight-color),\n            var(--row-highlight-color)\n          ) !important;\n          color: var(--accent-color);\n        }\n\n        &:active:not([disabled]) {\n          background-image: linear-gradient(\n            var(--row-highlight-color),\n            var(--row-highlight-color)\n          ) !important;\n          color: var(--accent-color);\n        }\n      }\n\n      ::ng-deep .table-row-collapse {\n        .collapsible-table-header {\n          &:hover:not([disabled]):not(.inner-table) {\n            background-image: linear-gradient(\n              var(--row-highlight-color),\n              var(--row-highlight-color)\n            ) !important;\n            color: var(--accent-color);\n\n            ::ng-deep fa-icon {\n              color: var(--accent-color) !important;\n            }\n          }\n\n          &:active:not([disabled]) {\n            background-image: linear-gradient(\n              var(--row-highlight-color),\n              var(--row-highlight-color)\n            ) !important;\n            color: var(--accent-color);\n\n            ::ng-deep fa-icon {\n              color: var(--accent-color) !important;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  .table-container.inner-table {\n    .table-content {\n      .collapsible-content.show {\n        color: var(--text-color) !important;\n      }\n\n      ::ng-deep .table-row {\n        // no hover on inner\n        &.inner-table {\n          color: var(--text-color) !important;\n          background-color: white !important;\n        }\n\n        .collapsible-header {\n          &:hover {\n            background-image: linear-gradient(\n              var(--row-highlight-color),\n              var(--row-highlight-color)\n            ) !important;\n            color: var(--accent-color);\n\n            ::ng-deep fa-icon {\n              color: var(--accent-color) !important;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div [ngClass]=\"['table-container', classStyle ?? '']\">\n  <div class=\"table-header\" [style.padding-right.px]=\"scrollbarWidth\">\n    <ng-content select=\"[header]\"></ng-content>\n  </div>\n\n  <div class=\"table-content\">\n    <ng-content select=\"[content]\"></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "TabsViewComponent",
            "id": "component-TabsViewComponent-6a7bcafc60ca979f4553b500fe488b460a5f0ea7c0add776f9e83280268ae7d543381e7c81b8f450dae2e69c2c9d49bde3a126fa7f42b30377cda112a299aa71",
            "file": "projects/angular-component-library/src/lib/components/tabs-view/tabs-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tabs-view-component",
            "styleUrls": ["./tabs-view.component.scss"],
            "styles": [],
            "templateUrl": ["./tabs-view.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "selectedTabChanged",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabComponent>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabComponent"
                        }
                    ],
                    "modifierKind": [170]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "TooltipDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Component to tab view with tabs to select.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;tabs-view-component\n (selectedTabChanged)=&quot;selectedTabChanged($event)&quot;&gt;\n\n &lt;tab-component\n    [tabTitle]=&quot;tab1&quot;&gt;\n &lt;/tab-component&gt;\n\n &lt;tab-component\n    [tabTitle]=&quot;tab2&quot;&gt;\n &lt;/tab-component&gt;\n\n&lt;/tabs-view-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to tab view with tabs to select.\n\n```\n<tabs-view-component\n (selectedTabChanged)=\"selectedTabChanged($event)\">\n\n <tab-component\n    [tabTitle]=\"tab1\">\n </tab-component>\n\n <tab-component\n    [tabTitle]=\"tab2\">\n </tab-component>\n\n</tabs-view-component>\n```\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Output,\n  QueryList,\n} from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { TabComponent } from './tab/tab.component';\nimport { TooltipDirective } from '../../directives/tooltip.directive';\n\n/**\n * Component to tab view with tabs to select.\n *\n * @howToUse\n * ```\n * <tabs-view-component\n *  (selectedTabChanged)=\"selectedTabChanged($event)\">\n *\n *  <tab-component\n *     [tabTitle]=\"tab1\">\n *  </tab-component>\n *\n *  <tab-component\n *     [tabTitle]=\"tab2\">\n *  </tab-component>\n *\n * </tabs-view-component>\n * ```\n */\n@Component({\n  selector: 'tabs-view-component',\n  standalone: true,\n  imports: [FontAwesomeModule, TooltipDirective],\n  templateUrl: './tabs-view.component.html',\n  styleUrls: ['./tabs-view.component.scss'],\n})\nexport class TabsViewComponent implements AfterContentInit {\n  @ContentChildren(TabComponent) tabs?: QueryList<TabComponent>;\n\n  @Output() selectedTabChanged = new EventEmitter<string>();\n\n  ngAfterContentInit() {\n    const actives = this.tabs?.filter((tab) => tab.active);\n    if (this.tabs && (!actives || actives.length === 0)) {\n      this.selectTab(this.tabs?.first);\n    }\n  }\n\n  selectTab(tab: TabComponent): void {\n    this.tabs?.forEach((tab) => {\n      tab.active = false;\n    });\n    tab.active = true;\n    this.selectedTabChanged.emit(tab.tabTitle);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n.tabs-view {\n  height: 100%;\n\n  ul {\n    list-style: none;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    margin: 0px;\n    padding: 0px;\n    height: var(--tab-bg-height);\n    position: relative;\n    z-index: var(--z-index-4);\n    background: var(--tabs-background);\n\n    .active {\n      border-bottom: 3px solid var(--fa-icon-color);\n      color: var(--fa-icon-color);\n    }\n\n    li {\n      padding: var(--btn-small-padding);\n      margin: calc(var(--tab-bg-height) - var(--btn-height)) 5px 0px 5px;\n      cursor: pointer;\n      height: var(--btn-height);\n      line-height: var(--btn-height);\n      box-sizing: border-box;\n      font-weight: var(--font-weight-semibold);\n      color: var(--not-emphrazed-color-dark);\n\n      &:hover:not(.active) {\n        color: var(--accent-color);\n        border-bottom: 3px solid var(--accent-color);\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./tabs-view.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": ["AfterContentInit"],
            "templateData": "<div class=\"tabs-view\">\n  <ul>\n    @for (tab of tabs; track tab) {\n      <li\n        (click)=\"selectTab(tab)\"\n        [class.active]=\"tab.active\"\n        [tooltip]=\"tab.tooltip\">\n        {{ tab.tabTitle }}\n      </li>\n    }\n  </ul>\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "TagBtnComponent",
            "id": "component-TagBtnComponent-7db1c7f7d58cfa357fec552e0f90e20a0f4808cfbce0f3970e4c3e82a6afef85f836ba8d7b61fe4d0ca73c0efd748ad892b94f03e88f0a3bca106fad1d523091",
            "file": "projects/angular-component-library/src/lib/components/tag-btn/tag-btn.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tag-btn-component",
            "styleUrls": ["./tag-btn.component.scss"],
            "styles": [],
            "templateUrl": ["./tag-btn.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "removeTagSelected",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faClose",
                    "defaultValue": "Icons.faXmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "removeTag",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove tag\n",
                    "description": "<p>Remove tag</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create a tag.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;tag-btn-component\n [label]=&quot;string | translate &quot;&gt;\n&lt;/tag-btn-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create a tag.\n\n```\n<tag-btn-component\n [label]=\"string | translate \">\n</tag-btn-component>\n```\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { Icons } from '../../model/icons';\n\n/**\n * Component to create a tag.\n *\n * @howToUse\n * ```\n * <tag-btn-component\n *  [label]=\"string | translate \">\n * </tag-btn-component>\n * ```\n */\n@Component({\n  selector: 'tag-btn-component',\n  standalone: true,\n  imports: [FontAwesomeModule],\n  templateUrl: './tag-btn.component.html',\n  styleUrls: ['./tag-btn.component.scss'],\n})\nexport class TagBtnComponent {\n  @Input() label?: string;\n\n  @Input() backgroundColor?: string;\n\n  @Output() removeTagSelected = new EventEmitter<string>();\n\n  faClose: IconDefinition = Icons.faXmark;\n\n  /**\n   * Remove tag\n   */\n  removeTag() {\n    this.removeTagSelected.emit(this.label);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n\nbutton {\n  position: relative;\n  height: calc(var(--btn-height) - 5px);\n  line-height: calc(var(--btn-height) - 5px);\n  padding: var(--btn-padding);\n  border: 0;\n  font-weight: var(--font-weight-light);\n  font-size: var(--font-size);\n  transition: background 400ms;\n  background: var(--accent-color);\n  color: var(--fa-icon-color);\n  cursor: pointer;\n  border-radius: var(--tag-btn-radius);\n  margin: 0.25em;\n  display: flex;\n  align-items: center;\n\n  fa-icon {\n    color: var(--fa-icon-color);\n  }\n\n  span {\n    color: var(--fa-icon-color);\n    margin: 0px 5px;\n  }\n\n  &:active:not([disabled]) {\n    background-color: var(--accent-color-dark);\n  }\n}\n\n/************************************************\nMedia query to add hover only on device which support hover\n*********************************************/\n\n@media (hover: hover) {\n  button {\n    &:hover:not([disabled]) {\n      background-image: var(--darken-gradient) !important;\n    }\n\n    &:active:not([disabled]) {\n      background-color: var(--accent-color-dark);\n    }\n  }\n}\n",
                    "styleUrl": "./tag-btn.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<button\n  [attr.title]=\"label\"\n  [attr.aria-label]=\"label\"\n  [style.background]=\"backgroundColor\">\n  @if (label) {\n    <span>{{ label }}</span>\n  }\n  <fa-icon [icon]=\"faClose\" (click)=\"removeTag()\"></fa-icon>\n</button>\n"
        },
        {
            "name": "ToggleBtnComponent",
            "id": "component-ToggleBtnComponent-2cc46e638eb884845459476d7717d46087daf8e69ea309555a202e2c7e8e62ef1b705ede14b903a940c015dead45205e1aa1f37f6ea671de7a38340be7a2469e",
            "file": "projects/angular-component-library/src/lib/components/toggle-btn/toggle-btn.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "toggle-btn-component",
            "styleUrls": ["./toggle-btn.component.scss"],
            "styles": [],
            "templateUrl": ["./toggle-btn.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "classStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "checkedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faCheck",
                    "defaultValue": "Icons.faCheck",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "randomId",
                    "defaultValue": "Math.floor(Math.random() * 16777215).toString(16)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create segmented buttons.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;toggle-btn-component\n   [label] = &quot;show&quot;\n   [(state)]=&quot;stateChanged($event)&quot;&gt;\n &lt;/toggle-btn-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create segmented buttons.\n\n```\n<toggle-btn-component\n   [label] = \"show\"\n   [(state)]=\"stateChanged($event)\">\n </toggle-btn-component>\n```\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport { Icons } from '../../model/icons';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Component to create segmented buttons.\n *\n * @howToUse\n * ```\n * <toggle-btn-component\n *    [label] = \"show\"\n *    [(state)]=\"stateChanged($event)\">\n *  </toggle-btn-component>\n * ```\n */\n@Component({\n  selector: 'toggle-btn-component',\n  standalone: true,\n  imports: [CommonModule, FontAwesomeModule, FormsModule],\n  templateUrl: './toggle-btn.component.html',\n  styleUrls: ['./toggle-btn.component.scss'],\n})\nexport class ToggleBtnComponent {\n  @Input() label?: string;\n  @Input() checked = true;\n  @Input() isDisabled = false;\n  @Input() classStyle?: string;\n\n  @Output() checkedChange = new EventEmitter<boolean>();\n\n  faCheck: IconDefinition = Icons.faCheck;\n\n  randomId: string = Math.floor(Math.random() * 16777215).toString(16);\n\n  toggleState(): void {\n    this.checkedChange.emit(this.checked);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/*\nCSS Variables -> --accent-color for changing theme\n*/\n$toggle-btn-width: 65px;\n$toggle-btn-height: calc(var(--btn-height) - 10px);\n$slider-height: calc($toggle-btn-height / 2);\n\n:host {\n  position: relative;\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  height: var(--btn-height);\n}\n\nspan {\n  font-size: var(--font-size);\n  margin: 0;\n  margin-right: 5px;\n  font-weight: var(--font-weight-normal);\n}\n\n.navbar {\n  color: white;\n}\n\n.toggle {\n  position: relative;\n  width: $toggle-btn-width;\n  height: $toggle-btn-height;\n  overflow: hidden;\n  border-radius: 100px;\n\n  .slider,\n  .layer {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n\n  .checkbox {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    opacity: 0;\n    cursor: pointer;\n    z-index: 3;\n  }\n\n  .slider {\n    z-index: 2;\n  }\n\n  .layer {\n    width: auto;\n    transition: 0.3s ease all;\n    border: 1px solid var(--btn-border-color);\n    z-index: 1;\n    border-radius: 100px;\n\n    &.active {\n      border: 1px solid var(--accent-color);\n    }\n  }\n\n  /* toggle 1 */\n  .slider:before {\n    content: ' ';\n    position: absolute;\n    left: 3px;\n    bottom: 4px;\n    width: 22px;\n    height: 22px;\n    color: var(--fa-icon-color);\n    font-size: 1.1em;\n    line-height: 0.7em;\n    font-weight: var(--font-weight-medium);\n    text-align: center;\n    background-color: var(--toggle-btn-background);\n    border-radius: 50%;\n    transition: 0.3s cubic-bezier(0.18, 0.89, 0.35, 1.15) all;\n  }\n\n  .checkbox:checked + .slider:before {\n    content: ' ';\n    color: var(--accent-color);\n    font-size: 1.1em;\n    line-height: 0.9em;\n    font-weight: var(--font-weight-medium);\n    left: calc($toggle-btn-width - $toggle-btn-height + 4px);\n    background-color: var(--fa-icon-color);\n  }\n\n  .checkbox:checked ~ .layer {\n    background-color: var(--accent-color);\n  }\n\n  .checkbox:disabled {\n    cursor: not-allowed;\n  }\n\n  .slider,\n  .slider:before,\n  .layer {\n    transition: 0.3s ease all;\n  }\n}\n\n.disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n/************************************************\nMedia query to add hover only on device which support hover\n*********************************************/\n\n@media (hover: hover) {\n  .toggle {\n    &:hover {\n      .layer {\n        border: 1px solid var(--accent-color-light);\n      }\n\n      /* toggle 1 */\n      .slider:before {\n        color: var(--fa-icon-color);\n        background-color: var(--accent-color);\n      }\n\n      .checkbox:checked + .slider:before {\n        color: var(--accent-color);\n        background-color: var(--fa-icon-color);\n      }\n\n      .checkbox:checked ~ .layer {\n        background-color: var(--accent-color-light);\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./toggle-btn.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "@if (label) {\n  <p [ngClass]=\"classStyle\">{{ label }}</p>\n}\n\n<div\n  class=\"toggle\"\n  [style.margin-left.em]=\"label ? '0.25' : '0'\"\n  [class.disabled]=\"isDisabled\">\n  <input\n    id=\"toggle-btn-{{ randomId }}\"\n    type=\"checkbox\"\n    class=\"checkbox\"\n    [disabled]=\"isDisabled\"\n    [(ngModel)]=\"checked\"\n    (ngModelChange)=\"toggleState()\" />\n  <div class=\"slider\"></div>\n  <div class=\"layer\" [class.active]=\"checked\"></div>\n</div>\n"
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-b875f985f47579703de2d9fd7fb1154237e79f40962f4dfc4727955fd5319dd2c86cd8c403b8c94351d2cee78d79518c4614795a8bc1c8daeda24466ba075cc9",
            "file": "projects/angular-component-library/src/lib/components/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tooltip-component",
            "styleUrls": ["./tooltip.component.scss"],
            "styles": [],
            "templateUrl": ["./tooltip.component.html"],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "left",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "tooltip",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "top",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component to create tooltip</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\">&lt;tooltip-component&gt;\n&lt;/tooltip-component&gt;</code></pre></div>",
            "rawdescription": "\n\nComponent to create tooltip\n\n```\n<tooltip-component>\n</tooltip-component>\n```\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\n/**\n * Component to create tooltip\n *\n * @howToUse\n * ```\n * <tooltip-component>\n * </tooltip-component>\n * ```\n */\n@Component({\n  selector: 'tooltip-component',\n  standalone: true,\n  imports: [FontAwesomeModule],\n  templateUrl: './tooltip.component.html',\n  styleUrls: ['./tooltip.component.scss'],\n})\nexport class TooltipComponent {\n  tooltip = '';\n  left = 0;\n  top = 0;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n\n.tooltip {\n  position: fixed;\n  background-color: var(--tooltip-background);\n  border-radius: 4px;\n  color: var(--fa-icon-color);\n  font-family: Arial;\n  padding: 3px 6px;\n  font-size: 13px;\n  margin-top: 5px;\n  transform: translateX(-50%);\n  padding: 0.5em;\n  pointer-events: none;\n  transition: 1s;\n  z-index: var(--z-index-5);\n\n  &::before {\n    content: '';\n    width: 0;\n    height: 0;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-bottom: 5px solid var(--tooltip-background);\n    position: absolute;\n    left: calc(50% - 5px);\n    top: -5px;\n  }\n}\n",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"tooltip\" [style.left]=\"left + 'px'\" [style.top]=\"top + 'px'\">\n  {{ tooltip }}\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "Active",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Active',\n    isDisabled: false,\n    isActive: true,\n    faIcon: faInfo,\n  },\n}"
            },
            {
                "name": "Changes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 1,\n    borderRadius: 50,\n    classStyle: 'changes',\n    isDisabled: false,\n  },\n}"
            },
            {
                "name": "Colors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/colors.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj",
                "defaultValue": "{\n\trender: () => {\n\t  const tokens = getColorTokens();\n\t  return {\n\t\tprops: { tokens },\n\t\ttemplate: `\n\t\t  <div style=\"display: grid; grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); gap: 1rem;\">\n\t\t\t<div *ngFor=\"let token of tokens\">\n\t\t\t  <div [style.background]=\"token.value\" style=\"height: 60px; border-radius: 6px; border: 1px solid #ccc;\"></div>\n\t\t\t  <div style=\"font-size: 12px; margin-top: 4px;\">{{ token.name }}</div>\n\t\t\t  <div style=\"font-size: 12px;\">{{ token.value }}</div>\n\t\t\t</div>\n\t\t  </div>\n\t\t`,\n\t  };\n\t},\n  }"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Default',\n    borderRadius: 10,\n    isDisabled: false,\n    postIcon: faCheck,\n    preIcon: undefined,\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Default',\n    isDisabled: false,\n  },\n}"
            },
            {
                "name": "Delete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Delete',\n    isDisabled: false,\n    faIcon: faTrash,\n    styleClass: 'delete',\n    width: '200px',\n  },\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Disabled',\n    isDisabled: true,\n    faIcon: faInfo,\n    styleClass: 'inverted',\n  },\n}"
            },
            {
                "name": "ErrorWithLink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    title: 'Error Alert',\n    message: 'Error Message',\n    type: AlertType.ERROR,\n    visibleState: true,\n  },\n}"
            },
            {
                "name": "getColorTokens",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/colors.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): ColorToken[] => {\n  const styles = window.getComputedStyle(document.documentElement);\n\n  return accentColors.map(name => ({\n    name,\n    value: styles.getPropertyValue(name) || 'transparent'\n  }));\n}"
            },
            {
                "name": "hoverStyles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "HoverStyle"
            },
            {
                "name": "iconOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<string, IconDefinition>",
                "defaultValue": "{\n  faCheck: faCheck,\n  faExclamation: faExclamation,\n  faInfo: faInfo,\n}"
            },
            {
                "name": "iconOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<string, IconDefinition>",
                "defaultValue": "{\n  faCheck: faCheck,\n  faExclamation: faExclamation,\n  faInfo: faInfo,\n  faSpinner: faSpinner,\n  faTrash: faTrash,\n}"
            },
            {
                "name": "InfoAlert",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    title: 'Info Alert',\n    message: 'Info  Message',\n    type: AlertType.INFO,\n    visibleState: true,\n    navigationLink: 'pailot.com',\n    navigationLinkLabel: 'Further informations under pailto.com ',\n  },\n}"
            },
            {
                "name": "Inverted",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Inverted',\n    isDisabled: false,\n    faIcon: faInfo,\n    styleClass: 'inverted',\n  },\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\n  args: { onClick: fn() },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HeaderComponent>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n  args: {\n    onLogin: fn(),\n    onLogout: fn(),\n    onCreateAccount: fn(),\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PageComponent>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/colors.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'Design/Colors',\n  parameters: {\n    docs: {\n      description: {\n        component: 'Colors overview',\n      },\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AlertComponent>",
                "defaultValue": "{\n  title: 'Components/Alert',\n  component: AlertComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [RouterModule],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {\n            snapshot: { paramMap: new Map([['id', '123']]), data: {} },\n            params: [{ id: '123' }],\n            queryParams: {},\n          }, // Mocking der ActivatedRoute, so dass sie params und andere Routen-Daten zurückgibt\n        },\n      ],\n    }),\n  ],\n  tags: ['autodocs'],\n  argTypes: {\n    title: { control: 'text', value: '' },\n    message: { control: 'text', value: '' },\n    type: {\n      control: {\n        type: 'select',\n      },\n      options: Object.values(types),\n      mapping: AlertType,\n      value: AlertType.SUCCESS,\n    },\n    visibleState: { control: 'boolean', value: false },\n    navigationLink: { control: 'text', value: undefined },\n    navigationLinkLabel: { control: 'text', value: undefined },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<BadgeComponent>",
                "defaultValue": "{\n  title: 'Components/Badge',\n  component: BadgeComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    label: { control: 'text' },\n    borderRadius: { control: 'number' },\n    classStyle: {\n      control: 'select',\n      options: [\n        'running',\n        'failed',\n        'success',\n        'pending',\n        'changes',\n        'urgent',\n        'frozen',\n        'current',\n        'manual',\n        'free',\n      ],\n    },\n    isDisabled: { control: 'boolean' },\n    postIcon: {\n      control: {\n        type: 'select',\n      },\n      options: Object.keys(iconOptions),\n      mapping: iconOptions,\n    },\n    preIcon: {\n      control: {\n        type: 'select',\n      },\n      options: Object.keys(iconOptions),\n      mapping: iconOptions,\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<BorderedBtnComponent>",
                "defaultValue": "{\n  title: 'Components/Buttons/BorderedBtn',\n  component: BorderedBtnComponent,\n  argTypes: {\n    ariaLabel: { control: 'text' },\n    label: { control: 'text' },\n    faIcon: {\n      control: {\n        type: 'select',\n      },\n      options: Object.keys(iconOptions),\n      mapping: iconOptions,\n    },\n    hoverStyle: {\n      control: {\n        type: 'select',\n      },\n      options: Object.values(hoverStyles),\n      mapping: HoverStyle,\n    },\n    showIcon: { control: 'boolean' },\n    isDisabled: { control: 'boolean' },\n    styleClass: {\n      control: 'select',\n      options: ['simple', 'filling', 'shining', 'delete', 'inverted'],\n    },\n    width: { control: 'text' },\n    isSpinning: { control: 'boolean' },\n    isActive: { control: 'boolean' },\n  },\n  tags: ['autodocs'],\n}"
            },
            {
                "name": "PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/sass-helper.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'--'"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "RunningWithPostIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Running',\n    borderRadius: 10,\n    classStyle: 'running',\n    isDisabled: false,\n    postIcon: faCheck,\n    preIcon: undefined,\n  },\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Spinning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Spinning',\n    isDisabled: false,\n    isSpinning: true,\n    faIcon: faSpinner,\n  },\n}"
            },
            {
                "name": "SuccessAlert",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    title: 'Success Alert',\n    message: 'Success Message',\n    type: AlertType.SUCCESS,\n    visibleState: true,\n  },\n}"
            },
            {
                "name": "SuccessWithPreIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Success',\n    borderRadius: 10,\n    classStyle: 'success',\n    isDisabled: false,\n    postIcon: undefined,\n    preIcon: faInfo,\n  },\n}"
            },
            {
                "name": "types",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "AlertType"
            },
            {
                "name": "WarningAlert",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    title: 'Warning Alert',\n    message: 'Warning Message',\n    type: AlertType.WARNING,\n    visibleState: true,\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ColorToken",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/angular-component-library/src/lib/components/colors.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "projects/angular-component-library/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderComponent>",
                "file": "projects/angular-component-library/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PageComponent>",
                "file": "projects/angular-component-library/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj",
                "file": "projects/angular-component-library/src/lib/components/colors.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AlertComponent>",
                "file": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<BadgeComponent>",
                "file": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<BorderedBtnComponent>",
                "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts": [
                {
                    "name": "Active",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Active',\n    isDisabled: false,\n    isActive: true,\n    faIcon: faInfo,\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Default',\n    isDisabled: false,\n  },\n}"
                },
                {
                    "name": "Delete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Delete',\n    isDisabled: false,\n    faIcon: faTrash,\n    styleClass: 'delete',\n    width: '200px',\n  },\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Disabled',\n    isDisabled: true,\n    faIcon: faInfo,\n    styleClass: 'inverted',\n  },\n}"
                },
                {
                    "name": "hoverStyles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "HoverStyle"
                },
                {
                    "name": "iconOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string, IconDefinition>",
                    "defaultValue": "{\n  faCheck: faCheck,\n  faExclamation: faExclamation,\n  faInfo: faInfo,\n  faSpinner: faSpinner,\n  faTrash: faTrash,\n}"
                },
                {
                    "name": "Inverted",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Inverted',\n    isDisabled: false,\n    faIcon: faInfo,\n    styleClass: 'inverted',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<BorderedBtnComponent>",
                    "defaultValue": "{\n  title: 'Components/Buttons/BorderedBtn',\n  component: BorderedBtnComponent,\n  argTypes: {\n    ariaLabel: { control: 'text' },\n    label: { control: 'text' },\n    faIcon: {\n      control: {\n        type: 'select',\n      },\n      options: Object.keys(iconOptions),\n      mapping: iconOptions,\n    },\n    hoverStyle: {\n      control: {\n        type: 'select',\n      },\n      options: Object.values(hoverStyles),\n      mapping: HoverStyle,\n    },\n    showIcon: { control: 'boolean' },\n    isDisabled: { control: 'boolean' },\n    styleClass: {\n      control: 'select',\n      options: ['simple', 'filling', 'shining', 'delete', 'inverted'],\n    },\n    width: { control: 'text' },\n    isSpinning: { control: 'boolean' },\n    isActive: { control: 'boolean' },\n  },\n  tags: ['autodocs'],\n}"
                },
                {
                    "name": "Spinning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Spinning',\n    isDisabled: false,\n    isSpinning: true,\n    faIcon: faSpinner,\n  },\n}"
                }
            ],
            "projects/angular-component-library/src/lib/components/badge/badge.stories.ts": [
                {
                    "name": "Changes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 1,\n    borderRadius: 50,\n    classStyle: 'changes',\n    isDisabled: false,\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Default',\n    borderRadius: 10,\n    isDisabled: false,\n    postIcon: faCheck,\n    preIcon: undefined,\n  },\n}"
                },
                {
                    "name": "iconOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string, IconDefinition>",
                    "defaultValue": "{\n  faCheck: faCheck,\n  faExclamation: faExclamation,\n  faInfo: faInfo,\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<BadgeComponent>",
                    "defaultValue": "{\n  title: 'Components/Badge',\n  component: BadgeComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    label: { control: 'text' },\n    borderRadius: { control: 'number' },\n    classStyle: {\n      control: 'select',\n      options: [\n        'running',\n        'failed',\n        'success',\n        'pending',\n        'changes',\n        'urgent',\n        'frozen',\n        'current',\n        'manual',\n        'free',\n      ],\n    },\n    isDisabled: { control: 'boolean' },\n    postIcon: {\n      control: {\n        type: 'select',\n      },\n      options: Object.keys(iconOptions),\n      mapping: iconOptions,\n    },\n    preIcon: {\n      control: {\n        type: 'select',\n      },\n      options: Object.keys(iconOptions),\n      mapping: iconOptions,\n    },\n  },\n}"
                },
                {
                    "name": "RunningWithPostIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Running',\n    borderRadius: 10,\n    classStyle: 'running',\n    isDisabled: false,\n    postIcon: faCheck,\n    preIcon: undefined,\n  },\n}"
                },
                {
                    "name": "SuccessWithPreIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Success',\n    borderRadius: 10,\n    classStyle: 'success',\n    isDisabled: false,\n    postIcon: undefined,\n    preIcon: faInfo,\n  },\n}"
                }
            ],
            "projects/angular-component-library/src/lib/components/colors.stories.ts": [
                {
                    "name": "Colors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/colors.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj",
                    "defaultValue": "{\n\trender: () => {\n\t  const tokens = getColorTokens();\n\t  return {\n\t\tprops: { tokens },\n\t\ttemplate: `\n\t\t  <div style=\"display: grid; grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); gap: 1rem;\">\n\t\t\t<div *ngFor=\"let token of tokens\">\n\t\t\t  <div [style.background]=\"token.value\" style=\"height: 60px; border-radius: 6px; border: 1px solid #ccc;\"></div>\n\t\t\t  <div style=\"font-size: 12px; margin-top: 4px;\">{{ token.name }}</div>\n\t\t\t  <div style=\"font-size: 12px;\">{{ token.value }}</div>\n\t\t\t</div>\n\t\t  </div>\n\t\t`,\n\t  };\n\t},\n  }"
                },
                {
                    "name": "getColorTokens",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/colors.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): ColorToken[] => {\n  const styles = window.getComputedStyle(document.documentElement);\n\n  return accentColors.map(name => ({\n    name,\n    value: styles.getPropertyValue(name) || 'transparent'\n  }));\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/colors.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'Design/Colors',\n  parameters: {\n    docs: {\n      description: {\n        component: 'Colors overview',\n      },\n    },\n  },\n}"
                }
            ],
            "projects/angular-component-library/src/lib/components/alert/alert.stories.ts": [
                {
                    "name": "ErrorWithLink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    title: 'Error Alert',\n    message: 'Error Message',\n    type: AlertType.ERROR,\n    visibleState: true,\n  },\n}"
                },
                {
                    "name": "InfoAlert",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    title: 'Info Alert',\n    message: 'Info  Message',\n    type: AlertType.INFO,\n    visibleState: true,\n    navigationLink: 'pailot.com',\n    navigationLinkLabel: 'Further informations under pailto.com ',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AlertComponent>",
                    "defaultValue": "{\n  title: 'Components/Alert',\n  component: AlertComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [RouterModule],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {\n            snapshot: { paramMap: new Map([['id', '123']]), data: {} },\n            params: [{ id: '123' }],\n            queryParams: {},\n          }, // Mocking der ActivatedRoute, so dass sie params und andere Routen-Daten zurückgibt\n        },\n      ],\n    }),\n  ],\n  tags: ['autodocs'],\n  argTypes: {\n    title: { control: 'text', value: '' },\n    message: { control: 'text', value: '' },\n    type: {\n      control: {\n        type: 'select',\n      },\n      options: Object.values(types),\n      mapping: AlertType,\n      value: AlertType.SUCCESS,\n    },\n    visibleState: { control: 'boolean', value: false },\n    navigationLink: { control: 'text', value: undefined },\n    navigationLinkLabel: { control: 'text', value: undefined },\n  },\n}"
                },
                {
                    "name": "SuccessAlert",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    title: 'Success Alert',\n    message: 'Success Message',\n    type: AlertType.SUCCESS,\n    visibleState: true,\n  },\n}"
                },
                {
                    "name": "types",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "AlertType"
                },
                {
                    "name": "WarningAlert",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    title: 'Warning Alert',\n    message: 'Warning Message',\n    type: AlertType.WARNING,\n    visibleState: true,\n  },\n}"
                }
            ],
            "projects/angular-component-library/src/stories/button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\n  args: { onClick: fn() },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "projects/angular-component-library/src/stories/header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HeaderComponent>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n  args: {\n    onLogin: fn(),\n    onLogout: fn(),\n    onCreateAccount: fn(),\n  },\n}"
                }
            ],
            "projects/angular-component-library/src/stories/page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PageComponent>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "projects/angular-component-library/src/lib/components/sass-helper.component.ts": [
                {
                    "name": "PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/src/lib/components/sass-helper.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'--'"
                }
            ],
            "projects/angular-component-library/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/angular-component-library/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/angular-component-library/src/lib/components/colors.stories.ts": [
                {
                    "name": "ColorToken",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/angular-component-library/src/lib/components/colors.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj",
                    "file": "projects/angular-component-library/src/lib/components/colors.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/angular-component-library/src/stories/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "projects/angular-component-library/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/angular-component-library/src/stories/header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderComponent>",
                    "file": "projects/angular-component-library/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/angular-component-library/src/stories/page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PageComponent>",
                    "file": "projects/angular-component-library/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/angular-component-library/src/lib/components/alert/alert.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AlertComponent>",
                    "file": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/angular-component-library/src/lib/components/badge/badge.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<BadgeComponent>",
                    "file": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<BorderedBtnComponent>",
                    "file": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 10,
        "status": "low",
        "files": [
            {
                "filePath": "projects/angular-component-library/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 6,
                "coverageCount": "1/15",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ErrorWithLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InfoAlert",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SuccessAlert",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "types",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WarningAlert",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/alert/alert.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/badge/badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BadgeComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Changes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "iconOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RunningWithPostIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SuccessWithPreIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/badge/badge.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BorderedBtnComponent",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Active",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Delete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hoverStyles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "iconOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Inverted",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Spinning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/bordered-btn/bordered-btn.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/borderless-btn/borderless-btn.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BorderlessBtnComponent",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/circle-btn/circle-btn.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CircleBtnComponent",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/collapsible/collapsible.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollapsibleComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/color-palette/color-palette.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorPaletteComponent",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Colors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getColorTokens",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/colors.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/colors.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ColorToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/colors.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/context-menu/context-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContextMenuComponent",
                "coveragePercent": 33,
                "coverageCount": "5/15",
                "status": "medium"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/custom-select/custom-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomSelectComponent",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/date-picker/date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerComponent",
                "coveragePercent": 21,
                "coverageCount": "3/14",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/date-range-picker/date-range-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateRangePickerComponent",
                "coveragePercent": 28,
                "coverageCount": "4/14",
                "status": "medium"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/date-time-picker/date-time-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateTimePickerComponent",
                "coveragePercent": 21,
                "coverageCount": "4/19",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/dropzone/dropzone.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropzoneComponent",
                "coveragePercent": 40,
                "coverageCount": "11/27",
                "status": "medium"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/duration-input/duration-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DurationInputComponent",
                "coveragePercent": 13,
                "coverageCount": "2/15",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/filled-btn/filled-btn.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilledBtnComponent",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 22,
                "coverageCount": "2/9",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/loader/loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoaderComponent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 18,
                "coverageCount": "6/32",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/multi-select/multi-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiSelectComponent",
                "coveragePercent": 33,
                "coverageCount": "9/27",
                "status": "medium"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/navbar-btn/navbar-btn.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarBtnComponent",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/no-data/no-data.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoDataComponent",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/non-modal/non-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NonModalComponent",
                "coveragePercent": 23,
                "coverageCount": "3/13",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/popover/popover.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopoverComponent",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/sass-helper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SassHelperComponent",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/sass-helper.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/search-input/search-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchInputComponent",
                "coveragePercent": 30,
                "coverageCount": "3/10",
                "status": "medium"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/segmented-btn/segmented-btn.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SegmentedBtnComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 28,
                "coverageCount": "8/28",
                "status": "medium"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/tabs-view/tab/tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabComponent",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/tabs-view/tabs-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsViewComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/tag-btn/tag-btn.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagBtnComponent",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/toggle-btn/toggle-btn.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleBtnComponent",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/lib/components/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/button.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/header.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/angular-component-library/src/stories/page.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}
